#include <IR/IR.h>
#include <corelib.h>
#include <cpuf/hex.h>
#include <tree.h>
// a structure used to cout
void LLIR::add(LLIR &repr) {
    data.insert(data.end(), repr.data.begin(), repr.data.end());
}
void LLIR::add(std::vector<LLIR::member> repr) {
    data.insert(data.end(), repr.begin(), repr.end());
}
void LLIR::push(LLIR::member member) {
    data.push_back(member);
}
void LLIR::pop() {
    data.pop_back();
};
void LLIR::push_begin(LLIR::member member) {
    data.insert(data.begin(), member);
}
void LLIR::pop_begin() {
    data.erase(data.begin());
};
size_t LLIR::size() {
    return data.size();
}
bool LLIR::empty() {
    return data.empty();
}
auto LLIR::makeIR() -> std::vector<LLIR::node_ret_t> {
    if (rules == nullptr) {
        treeToIr();
    } else {
        LLIR ir = rulesToIr(*rules);
        update(ir);
        data = ir.data;
        success_vars = ir.success_vars;
    }
    return success_vars;
}
void LLIR::optimizeIR() {
    raiseVarsTop(data, data);
}
const std::vector<LLIR::member>& LLIR::getData() const {
    return data;
}
std::vector<LLIR::member>& LLIR::getData() {
    return data;
}
const Tree* LLIR::getTree() const {
    return tree;
}
void LLIR::erase_begin() {
    data.erase(data.begin());
}
void LLIR::clear_thread() {
    groups.clear();
    elements.clear();
    variable_count = 0;
    isToken = false;
    insideLoop = false;
    addSpaceSkip = false;
    success_vars.clear();
    vars.clear();
}
void LLIR::proceed(const LLIR &ir) {
    variable_count = ir.variable_count;
    isToken = ir.isToken;
    tokensOnly = ir.tokensOnly;
    insideLoop = ir.insideLoop;
    addSpaceSkip = ir.addSpaceSkip;
    fullname = ir.fullname;
    vars = ir.vars;
    isFirst = ir.isFirst;
}
void LLIR::update(LLIR &ir) {
    variable_count = ir.variable_count;
    insideLoop = ir.insideLoop;
    addSpaceSkip = ir.addSpaceSkip;
    vars.insert(vars.end(), ir.vars.begin(), ir.vars.end());
    elements.insert(elements.end(), ir.elements.begin(), ir.elements.end());
    groups.insert(groups.end(), ir.groups.begin(), ir.groups.end());
}
void LLIR::setIsToken(bool isToken) {
    this->isToken = isToken;
}
LLIR::variable createEmptyVariable(std::string name) {
    LLIR::variable var {
        name,
        {LLIR::var_types::UNDEFINED},
        LLIR::var_assign_values::NONE,
    };
    return var;
}
std::string LLIR::generateVariableName() {
    return std::string("_") + std::to_string(variable_count++);
}
std::string LLIR::getErrorName(const TreeAPI::RuleMember &rule) {
    if (rule.isGroup()) {
        return "";
    }
    if (rule.isCsequence()) {
        std::string message;
        const auto &csequence = rule.getCsequence();
        
        // Add "not " if negative
        if (csequence.negative) {
            message = "not ";
        }
        
        std::vector<std::string> parts;
        
        // Process characters
        for (const auto &character : csequence.characters) {
            parts.push_back(std::string(1, character));
        }
        
        // Process diapasons
        for (const auto &diapason : csequence.diapasons) {
            parts.push_back(diapason.first + "-" + diapason.second);
        }
        
        // Process escaped sequences
        for (const auto &escaped : csequence.escaped) {
            parts.push_back("\\" + escaped);
        }
        
        // Join parts with commas, but "or" only between the last two items
        if (parts.size() > 1) {
            for (size_t i = 0; i < parts.size(); ++i) {
                if (i == parts.size() - 2) {
                    message += parts[i] + " or ";
                } else if (i < parts.size() - 1) {
                    message += parts[i] + ", ";
                } else {
                    message += parts[i];
                }
            }
        } else {
            message += parts.empty() ? "" : parts[0];  // Handle empty or single element case
        }
        return message;
    }
    if (rule.isString()) {
        return '"' + rule.getString().value + '"';
    }
    if (rule.isHex())
        return "0x" + rule.getHex().hex_chars;
    if (rule.isBin())
        return "0b" + rule.getBin().bin_chars;
    if (rule.isName()) {
        const auto &name = rule.getName();
        if (name.isAutoGenerated) {
            const auto r = tree->getRawAst().getTreeMap()[name.name];
            return getErrorName(r.members[0]);
        }
        return name.name.back();
    }
    if (rule.isEscaped()) {
        return "\\" + rule.getEscaped();
    }
    if (rule.isAny()) {
        return "symbol";
    }
    if (rule.isOp()) {
        std::string res;
        const auto &op = rule.getOp();
        for (const auto &option : op) {
            res += getErrorName(option);
            if (&option != op.back())
                res += " or ";
        }
        return res;
    }
    throw Error("Undefined rule member");
}
void processExitStatements(std::vector<LLIR::member> &values) {
    for (auto &el : values) {
        if (el.type == LLIR::types::IF || el.type == LLIR::types::WHILE || el.type == LLIR::types::DOWHILE) {
            auto &condition = std::any_cast<LLIR::condition&>(el.value); // Avoid unnecessary copies

            // Process the block and else block of the condition recursively
            processExitStatements(condition.block);
            processExitStatements(condition.else_block);

            // Ensure that any EXIT statements within the blocks are replaced with BREAK_LOOP
            for (auto &unit : condition.block) {
                if (unit.type == LLIR::types::EXIT) {
                    unit.type = LLIR::types::BREAK_LOOP; // Replacing EXIT with BREAK_LOOP
                } else if (unit.type == LLIR::types::IF || unit.type == LLIR::types::WHILE || unit.type == LLIR::types::DOWHILE) {
                    auto &cond = std::any_cast<LLIR::condition&>(unit.value);

                    processExitStatements(cond.block); // Recursive call on nested blocks
                    processExitStatements(cond.else_block); // Recursive call on else blocks
                }
            }
        }
    }
}


LLIR::variable LLIR::createSuccessVariable() {
    LLIR::variable var = createEmptyVariable("success" + generateVariableName());
    var.type = {LLIR::var_types::BOOLEAN};
    var.value = {LLIR::var_assign_values::_FALSE};
    return var;
}

void LLIR::addPostLoopCheck(const TreeAPI::RuleMember &rule, const LLIR::variable &var, bool addError) {
    std::vector<LLIR::member> block = {{ LLIR::types::EXIT }};
    if (addError && !isFirst) {
        block.insert(block.begin(), { LLIR::types::ERR, getErrorName(rule)});
    }
    LLIR::condition check_cond = {
        { 
            {LLIR::condition_types::NOT}, 
            { LLIR::condition_types::VARIABLE, var },
        },
        block
    };
    push({LLIR::types::IF, check_cond});
}
void LLIR::handle_plus_qualifier(const TreeAPI::RuleMember &rule, LLIR::condition loop, bool addError) {
    auto var = createSuccessVariable();
    loop.block.push_back({LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {var.name, LLIR::var_assign_types::ASSIGN, LLIR::var_assign_values::_TRUE}});
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::WHILE, loop});
    addPostLoopCheck(rule, var, addError);
}
void LLIR::replaceToPrevChar(std::vector<LLIR::member> &elements, int i) {
    for (; i < elements.size(); i++) {
        auto &el = elements[i];
        if (el.type == LLIR::types::IF || el.type == LLIR::types::WHILE || el.type == LLIR::types::DOWHILE) {
            // replace CURRENT_CHARACTER to PREV_CHARACTER
            auto val = std::any_cast<LLIR::condition>(el.value);
            for (auto &expr : val.expression) {
                if (expr.id == LLIR::condition_types::STRNCMP) {
                    expr.id = LLIR::condition_types::STRNCMP_PREV;
                }

            }
            replaceToPrevChar(val.block, 0);
            if (el.type == LLIR::types::IF)
                replaceToPrevChar(val.else_block, 0);
            elements[i].value = val;
        }
    }
}
std::vector<LLIR::member> LLIR::createDefaultBlock(const LLIR::variable &var, const LLIR::variable &svar) {
    return {
        {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {var.name, LLIR::var_assign_types::ADD, LLIR::var_assign_values::CURRENT_POS_SEQUENCE}},
        {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {svar.name, LLIR::var_assign_types::ASSIGN, LLIR::var_assign_values::_TRUE}},
        {LLIR::types::INCREASE_POS_COUNTER}
    };
}
std::vector<LLIR::member> LLIR::createDefaultBlock(const LLIR::variable &svar) {
    return {
        {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {svar.name, LLIR::var_assign_types::ASSIGN, LLIR::var_assign_values::_TRUE}},
        {LLIR::types::INCREASE_POS_COUNTER}
    };
}
std::vector<LLIR::member> LLIR::createDefaultBlock() {
    return {
        {LLIR::types::INCREASE_POS_COUNTER}
    };
}
char getEscapedChar(char in) {
    switch (in)
    {
    case 'n': return '\n';   // Newline
    case 'r': return '\r';   // Carriage return
    case 't': return '\t';   // Horizontal tab
    case 'a': return '\a';   // Bell (alert)
    case 'b': return '\b';   // Backspace
    case 'f': return '\f';   // Form feed (new page)
    case 'v': return '\v';   // Vertical tab
    case '\\': return '\\';  // Backslash
    case '\'': return '\'';  // Single quote
    case '"': return '"';    // Double quote
    default: return in;      // Return the character itself if not an escape sequence
    }
}

LLIR::member LLIR::createDefaultCall(std::vector<LLIR::member> &block, LLIR::variable var, const std::string &name, std::vector<LLIR::expr> &expr) {
    auto function_call = LLIR::function_call {
        name,
        {{LLIR::var_assign_values::TOKEN_SEQUENCE}},
        
    };
    auto var_assign = LLIR::variable_assign {
        var.name, 
        LLIR::var_assign_types::ASSIGN,
        { LLIR::var_assign_values::FUNCTION_CALL, function_call }
    };
    var.property_access = {"status"};
    expr = {
        {LLIR::condition_types::VARIABLE, var}
    };
    return {LLIR::types::ASSIGN_VARIABLE, var_assign};
}
LLIR::variable LLIR::add_shadow_variable(std::vector<LLIR::member> &block, const LLIR::variable &var) {
    LLIR::variable shadow_var = createEmptyVariable("shadow" + generateVariableName());
    auto type = var.type;
    if (type.type == LLIR::var_types::Rule_result)
        type.type = LLIR::var_types::Rule;
    else if (type.type == LLIR::var_types::Token_result)
        type.type = LLIR::var_types::Token;
    shadow_var.type = {LLIR::var_types::ARRAY, {type}};
    push({LLIR::types::VARIABLE, shadow_var});
    block.push_back({LLIR::types::METHOD_CALL, LLIR::method_call { shadow_var.name, {LLIR::function_call {"push", {LLIR::assign {LLIR::var_assign_values::VARIABLE, var}}}}}});
    return shadow_var;
}
LLIR::variable LLIR::pushBasedOnQualifier(const TreeAPI::RuleMember &rule, std::vector<LLIR::expr> &expr, std::vector<LLIR::member> &block, const LLIR::variable &var, const LLIR::variable &svar, char quantifier, bool add_shadow_var) {
    //block.push_back({IR::types::ASSIGN_VARIABLE, IR::variable_assign {svar.name, IR::var_assign_types::ASSIGN, IR::var_assign_values::_TRUE}});
    LLIR::variable shadow_variable;
    if ((insideLoop || quantifier == '+' || quantifier == '*') && add_shadow_var) {
       shadow_variable = add_shadow_variable(block, var);
       add_shadow_var = false;
    }
    switch (quantifier) {
        case '+':
            if (add_shadow_var)
                shadow_variable = add_shadow_variable(block, var);
            handle_plus_qualifier(rule, {expr, block});
            break;
        case '*': {
            if (add_shadow_var)
                shadow_variable = add_shadow_variable(block, var);
            push({LLIR::types::WHILE, LLIR::condition{expr, block}});
            //member.push(pop);
            break;
        }
        case '?':
            push({LLIR::types::IF, LLIR::condition{expr, block}});
            break;
        default:
            // add the negative into condition
            expr.insert(expr.begin(), {LLIR::condition_types::NOT});
            expr.insert(expr.begin() + 1, {LLIR::condition_types::GROUP_OPEN});
            expr.push_back({LLIR::condition_types::GROUP_CLOSE});
            // add exit statement
            std::vector<LLIR::member> blk = {{LLIR::types::EXIT}};
            if (!isFirst) {
                blk.insert(blk.begin(), {LLIR::types::ERR, getErrorName(rule)});
            }
            push({LLIR::types::IF, LLIR::condition{expr, blk}});
            add(block);
            break;
    }
    return shadow_variable;
}
// function to push based on qualifier for Rule_other
LLIR::variable LLIR::pushBasedOnQualifier_Rule_other(const TreeAPI::RuleMember &rule, std::vector<LLIR::expr> &expr, std::vector<LLIR::member> &block, const LLIR::variable &var, const LLIR::variable &svar, const LLIR::member &call, char quantifier, bool add_shadow_var) {
    //block.push_back({IR::types::ASSIGN_VARIABLE, IR::variable_assign {svar.name, IR::var_assign_types::ASSIGN, IR::var_assign_values::_TRUE}});
    LLIR::variable shadow_variable;
    if (insideLoop|| quantifier == '+' || quantifier == '*') {
        shadow_variable = add_shadow_variable(block, var);
        add_shadow_var = false;
    }
    switch (quantifier) {
        case '+':
            if (add_shadow_var)
                shadow_variable = add_shadow_variable(block, var);
            block.push_back(call);
            handle_plus_qualifier(rule, LLIR::condition {expr, block});
            break;
        case '*': {
            if (add_shadow_var)
                shadow_variable = add_shadow_variable(block, var);
            block.push_back(call);
            push({LLIR::types::WHILE, LLIR::condition{expr, block}});
            break;
        }
        case '?':
            push({LLIR::types::IF, LLIR::condition{expr, block}});
            break;
        default:
        {
            // add the negative into condition
            expr.insert(expr.begin(), {LLIR::condition_types::NOT});
            expr.insert(expr.begin() + 1, {LLIR::condition_types::GROUP_OPEN});
            expr.push_back({LLIR::condition_types::GROUP_CLOSE});
            // add exit statement
            std::vector<LLIR::member> blk = {{LLIR::types::EXIT}};
            if (!isFirst) {
                blk.insert(blk.begin(), {LLIR::types::ERR, getErrorName(rule)});
            }
            push({LLIR::types::IF, LLIR::condition{expr, blk}});
            add(block);
            break;
        }
    }
    return shadow_variable;
}
LLIR::variable LLIR::affectIrByQuantifier(const TreeAPI::RuleMember &rule, const LLIR::variable &var, char quantifier) {
    LLIR::variable shadow_var;
    if ((insideLoop || quantifier == '*' || quantifier == '+') && (var.type.type != LLIR::var_types::UNDEFINED && var.type.type != LLIR::var_types::STRING)) {
        shadow_var = add_shadow_variable(data, var);
    }
    if (quantifier == '*' || quantifier == '+') {
        LLIR::condition loop = { { { LLIR::condition_types::NUMBER, (long long) 1 } }, {} };
        loop.block = data;
        data.clear();
        processExitStatements(loop.block);
        // raiseVarsTop(data, loop.block, true, false, false);
        // raiseVarsTop(data, loop.else_block, true, false, false);
        if (quantifier == '+') {
            handle_plus_qualifier(rule, loop);
        } else {
            push({LLIR::types::WHILE, loop});
        }
    } else if (quantifier == '?') {
        LLIR::condition loop = { { {LLIR::condition_types::NUMBER, (long long) 0} } };
        loop.block = data;
        data.clear();
        processExitStatements(loop.block);
        push({ LLIR::types::DOWHILE, loop });
    }
    return shadow_var;
}
LLIR::assign LLIR::TreeRvalueToIR(const TreeAPI::rvalue &value) {
    LLIR::assign newval;
    if (value.isString()) {
        newval.kind = LLIR::var_assign_values::STRING;
        newval.data = std::any_cast<std::string>(value.getString().value);
    } else if (value.isBoolean()) {
        newval.kind = LLIR::var_assign_values::BOOLEAN;
        newval.data = value.getBoolean().getBoolean() ? LLIR::var_assign_values::_TRUE : LLIR::var_assign_values::_FALSE;
    } else if (value.isNumber()) {
        newval.kind = LLIR::var_assign_values::NUMBER;
        newval.data = value.getNumber().getFull();
    } else if (value.isArray()) {
        newval.kind = LLIR::var_assign_values::ARRAY;
        LLIR::array arr;
        for (const auto el : value.getArray()) {
            arr.push_back(TreeRvalueToIR(el));
        }
        newval.data = arr;
    } else if (value.isObject()) {
        newval.kind = LLIR::var_assign_values::OBJECT;
        LLIR::object obj;
        for (const auto &[key, value] : value.getObject()) {
            obj[key] = TreeRvalueToIR(value);
        }
        newval.data = obj;
    } else throw Error("Undefined rvalue");
    return newval;
}
std::vector<std::vector<LLIR::expr>> LLIR::TreeFunctionBodyCallToIR(const TreeAPI::CllFunctionBodyCall &body) {
    std::vector<std::vector<LLIR::expr>> newExpr;
    for (const auto &expr : body.expr) {
        newExpr.push_back(TreeExprToIR(expr));
    }
    return newExpr;
}
LLIR::function_call LLIR::TreeFunctionToIR(const TreeAPI::CllFunctionCall &call) {
    LLIR::function_call newCall;
    newCall.name = call.name;
    newCall.params = TreeFunctionBodyCallToIR(call.body);
    return newCall;
}

LLIR::method_call LLIR::TreeMethodCallToIR(const TreeAPI::CllMethodCall &method) {
    LLIR::function_call newMethod;
    newMethod.name = method.name;
    newMethod.params = TreeFunctionToIR(method.body);
    return newCall;
    return method_call;
}
LLIR::var_type LLIR::deduceVarTypeByProd(const TreeAPI::RuleMember &mem) {
    LLIR::var_type type;
    if (mem.isGroup()) {
        for (auto i = 0; i < mem.getGroup().size(); i++) {
            if (deduceVarTypeByProd(mem.getGroup()[i]).type != LLIR::var_types::STRING)
                return {LLIR::var_types::UNDEFINED};
        }
        return {LLIR::var_types::STRING};
    }
    if (mem.isOp()) {
        LLIR::var_type type = {LLIR::var_types::UNDEFINED};
        
        for (auto el : mem.getOp()) {
            if (type.type == LLIR::var_types::UNDEFINED) {
                type = deduceVarTypeByProd(el);
            } else if (deduceVarTypeByProd(el).type != type.type) {
                return {LLIR::var_types::ANY};
            }
        }
        return type;
    }
    if (mem.isName()) {
        return corelib::text::isUpper(mem.getName().name.back()) ? LLIR::var_type {LLIR::var_types::Token} : LLIR::var_type {LLIR::var_types::Rule};
    }
    return {LLIR::var_types::STRING};
}
// possibly outdated
// LLIR::var_type LLIR::cllTreeCsupportTypeToIR(const Parser::Rule &rule) {
//     auto data = std::any_cast<obj_t>(rule.data);
//     bool is_unsigned = std::any_cast<bool>(corelib::map::get(data, "is_unsigned"));
//     auto val = std::any_cast<std::string>(corelib::map::get(data, "val"));
//     // cpuf::printf("3, type: %s\n", corelib::map::get(data, "template").type().name());
//     // auto templ = std::any_cast<Parser::Rule>(corelib::map::get(data, "template"));
//     // std::vector<Parser::Rule> templ_val;
//     // if (templ.data.has_value()) {
//     //     cpuf::printf("4\n");
//     //     templ_val = std::any_cast<std::vector<Parser::Rule>>(templ.data);
//     // }
//     LLIR::var_types result;
//     if (val == "char")
//         result = LLIR::var_types::CHAR;
//     else if (val == "short")
//         result = LLIR::var_types::SHORT;
//     else if (val == "int")
//         result = LLIR::var_types::INT;
//     else if (val == "long")
//         result = LLIR::var_types::LONG;
//     else if (val == "long long")
//         result = LLIR::var_types::LONGLONG;
    
//     if (is_unsigned)
//         result = static_cast<LLIR::var_types>(static_cast<int>(result) + 1); // result++
//     return { result };
//     throw Error("Undefined csupport type");
// }
LLIR::var_type LLIR::cllTreeTypeToIR(const TreeAPI::CllType &type) {
    if (type.type == "var")
        return {LLIR::var_types::ANY, {}};
    else if (type.type == "str")
        return {LLIR::var_types::STRING, {}};
    else if (type.type == "bool")
        return {LLIR::var_types::BOOLEAN, {}};
    else if (type.type == "num")
        return {LLIR::var_types::NUMBER, {}};
    else if (type.type == "arr") {
        LLIR::var_types tp = LLIR::var_types::ARRAY;
        LLIR::var_type _template = cllTreeTypeToIR(type.templ[0]);
        return {tp, {_template}};
    } else if (type.type == "obj") {        
        LLIR::var_types tp = LLIR::var_types::OBJECT;
        LLIR::var_type _template1 = cllTreeTypeToIR(type.templ[0]);
        LLIR::var_type _template2 = cllTreeTypeToIR(type.templ[1]);
        return {tp, {_template1, _template2}};
    }
    throw Error("Undefined type");
}
LLIR::var_assign_types LLIR::TreeOpToIR(const char op) {
    // all other is single character so can use switch
    switch (op) {
        case '+':
            return LLIR::var_assign_types::ADD;
        case '-':
            return LLIR::var_assign_types::SUBSTR;
        case '*':
            return LLIR::var_assign_types::MULTIPLY;
        case '/':
            return LLIR::var_assign_types::DIVIDE;
        case '%':
            return LLIR::var_assign_types::MODULO;
    }
    throw Error("Undefined operator");
}
LLIR::expr LLIR::TreeOpToExpr(const char op) {
    switch (op) {
        case '+':
            return {LLIR::condition_types::ADD};
        case '-':
            return {LLIR::condition_types::SUBSTR};
        case '*':
            return {LLIR::condition_types::MULTIPLY};
        case '/':
            return {LLIR::condition_types::DIVIDE};
        case '%':
            return {LLIR::condition_types::MODULO};
    }
    throw Error("Undefined operator");
}
LLIR::expr LLIR::TreeCompareOpToExpr(const TreeAPI::CllCompareOp &op) {
    if (op.op == "==")
        return {LLIR::condition_types::EQUAL};
    if (op.op == "!=")
        return {LLIR::condition_types::NOT_EQUAL};
    if (op.op == ">")
        return {LLIR::condition_types::HIGHER};
    if (op.op == "<")
        return {LLIR::condition_types::LOWER};
    if (op.op == ">=")
        return {LLIR::condition_types::HIGHER_OR_EQUAL};
    if (op.op == "<=")
        return {LLIR::condition_types::LOWER_OR_EQUAL};
    throw Error("undefined compare operator");
}
LLIR::expr LLIR::TreeLogicalOpToIR(const TreeAPI::CllLogicalOp &lop) {
    if (lop.isAnd)
        return {LLIR::condition_types::AND};
    return {LLIR::condition_types::OR};
}
LLIR::var_assign_types LLIR::TreeAssignmentOpToIR(const char op) {
    auto data = std::any_cast<Parser::Rule>(rule.data);
    if (!data.data.has_value())
        return LLIR::var_assign_types::ASSIGN;
    auto v = TreeOpToIR(data);
    v = static_cast<LLIR::var_assign_types>(static_cast<int>(v) + static_cast<int>(LLIR::var_assign_types::ASSIGN));
    return v;
}
std::vector<LLIR::expr> LLIR::TreeExprGroupToIR(const TreeAPI::CllExprGroup &group) {
    std::vector<LLIR::expr> expr;
    auto expression = TreeExprToIR(group.expr);
    expr.push_back({LLIR::condition_types::GROUP_OPEN});
    expr.insert(expr.end(), expression.begin(), expression.end());
    expr.push_back({LLIR::condition_types::GROUP_CLOSE});
    return expr;
}
std::vector<LLIR::expr> LLIR::TreeExprValueToIR(const TreeAPI::CllExprValue &value) {
    std::vector<LLIR::expr> expr(1);
    if (value.isGroup()) {
        expr = TreeExprGroupToIR(value.getGroup());
    } else if (value.isMethodCall()) {
        expr.push_back({LLIR::condition_types::METHOD_CALL, TreeMethodCallToIR(value.getMethodCall())});
    } else if (value.isFunctionCall()) {
        expr.push_back({LLIR::condition_types::FUNCTION_CALL, TreeFunctionToIR(value.getFunctionCall())});
    } else if (value.isVariable()) {
        // todo
       // expr.push_back({LLIR::condition_types::VARIABLE, })
    } else if (value.isrvalue()) {
        expr.push_back({LLIR::condition_types::ANY_DATA, TreeRvalueToIR(value.getrvalue())});
    } else throw Error("Undefined expression");
    return expr;
}
std::vector<LLIR::expr> LLIR::TreeExprAdditionToIR(const TreeAPI::CllExprAddition &addition) {
    // if (rule.name == Parser::Rules::cll_function_call)
    std::vector<LLIR::expr> cond;
    auto res = TreeExprValueToIR(addition.value);
    cond.insert(cond.end(), res.begin(), res.end());
    for (int i = 0; i < addition.rights.size(); i++) {
        cond.push_back(TreeOpToExpr(addition.rights[i].first));
        res = TreeExprValueToIR(addition.rights[i].second);
        cond.insert(cond.end(), res.begin(), res.end());
    }
    return cond;
}
std::vector<LLIR::expr> LLIR::TreeExprCompareToIR(const TreeAPI::CllExprCompare &compare) {
    std::vector<LLIR::expr> cond;
    auto res = TreeExprAdditionToIR(compare.value);
    cond.insert(cond.end(), res.begin(), res.end());
    for (int i = 0; i < compare.rights.size(); i++) {
        cond.push_back(TreeCompareOpToExpr(compare.rights[i].first));
        res = TreeExprAdditionToIR(compare.rights[i].second);
        cond.insert(cond.end(), res.begin(), res.end());
    }
    return cond;
}
std::vector<LLIR::expr> LLIR::TreeExprLogicalToIR(const TreeAPI::CllExprLogical &logical) {
    std::vector<LLIR::expr> cond;
    auto res = TreeExprCompareToIR(logical.value);
    cond.insert(cond.end(), res.begin(), res.end());
    for (int i = 0; i < logical.rights.size(); i++) {
        cond.push_back(TreeCompareOpToExpr(logical.rights[i].first));
        res = TreeExprCompareToIR(logical.rights[i].second);
        cond.insert(cond.end(), res.begin(), res.end());
    }
}
std::vector<LLIR::expr> LLIR::TreeExprToIR(const TreeAPI::CllExpr &expr) {
    return TreeExprLogicalToIR(expr.value);
}

// Function to compare two `templ` arrays
bool LLIR::compare_templ(const std::vector<LLIR::var_type>& templ1, const std::vector<LLIR::var_type>& templ2) {
    if (templ1.size() != templ2.size()) return false;

    for (size_t i = 0; i < templ1.size(); ++i) {
        if (templ1[i].type != templ2[i].type) return false;
        if (!compare_templ(templ1[i].templ, templ2[i].templ)) return false;  // Recursively compare nested `templ`
    }
    return true;
}
bool LLIR::compare_types(std::list<LLIR::var_type> types) {
    if (types.empty())
        return false;
    LLIR::var_type first_type = types.front();
    bool is_same = true;
    bool begin = true;
    for (auto el : types) {
        if (begin) {
            begin = false;
            continue;
        }
        if (first_type.type != el.type || compare_templ(first_type.templ, el.templ)) {
            is_same = false;
            break;
        }
    }
    return is_same;
}
LLIR::var_type LLIR::deduceTypeFromRvalue(const TreeAPI::rvalue &value) {
    LLIR::var_type type = {LLIR::var_types::UNDEFINED};
    if (value.isString())
        type.type = LLIR::var_types::STRING;
    else if (value.isBoolean()) 
        type.type = LLIR::var_types::BOOLEAN;
    else if (value.isNumber())
        type.type = LLIR::var_types::NUMBER;
    else if (value.isArray()) {
        LLIR::var_type types;
        for (const auto &el : value.getArray()) {
            if (types.type == LLIR::var_types::UNDEFINED) {
                types.type = deduceTypeFromRvalue(el);
            } else {
                auto newType = deduceTypeFromRvalue(el);
                if (newType.type != types.type || !compare_templ(newType.templ, types.templ)) {
                    type.type = LLIR::var_types::ANY;
                    break;
                }
            }
        }
        if (types.type != LLIR::var_types::ANY) {
            type.templ = {types};
            type.type = LLIR::var_types::ARRAY;
        }
    } else if (value.isObject()) {
        // todo: add handle key of different types (int or string)
        LLIR::var_type types;
        for (const auto &[key, value] : value.getObject()) {
            if (types.type == LLIR::var_types::UNDEFINED) {
                types.type = deduceTypeFromRvalue(value);
            } else {
                auto newType = deduceTypeFromRvalue(value);
                if (newType.type != types.type || !compare_templ(newType.templ, types.templ)) {
                    type.type = LLIR::var_types::ANY;
                    break;
                }
            }
        }
        if (types.type != LLIR::var_types::ANY) {
            type.templ = {types};
            type.type = LLIR::var_types::OBJECT;
        }
    } else {
        throw Error("Undefined rule");
    }
    return type;
}
LLIR::var_types LLIR::deduceTypeFromTerm(TreeAPI::CllExprTerm &term) {
    // type is explicitly based on value. We may not check others in addition
    return deduceTypeFromRvalue(term.value);
}
LLIR::var_types LLIR::deduceTypeFromAddition(TreeAPI::CllExprAddition &addition) {
    // same as with term
    return deduceTypeFromTerm(addition.value);
}
LLIR::var_types LLIR::deduceTypeFromCompare(const TreeAPI::CllExprCompare &compare) {
    // if any comparasion exists it is boolean
    if (compare.rights.size() != 0)
        return {LLIR::var_types::BOOLEAN};
    return deduceTypeFromAddition(compare.value);
}
LLIR::var_type LLIR::deduceTypeFromLogical(const TreeAPI::CllExprLogical &logical) {
    // if &&/|| exists it is always boolean
    if (logical.rights.size() != 0)
        return {LLIR::var_types::BOOLEAN};
    return deduceTypeFromCompare(logical.value);
}
LLIR::var_type LLIR::deduceTypeFromExpr(const TreeAPI::CllExpr &expr) {
    return deduceTypeFromLogical(expr.value);
}
LLIR::node_ret_t LLIR::processGroup(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("group\n");
    auto data = std::any_cast<obj_t>(rule.data);
    auto variable = corelib::map::get(data, "variable").has_value() ? std::any_cast<Parser::Rule>(corelib::map::get(data, "variable")) : Parser::Rule();
    auto val = std::any_cast<std::vector<Parser::Rule>>(corelib::map::get(data, "val"));
    // create variable with name of "var" or with auto-generated one
    auto var = createEmptyVariable(generateVariableName());
    auto uvar = (!variable.empty() && variable.name == Parser::Rules::id) ? createEmptyVariable(std::any_cast<std::string>(variable.data)) : createEmptyVariable("");
    auto svar = createSuccessVariable();
    auto prev_insideLoop = insideLoop;
    if (quantifier == '*' || quantifier == '+')
        insideLoop = true;
    bool addSpaceSkipFirst;
    auto values = rulesToIr(val, addSpaceSkipFirst);
    // remove previous space skip it there was \s0
    if (data.size() > 0 && !addSpaceSkipFirst) {
        // remove previous skip of spaces if it does exists
        for (auto rit = this->data.rbegin(); rit != this->data.rend(); rit++) {
            if (rit->type == LLIR::types::SKIP_SPACES) {
                this->data.erase(rit.base());
                break;
            }
        }
    }
    groups.push_back({var, elements.size(), elements.size() + values.elements.size() - 1});
    var.type = {deduceVarTypeByValue(rule)};
    if ((quantifier == '*' || quantifier == '+') && var.type.type != LLIR::var_types::UNDEFINED && var.type.type != LLIR::var_types::STRING) {
        var.type.templ = {{var.type.type}};
        var.type.type = LLIR::var_types::ARRAY;
    }
    std::vector<LLIR::member> var_members;
    auto switch_type = var.type.type == LLIR::var_types::ARRAY ? var.type.templ[0].type : var.type.type;
    switch (switch_type) {
        case LLIR::var_types::STRING:
            // it is a string so add all values
            for (auto node : values.success_vars) {
                if (node.var.name == "" && node.svar.name == "")
                    continue;
                var_members.push_back(
                    {
                        LLIR::types::ASSIGN_VARIABLE, 
                        LLIR::variable_assign {var.name, LLIR::var_assign_types::ADD, LLIR::assign { LLIR::var_assign_values::VARIABLE, node.var }}
                    }
                );
            }
            break;
        case LLIR::var_types::Token:
        case LLIR::var_types::Rule:
            // it is token so perform a single assign
            var_members.push_back( LLIR::member
                {
                    LLIR::types::ASSIGN_VARIABLE,
                    LLIR::variable_assign {var.name, LLIR::var_assign_types::ASSIGN, LLIR::assign { LLIR::var_assign_values::VARIABLE,  values.success_vars[0].var }}
                }
            );
            var.type = values.success_vars[0].var.type;
            if (var.type.type == LLIR::var_types::Rule_result)
                var.type.type = LLIR::var_types::Rule;
            else if (var.type.type == LLIR::var_types::Token_result)
                var.type.type = LLIR::var_types::Token;
            break;
    }
    std::string begin_var_name = "begin" + generateVariableName();
    std::vector<LLIR::expr> svar_expr = {};
    std::vector<std::string> used_vars;
    //cpuf::printf("success_vars.size(): %d\n", success_vars.size());
    if (!values.success_vars.empty()) {
        bool first = true;
        for (auto el : values.success_vars) {
            if (el.qualifier == '*' || el.qualifier == '?' || el.svar.name.empty())
                continue;
            if (!first)
                svar_expr.push_back({LLIR::condition_types::AND});
            used_vars.push_back(el.svar.name);
            svar_expr.push_back({LLIR::condition_types::VARIABLE, el.svar});
            first = false;
        }
    }
    // for (int i = 0; i < node_ret.size(); i++) {
    //     if (i != 0)
    //         svar_expr.push_back({IR::condition_types::AND});
    //     svar_expr.push_back({IR::condition_types::VARIABLE, node_ret[i].svar});
    // }

    if (!values.data.empty() && values.data.back().type == LLIR::types::SKIP_SPACES) {
        values.pop();
    }
    values.add(var_members);
    auto shadow_var = values.affectIrByQuantifier(rule, var, quantifier);
    for (auto svar : used_vars) {
        raiseVarsTop(values.data, values.data, svar, true, false, true);
    }
    std::vector<LLIR::member> svar_cond;
    if (svar_expr.empty()) {
        svar_cond = {
            {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {svar.name, LLIR::var_assign_types::ASSIGN, LLIR::var_assign_values::_TRUE}},
            !uvar.name.empty() ? 
                LLIR::member {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {svar.name, LLIR::var_assign_types::ASSIGN, LLIR::var_assign_values::_TRUE}}
            :
                LLIR::member {LLIR::types::EMPTY},
            {LLIR::types::POP_POS_COUNTER}
        };
    } else {
        svar_cond = {{
            LLIR::types::IF,
            LLIR::condition {
                svar_expr,
                {
                    {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {svar.name, LLIR::var_assign_types::ASSIGN, LLIR::var_assign_values::_TRUE}},
                    !uvar.name.empty() ? 
                        LLIR::member {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {uvar.name, LLIR::var_assign_types::ASSIGN, {LLIR::var_assign_values::VARIABLE, shadow_var.name.empty() ? var : shadow_var}}}
                    :
                        LLIR::member {LLIR::types::EMPTY},
                    {LLIR::types::POP_POS_COUNTER}
                }
            }
        }};
    }
    if (!shadow_var.name.empty()) {
        groups.back().var = shadow_var;
    }
    if (var.type.type != LLIR::var_types::UNDEFINED) {
        push({LLIR::types::VARIABLE, var});
    }
    if (!uvar.name.empty()) {
        uvar.type = shadow_var.name.empty() ? var.type : shadow_var.type;
        push({LLIR::types::VARIABLE, uvar});
        vars.push_back(uvar);
        groups.back().var = uvar;
    }
    update(values);
    insideLoop = prev_insideLoop;
    push({LLIR::types::VARIABLE, svar});
    if (fullname.back() == "STRING") {
        cpuf::printf("svar.name: %s\n", svar.name);
    }
    push({LLIR::types::PUSH_POS_COUNTER, begin_var_name});
    if (!variable.empty() && variable.name == Parser::Rules::method_call) 
    {
        LLIR::method_call method_call = TreeMethodCallToIR(std::any_cast<Parser::Rule>(variable.data));
        add(values);
        push({LLIR::types::METHOD_CALL, method_call});
    } else {
        add(values);
    }
    add(svar_cond);
    if (var.type.type == LLIR::var_types::UNDEFINED)
        return LLIR::node_ret_t {svar, {}, {}, quantifier};
    return LLIR::node_ret_t {svar, var, shadow_var, quantifier};
}
LLIR::node_ret_t LLIR::processRuleCsequence(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("csequence\n");
    auto data = std::any_cast<obj_t>(rule.data);
    auto _not = std::any_cast<bool>(corelib::map::get(data, "not"));
    auto values = std::any_cast<std::vector<Parser::Rule>>(corelib::map::get(data, "val"));

    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    var.type = {LLIR::var_types::STRING};
    bool is_negative = false;
    std::vector<LLIR::expr> expr;

    if (_not) {
        expr = {
            {LLIR::condition_types::NOT},
            {LLIR::condition_types::GROUP_OPEN}
        };
        is_negative = true;
    }

    bool first = true;
    for (auto &value : values) {
        if (!first)
            expr.push_back({LLIR::condition_types::OR});

        switch (value.name) {
            case Parser::Rules::Rule_csequence_diapason: {
                auto range_data = std::any_cast<std::vector<Parser::Rule>>(value.data);
                auto first = std::any_cast<std::string>(range_data[0].data)[0];
                auto second = std::any_cast<std::string>(range_data[1].data)[0];
                expr.insert(expr.end(), {
                    {LLIR::condition_types::GROUP_OPEN},
                    {LLIR::condition_types::CURRENT_CHARACTER},
                    {LLIR::condition_types::HIGHER_OR_EQUAL},
                    {LLIR::condition_types::CHARACTER, first},
                    {LLIR::condition_types::AND},
                    {LLIR::condition_types::CURRENT_CHARACTER},
                    {LLIR::condition_types::LOWER_OR_EQUAL},
                    {LLIR::condition_types::CHARACTER, second},
                    {LLIR::condition_types::GROUP_CLOSE}
                });
                break;
            }
            case Parser::Rules::Rule_csequence_escape:
                expr.insert(expr.end(), {
                    {LLIR::condition_types::CURRENT_CHARACTER},
                    {LLIR::condition_types::EQUAL},
                    {LLIR::condition_types::CHARACTER, getEscapedChar(std::any_cast<std::string>(value.data)[0])}
                });
                break;
            case Parser::Rules::Rule_csequence_symbol:
                expr.insert(expr.end(), {
                    {LLIR::condition_types::CURRENT_CHARACTER},
                    {LLIR::condition_types::EQUAL},
                    {LLIR::condition_types::CHARACTER, (char) std::any_cast<std::string>(value.data)[0]}
                });
                break;
            default:
                throw Error("undefined csequence subrule");
        }
        first = false;
    }
    if (is_negative) {
        if (quantifier == '+' || quantifier == '*')
            expr.insert(expr.end(), {
                {LLIR::condition_types::AND}, {LLIR::condition_types::CURRENT_CHARACTER}, {LLIR::condition_types::NOT_EQUAL}, {LLIR::condition_types::CHARACTER, '\0'}, 
            });
        expr.push_back({LLIR::condition_types::GROUP_CLOSE});
    }
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    std::vector<LLIR::member> block = createDefaultBlock(var, svar);
    pushBasedOnQualifier(rule, expr, block, var, svar, quantifier, false);
    return {svar, var, {}, quantifier};
}
LLIR::node_ret_t LLIR::processString(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("string, data: %s\n", std::any_cast<std::string>(rule.data));
    auto data = std::any_cast<std::string>(rule.data);
    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    var.type = {LLIR::var_types::STRING};
    std::vector<LLIR::expr> expr;
    if (data.size() == 0)
        return {};
    if (data.size() == 1) {
        // micro optimization - compare as single character for single character strings
        expr = {
            {LLIR::condition_types::CURRENT_CHARACTER},
            {LLIR::condition_types::EQUAL},
            {LLIR::condition_types::CHARACTER, data[0]}
        };
    } else {
        expr = {
            {LLIR::condition_types::STRNCMP, LLIR::strncmp{1, data}}
        };
    }

    std::vector<LLIR::member> block = createDefaultBlock(var, svar);
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    pushBasedOnQualifier(rule, expr, block, var, svar, quantifier, false);
    return {svar, var, {}, quantifier};
}
LLIR::node_ret_t LLIR::process_Rule_hex(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("hex\n");
    auto data = std::any_cast<std::string>(rule.data);
    std::vector<LLIR::expr> expr = {};
    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    var.type = {LLIR::var_types::STRING};
    std::vector<LLIR::member> block = createDefaultBlock(var, svar);
    bool is_first = true, is_negative = false;
    if (quantifier == '\0') {
        expr.push_back({LLIR::condition_types::NOT});
        expr.push_back({LLIR::condition_types::GROUP_OPEN});
        is_negative = true;
    }
    if (data.size() % 2 != 0)
        data.insert(data.begin(), '0');
    for (int i = 0; i < data.size(); i += 2) {
        std::string hex(data.data() + i, 2);
        if (!is_first)
            expr.push_back({LLIR::condition_types::AND});
        is_first = false;
        expr.push_back({LLIR::condition_types::CURRENT_CHARACTER});
        expr.push_back({LLIR::condition_types::EQUAL});
        expr.push_back({LLIR::condition_types::HEX, hex});
    }
    if (is_negative) {
        expr.push_back({LLIR::condition_types::GROUP_CLOSE});
    }
    //cpuf::printf("hex_open\n");
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    auto shadow_var = pushBasedOnQualifier(rule, expr, block, var, svar, quantifier, false);
    return {svar, var, shadow_var, quantifier};
}
LLIR::node_ret_t LLIR::process_Rule_bin(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("hex\n");
    auto data = std::any_cast<std::string>(rule.data);
    std::vector<LLIR::expr> expr = {};
    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    std::vector<LLIR::member> block = {
        {LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {var.name, LLIR::var_assign_types::ADD, LLIR::var_assign_values::CURRENT_POS_SEQUENCE}},
        {LLIR::types::INCREASE_POS_COUNTER},
    };
    bool is_first = true, is_negative = false;
    if (quantifier == '\0') {
        expr.push_back({LLIR::condition_types::NOT});
        expr.push_back({LLIR::condition_types::GROUP_OPEN});
        is_negative = true;
    }
    while (data.size() % 8 != 0)
        data.insert(data.begin(), '0');
    for (int i = 0; i < data.size(); i += 8) {
        std::string bin(data.data() + i, 8);
        auto as_hex = hex::from_binary(bin);
        as_hex.erase(as_hex.begin(), as_hex.begin() + 2);
        if (!is_first)
            expr.push_back({LLIR::condition_types::AND});
        is_first = false;
        expr.push_back({LLIR::condition_types::CURRENT_CHARACTER});
        expr.push_back({LLIR::condition_types::EQUAL});
        expr.push_back({LLIR::condition_types::HEX, as_hex});
    }
    if (is_negative) {
        expr.push_back({LLIR::condition_types::GROUP_CLOSE});
    }
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    auto shadow_var = pushBasedOnQualifier(rule, expr, block, var, svar, quantifier, false);
    return {svar, var, shadow_var, quantifier};
}
LLIR::node_ret_t LLIR::processAccessor(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("accessor\n");
    auto data = std::any_cast<obj_t>(rule.data);
    auto first = std::any_cast<Parser::Rule>(corelib::map::get(data, "first"));
    auto second = std::any_cast<std::vector<Parser::Rule>>(corelib::map::get(data, "second"));
    auto svar = createSuccessVariable();
    auto var = createEmptyVariable(generateVariableName());
    auto shadow_var = createEmptyVariable("shadow" + generateVariableName());
    second.insert(second.begin(), first);
    for (auto &el : second) {
        el = std::any_cast<Parser::Rule>(el.data);
    }
    auto mem = LLIR::member {
        LLIR::types::ACCESSOR,
        LLIR::accessor { second, quantifier }
    };
    if (insideLoop)
        push({LLIR::types::INSIDE_LOOP});
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, shadow_var});
    push({LLIR::types::VARIABLE, svar});
    push(mem);
    return {svar, var, shadow_var};
}
LLIR::node_ret_t LLIR::process_Rule_other(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("Rule_other");
    auto name = std::any_cast<rule_other>(rule.data);
    auto name_str = corelib::text::join(name.fullname, "_");
    //cpuf::printf(", name: %s\n", name_str);

    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    LLIR::variable shadow_var;
    bool isCallingToken = corelib::text::isUpper(name.name);
    if (!isToken && isCallingToken) {
        var.type.type = LLIR::var_types::Token;
    } else {
        var.type = isCallingToken ? LLIR::var_type {LLIR::var_types::Token_result} : LLIR::var_type {LLIR::var_types::Rule_result};
    }
    auto block = createDefaultBlock(var, svar);
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    if (isToken) {
        // if (!isCallingToken)
        //     throw Error("Cannot call rule from token");
        // remove variable assignemnt
        block.back().type = LLIR::types::INCREASE_POS_COUNTER_BY_TOKEN_LENGTH;
        block.back().value = var.name;
        var.property_access = {"node"};
        block.erase(block.begin());
        std::vector<LLIR::expr> expr;
        auto call = createDefaultCall(block, var, name_str, expr);
        push(call);
        shadow_var = pushBasedOnQualifier_Rule_other(rule, expr, block, var, svar, call, quantifier);

    } else {
        if (isCallingToken) {
            block[0] = {
                LLIR::types::ASSIGN_VARIABLE, 
                LLIR::variable_assign {
                    var.name,
                    LLIR::var_assign_types::ASSIGN,
                    LLIR::var_assign_values::CURRENT_TOKEN
                }
            };
            std::vector<LLIR::expr> expr = {
                {LLIR::condition_types::CURRENT_TOKEN, LLIR::current_token {LLIR::condition_types::EQUAL, name_str}},
            };
            shadow_var = pushBasedOnQualifier(rule, expr, block, var, svar, quantifier);
        } else {
            block.back().type = LLIR::types::INCREASE_POS_COUNTER_BY_TOKEN_LENGTH;
            block.back().value = var.name;
            var.property_access = {"node"};
            block.erase(block.begin()); // remove variable assignment
            std::vector<LLIR::expr> expr;
            auto call = createDefaultCall(block, var, name_str, expr);
            push(call);
            shadow_var = pushBasedOnQualifier_Rule_other(rule, expr, block, var, svar, call, quantifier);

        }

    }
    return {svar, var, shadow_var, quantifier};
}
LLIR::node_ret_t LLIR::process_Rule_escaped(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("Rule_escaped\n");
    auto data = std::any_cast<obj_t>(rule.data);
    auto c = std::any_cast<std::string>(corelib::map::get(data, "c"));
    auto num = std::any_cast<Parser::Rule>(corelib::map::get(data, "num"));
    obj_t num_data;
    double num_main;
    if (num.data.has_value()) {
        num_data = num.as<obj_t>();
        num_main = std::any_cast<double>(corelib::map::get(num_data, "main_n"));
    } else {
        num_main = -1;
    }

    std::vector<LLIR::expr> expression;
    if (quantifier != '\0')
        UWarning(std::string("Qualifier '%c' after \\") + c + std::string(" ignored"), quantifier, c).print();
    switch (c[0]) {
        case 's':
            // do not add skip of spaces
            addSpaceSkip = false;
            if (data.size() > 0) {
                // remove previous skip of spaces if it does exists
                for (auto rit = this->data.rbegin(); rit != this->data.rend(); rit++) {
                    if (rit->type == LLIR::types::SKIP_SPACES) {
                        this->data.erase(rit.base());
                        break;
                    }
                }
            }

            if (num_main == 0) {
                //cpuf::printf("on_exit\n");
                return {{}, {}};
            } else if (num_main != -1) {
                UWarning("Number after \\s ignored").print();
            }
            //cpuf::printf("ON_EXPRESSION\n");
            expression = {
                {LLIR::condition_types::CURRENT_CHARACTER},
                {LLIR::condition_types::NOT_EQUAL},
                {LLIR::condition_types::CHARACTER, ' '}
            };
            break;
        default:
            throw Error("Undefined char '%c'", c[0]);
            
    }
    //cpuf::printf("escaped_open\n");

    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    var.type = {LLIR::var_types::STRING};
    std::vector<LLIR::member> block = {{LLIR::types::EXIT}};
    if (!isFirst) {
        block.insert(block.begin(), {LLIR::types::ERR, getErrorName(rule)});
    }
    auto block_after = createDefaultBlock(var, svar);
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    push({LLIR::types::IF, LLIR::condition{expression, block}});
    add(block_after);
    //cpuf::printf("escaped_close\n");
    return {svar, var, {}, quantifier};
}
LLIR::node_ret_t LLIR::process_Rule_any(const Parser::Rule &rule, char quantifier) {
    //cpuf::printf("Rule_any\n");
    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    var.type = {LLIR::var_types::STRING};
    std::vector<LLIR::expr> expression;
    std::vector<LLIR::member> block = {{LLIR::types::EXIT}};
    if (!isFirst) {
        block.insert(block.begin(), {LLIR::types::ERR, getErrorName(rule)});
    }
    std::vector<LLIR::member> block_after = createDefaultBlock(var, svar);
    expression = {
        {LLIR::condition_types::CURRENT_CHARACTER},
        {LLIR::condition_types::EQUAL},
        {LLIR::condition_types::CHARACTER, '\0'}
    };
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    push({LLIR::types::IF, LLIR::condition{expression, block}});
    add(block_after);
    return {svar, var};
}
std::vector<LLIR::member> LLIR::convert_op_rule(std::vector<Parser::Rule> &rules, size_t index, LLIR::variable &var, LLIR::variable &svar) {
    if (index >= rules.size()) {
        return {{LLIR::types::EXIT}};
    }

    LLIR::node_ret_t success_var;
    std::vector<std::vector<LLIR::member>> blocks;
    std::vector<std::vector<LLIR::expr>> conditions;
    auto rule = rules[index++];
    LLIR new_ir(tree);
    new_ir.proceed(*this);
    auto rule_data = std::any_cast<obj_t>(rule.data);
    auto rule_val = std::any_cast<Parser::Rule>(corelib::map::get(rule_data, "val"));
    auto quantifier = std::any_cast<Parser::Rule>(corelib::map::get(rule_data, "qualifier"));
    char quantifier_c;
    if (quantifier.data.has_value()) {
        quantifier_c = std::any_cast<char>(quantifier.data);
    } else {
        quantifier_c = '\0';
    }
    char new_qualifier;
    if (quantifier_c == '+')
        new_qualifier = '*';
    else if (quantifier_c == '\0')
        new_qualifier = '?';
    if (rule_val.name == Parser::Rules::Rule_group || rule_val.name == Parser::Rules::accessor)
        new_ir.ruleToIr(rule, new_qualifier);
    else    
        new_ir.ruleToIr(rule);
    variable_count = new_ir.variable_count;
    vars = new_ir.vars;
    success_var = new_ir.success_vars[0];
    groups.insert(groups.end(), new_ir.groups.begin(), new_ir.groups.end());
    for (auto el : new_ir.groups) {
        for (int i = el.begin; i < el.end; i++) {
            elements.push_back(new_ir.elements[i]);
        }
    }
    std::vector<int> erase_indices;
    std::vector<int> push_indices;
    if (rule_val.name == Parser::Rules::Rule_group || rule_val.name == Parser::Rules::accessor) {
        new_ir.data.back().type = LLIR::types::RESET_POS_COUNTER; // remove space skip
        auto cond = LLIR::condition {
            std::vector<LLIR::expr> {
                {LLIR::condition_types::NOT}, {LLIR::condition_types::VARIABLE, success_var.svar}
            },
            convert_op_rule(rules, index, var, svar),
        };
        auto v = !success_var.shadow_var.name.empty() && var.type.type != LLIR::var_types::STRING ? success_var.shadow_var : success_var.var;
        auto assign_type = v.type.type == LLIR::var_types::STRING ? LLIR::var_assign_types::ADD : LLIR::var_assign_types::ASSIGN;
        if (!v.name.empty()) {
            cond.else_block = {{
                LLIR::types::ASSIGN_VARIABLE,
                LLIR::variable_assign 
                {
                    var.name,
                    LLIR::var_assign_types::ASSIGN,
                    LLIR::assign {
                        LLIR::var_assign_values::VARIABLE,
                        v
                    }
                }
            }};
        } 
        new_ir.push({LLIR::types::IF, cond});
    } else {
        replaceToPrevChar(new_ir.data, 0);
        for (int i = 0; i < new_ir.data.size(); i++) {
            auto &el = new_ir.data[i];
            if (el.type == LLIR::types::IF) {
                auto val = std::any_cast<LLIR::condition>(el.value);
                // get recursively nested block
                val.block = convert_op_rule(rules, index, var, svar);
                // change condition and remove it's content into else blocks
                for (int j = i + 1; j < new_ir.data.size(); j++) {
                    auto el = new_ir.data[j];
                    erase_indices.push_back(j);
                    if (el.type != LLIR::types::SKIP_SPACES) {
                        if (el.type == LLIR::types::ASSIGN_VARIABLE) {
                            auto assignment = std::any_cast<LLIR::variable_assign>(el.value);
                            assignment.assign_type = LLIR::var_assign_types::ASSIGN;
                            el.value = assignment;
                        }
                        val.else_block.push_back(el);
                    }
                }
                // push into else block an assignment to variable
                if (var.type.type == LLIR::var_types::ARRAY) {
                    val.else_block.push_back({LLIR::types::METHOD_CALL, LLIR::method_call { var.name, {LLIR::function_call {"push", {LLIR::assign {LLIR::var_assign_values::VARIABLE, success_var.var}}}}}});
                } else {
                    auto v = !success_var.shadow_var.name.empty() && var.type.type != LLIR::var_types::STRING ? success_var.shadow_var : success_var.var;
                    auto assign_type = v.type.type == LLIR::var_types::STRING ? LLIR::var_assign_types::ADD : LLIR::var_assign_types::ASSIGN;
                    val.else_block.push_back({
                        LLIR::types::ASSIGN_VARIABLE,
                        LLIR::variable_assign 
                        {
                            var.name,
                            LLIR::var_assign_types::ASSIGN,
                            LLIR::assign {
                                LLIR::var_assign_values::VARIABLE,
                                v
                            }
                        }
                    });
                }
                
                // update the value
                el.value = val;
            }
        }
    }

    // Erase marked indices in reverse to prevent shifting issues
    for (int i = erase_indices.size() - 1; i >= 0; i--) {
        new_ir.data.erase(new_ir.data.begin() + erase_indices[i]);
    }
    return new_ir.data;
}

LLIR::node_ret_t LLIR::process_Rule_op(const Parser::Rule &rule, char quantifier) {
    // cpuf::printf("Rule_op\n");
    auto rules = std::any_cast<std::vector<Parser::Rule>>(rule.data);
    auto var = createEmptyVariable(generateVariableName());
    auto svar = createSuccessVariable();
    auto block = createDefaultBlock(var, svar);
    // Add success variable
    var.type = {deduceVarTypeByValue(rule)};
    if (insideLoop && var.type.type != LLIR::var_types::STRING) {
        var.type.templ = {{var.type.type}};
        var.type.type = LLIR::var_types::ARRAY;
    }
    push({LLIR::types::VARIABLE, var});
    push({LLIR::types::VARIABLE, svar});
    // Convert rules into IR
    // for (auto rule : op) {
    //     auto rule_data = std::any_cast<obj_t>(rule.data);
    //     auto rule_val = std::any_cast<Parser::Rule>(corelib::map::get(rule_data, "val"));
    //     auto qualifier = std::any_cast<Parser::Rule>(corelib::map::get(rule_data, "qualifier"));
    //     if (rule_val.name == Parser::Rules::Rule_other) {
    //         auto data = std::any_cast<obj_t>(rule_val.data);
    //         auto id = std::any_cast<Parser::Rule>(corelib::map::get(data, "name"));
    //         auto id_str = std::any_cast<std::string>(id.data);
    //     }
    // }
    auto res = convert_op_rule(rules, 0, var, svar);
    add(res);
    block.erase(block.begin()); // remove variable assignment (it is done in else blocks)
    block.erase(block.end() - 1);
    // Append default block
    add(block);
    return {svar, var, {}, quantifier};
}
void LLIR::process_cll_var(const Parser::Rule &rule) {
    // get data section
    auto data = std::any_cast<obj_t>(rule.data);
    auto type = std::any_cast<Parser::Rule>(corelib::map::get(data, "type"));
    auto name = std::any_cast<Parser::Rule>(corelib::map::get(data, "id"));
    auto name_str = std::any_cast<std::string>(name.data);
    auto op = std::any_cast<Parser::Rule>(corelib::map::get(data, "operator"));
    auto value = std::any_cast<Parser::Rule>(corelib::map::get(data, "value"));

    LLIR::var_type ir_type;
    LLIR::var_assign_types assign_types;
    LLIR::assign assign;
    if (type.data.has_value()) {
        ir_type = cllTreeTypeToIR(type);
    }
    if (op.data.has_value()) {
        assign_types = TreeOpToIR(op);
        if (value.name == Parser::Rules::expr)
            assign = {LLIR::var_assign_values::EXPR, TreeExprToIR(value)};
        // else
        //     assign = TreeTernaryToIR(value);
    }
    if (type.data.has_value()) {
        LLIR::variable var = {name_str, ir_type, assign};
        push({LLIR::types::VARIABLE, var});
        vars.push_back(var);
    } else {
        push({LLIR::types::ASSIGN_VARIABLE, LLIR::variable_assign {name_str, assign_types, assign}});
    }
}
LLIR::condition LLIR::process_cll_cond(const Parser::Rule &rule) {
    auto data = std::any_cast<obj_t>(rule.data);
    auto expr = std::any_cast<Parser::Rule>(corelib::map::get(data, "expr"));
    auto block = std::any_cast<Parser::Rule>(corelib::map::get(data, "block"));
    auto block_data = std::any_cast<std::vector<Parser::Rule>>(block.data);
    auto block_ir = rulesToIr(block_data);
    variable_count = block_ir.variable_count;
    LLIR::condition cond;
    cond.expression = TreeExprToIR(expr);
    cond.block.assign(block_ir.data.begin(), block_ir.data.end());
    return cond;
}
LLIR::node_ret_t LLIR::process_cll(const Parser::Rule &rule) {
    addSpaceSkip = false;
    auto rule_val = std::any_cast<Parser::Rule>(rule.data);
    LLIR::condition cond;
    switch (rule_val.name)
    {
    case Parser::Rules::cll_var:
        process_cll_var(rule_val);
        break;
    case Parser::Rules::cll_if:
        cond = process_cll_cond(rule_val);
        push({LLIR::types::IF, cond});
        break;
    case Parser::Rules::loop_while:
    {
        cond = process_cll_cond(rule_val);
        push({LLIR::types::WHILE, cond});
        break;
    }
    default:
        break;
    }
    return {{}, {}};
}

void LLIR::ruleToIr(const Parser::Rule &rule_rule, char custom_quantifier) {
    auto rule_data = std::any_cast<obj_t>(rule_rule.data);
    auto rule = std::any_cast<Parser::Rule>(corelib::map::get(rule_data, "val"));
    auto qualifier = std::any_cast<Parser::Rule>(corelib::map::get(rule_data, "qualifier"));
    char quantifier_char = '\0';
    if (custom_quantifier != -1) {
        quantifier_char = custom_quantifier;
    } else if (qualifier.data.has_value()) {
        quantifier_char = std::any_cast<char>(qualifier.data);
    }
    addSpaceSkip = true;
    LLIR::node_ret_t success_var;
    switch (rule.name) {
        case Parser::Rules::Rule_group: 
            success_var = processGroup(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_csequence:
            success_var = processRuleCsequence(rule, quantifier_char);
            break;
        case Parser::Rules::string:
            success_var = processString(rule, quantifier_char);
            break;
        case Parser::Rules::accessor:
            success_var = processAccessor(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_hex:
            success_var = process_Rule_hex(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_bin: 
            success_var = process_Rule_bin(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_other:
            success_var = process_Rule_other(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_escaped:
            success_var = process_Rule_escaped(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_any:
            success_var = process_Rule_any(rule, quantifier_char);
            break;
        case Parser::Rules::Rule_op:
            success_var = process_Rule_op(rule, quantifier_char);
            break;
        case Parser::Rules::cll:
            success_var = process_cll(rule);
            break;
        case Parser::Rules::linear_comment:
            return;
        default:
            throw Error("Converting undefined rule: %s,%s", Parser::RulesToString(rule_rule.name), Parser::RulesToString(rule.name));
    }
    isFirst = false;
    if (!success_var.shadow_var.name.empty())
        elements.push_back(success_var.shadow_var);
    else if (!success_var.var.name.empty()) {
        elements.push_back(success_var.var);
    }
    if (addSpaceSkip)
        push({LLIR::types::SKIP_SPACES, isToken});
    vars.push_back(success_var.var);
    vars.push_back(success_var.svar);
    vars.push_back(success_var.shadow_var);
    success_vars.push_back(success_var);
}
LLIR LLIR::rulesToIr(const std::vector<Parser::Rule> &rules) {
    LLIR result(tree);
    result.proceed(*this);
    for (const auto &rule : rules) {
        result.ruleToIr(rule);
    }
    return result;
}
LLIR LLIR::rulesToIr(const std::vector<Parser::Rule> &rules, bool &addSpaceSkipFirst) {
    LLIR result(tree);
    result.proceed(*this);
    bool isFirst = true;
    for (const auto &rule : rules) {
        result.ruleToIr(rule);
        if (isFirst)
            addSpaceSkipFirst = result.addSpaceSkip;
        isFirst = false;
    }
    return result;
}
void LLIR::treeToIr(const Parser::Tree &tree) {
    for (auto &el : tree) {
        if (el.name == Parser::Rules::id)
            cpuf::printf("file: %s\n", std::any_cast<std::string>(el.data));
        if (el.name != Parser::Rules::Rule)
            continue;
        auto data = std::any_cast<obj_t>(el.data);
        auto name = std::any_cast<std::string>(std::any_cast<Parser::Rule>(corelib::map::get(data, "name")).data);
        auto rules = std::any_cast<std::vector<Parser::Rule>>(corelib::map::get(data, "rule"));
        auto data_block = std::any_cast<Parser::Rule>(corelib::map::get(data, "data_block"));
        auto nested_rules = std::any_cast<std::vector<Parser::Rule>>(corelib::map::get(data, "nestedRules"));
        bool isToken = corelib::text::isUpper(name);
        fullname.push_back(name);
        bool to_add = true;
        if (tokensOnly != -1 && ((isToken && !tokensOnly) || (!isToken && tokensOnly))) {
            to_add = false;
        }
        treeToIr(nested_rules);
        this->isToken = isToken;
        if (to_add) {
            auto values = rulesToIr(rules);
            if (!values.data.empty() && values.data.back().type == LLIR::types::SKIP_SPACES)
                values.pop(); // remove skip of spaces at the end
            update(values);
            inlineAccessors(values.data);
            push({ isToken ? LLIR::types::TOKEN : LLIR::types::RULE, std::pair<std::string, std::vector<std::string>> {name, fullname}});  
            add(values);
            if (data_block.data.has_value())
                push({LLIR::types::DATA_BLOCK, TreeDataBlockToIR(data_block)});
            push({LLIR::types::RULE_END});
        }
        fullname.pop_back();
        clear_thread();
    }
}
