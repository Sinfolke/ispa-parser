name: Parser;
spacemode: mixed;
NUMBER:
    '-'? [0-9]+
    data:
        sign: matched(%1) ? %1 : "+",
        val: %2;
;
OP:
    $data = %1;
    [+-*/]
;
COP
    $data = %1;
    '>' | '<' | '<=' | '>='
;
END: ';';
// make rule for a simple expression:

expr:
    $array<object<string>> data;

    data[0] = { left: %1, op: %2, right: %3, COP: "" };
    if (matched($1)):
        data[1] = { left: $1>%1, op: $1>%2, right: $1>%3, COP: $1>4 }

    NUMBER OP NUMBER (COP NUMBER OP NUMBER)?
    // the tree would be like:
    // [ {
    //  type: Rules::EXPR,
    //  data: [
    //    {
    //        left: { startpos: 0, str: "12" (string_view),  },
    //        op: "-",
    //        right: "5"
    //    },
    //    {
    //        left: "4",
    //        op: "*",
    //        right: "100",
    //        COP: "<"
    //    } 
    //  ];
    // } ]
;