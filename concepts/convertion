app:
    walks through tree and invoke on calls from dll. 
    parameters:
        1. member
        2. data block
        3. use_props
        4. parameters data:
            array with array of value type and which rule numbers should be captured
        5. number of current rule
    this saves data about each element in text (position etc.)
    on data block the approaritate variable is inserted in beginning of a rule and assigned it's value in the end of element processing.
    The app must define which elements should be stored. This means it must analyze each accessor inside data blocks and store it into a specific variable.
    For C++ every element may be stored into variable approaritate to it's index. For example _0, _1, _2 and so on. For other languages because of optimization only required value should be stored
    
    variables needed:
    
    std::vector<variable_data>
    where variable_data = {
        int element_number,
        int element_type,            // type of element (int, bool, string, Token_result)
        size_t element_beginning,    // where the element matched begins itself
        size_t element_insertion_pos // where data can be captured

    }

dll:
    the on call generally should just output the code. It must minimally include logic