if ( !  (  CURRENT_TOKEN  ==  "AUTO_0"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "NUMBER"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_1"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "NUMBER"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_2"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "NUMBER"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = accessor_all(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_3"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = accessor_all(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

UNDEF cll_begin = NONE

bool success_2 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_4"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( success_1 )
{
		success_2 = TRUE;

}

UNDEF _13 = NONE

bool success_14 = FALSE

UNDEF _9 = NONE

bool success_10 = FALSE

UNDEF _3 = NONE

bool success_4 = FALSE

_5 = loop_while(TOKEN_SEQUENCE);

if ( !  (  _5.res  ) )
{
		_7 = loop_for(TOKEN_SEQUENCE);

	if 	( !  (  _7.res  ) )
	{
		return {}
	}
	else 	{
				success_8 = TRUE;

	}

}
else {
		success_6 = TRUE;

}

_3 += CURRENT_POS_SEQUENCE;

success_4 = TRUE;

pos++
if ( success_4 )
{
		success_10 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "END"  ) )
{
	return {}
}

_11 = CURRENT_TOKEN;

success_12 = TRUE;

pos++
if ( success_10  &&  success_12 )
{
		success_14 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_5"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
while ( CURRENT_TOKEN  ==  "Rule" )
{
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_6"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

_2 = AUTO_73(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

_8 = AUTO_73(TOKEN_SEQUENCE);

if ( !  (  _8.res  ) )
{
		_10 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _10.res  ) )
	{
		return {}
	}
	else 	{
				success_11 = TRUE;

	}

}
else {
		success_9 = TRUE;

}

_6 += CURRENT_POS_SEQUENCE;

success_7 = TRUE;

pos++
_0 = OP(TOKEN_SEQUENCE);

if ( _0.res )
{
		success_1 = TRUE;

	pos++
}

_2 = AUTO_45(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

_2 = AUTO_73(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

_2 = LOGICAL_AND(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

str _2 = NONE

bool success_3 = FALSE

if ( !  (  !STRNCMP(pos, "!")  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		_2 += CURRENT_POS_SEQUENCE;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

str _2 = NONE

bool success_3 = FALSE

if ( !  (  !STRNCMP(pos, "&&")  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		_2 += CURRENT_POS_SEQUENCE;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

str _2 = NONE

bool success_3 = FALSE

if ( !  (  !STRNCMP(pos, "||")  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		_2 += CURRENT_POS_SEQUENCE;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

str _2 = NONE

bool success_3 = FALSE

if ( !  (  !STRNCMP(pos, "|&")  ) )
{
		_4 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _4.res  ) )
	{
		return {}
	}
	else 	{
				success_5 = TRUE;

	}

}
else {
		_2 += CURRENT_POS_SEQUENCE;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = cll_type(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_7"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = cll_type(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "NUMBER"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_8"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "NUMBER"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "BOOLEAN"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_9"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "BOOLEAN"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "STRING"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_10"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "STRING"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

_0 = array(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_11"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = array(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

_0 = object(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_12"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = object(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

_0 = any_data(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_13"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = any_data(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_6 = cll_template(TOKEN_SEQUENCE);

if ( !  (  _6.res  ) )
{
	return {}
}

success_7 = TRUE;

pos++
UNDEF _10 = NONE

bool success_11 = FALSE

_8 = cll_template_content_typename(TOKEN_SEQUENCE);

if ( !  (  _8.res  ) )
{
	return {}
}

success_9 = TRUE;

pos++
if ( success_9 )
{
		success_11 = TRUE;

}

UNDEF _0 = NONE

bool success_1 = FALSE

_2 = cll_csupport_types(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _2 = NONE

bool success_3 = FALSE

while ( CURRENT_TOKEN  ==  "AUTO_28" )
{
		_0 = CURRENT_TOKEN;

		success_1 = TRUE;

	pos++
}

if ( success_1 )
{
		success_3 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_29"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
_6 = expr(TOKEN_SEQUENCE);

if ( !  (  _6.res  ) )
{
	return {}
}

success_7 = TRUE;

pos++
UNDEF _23 = NONE

bool success_24 = FALSE

UNDEF _8 = NONE

bool success_9 = FALSE

_10 = cll_block(TOKEN_SEQUENCE);

if ( !  (  _10.res  ) )
{
		_12 = cll_spaced_block(TOKEN_SEQUENCE);

	if 	( !  (  _12.res  ) )
	{
		return {}
	}
	else 	{
				success_13 = TRUE;

	}

}
else {
		success_11 = TRUE;

}

_8 += CURRENT_POS_SEQUENCE;

success_9 = TRUE;

pos++
UNDEF _21 = NONE

bool success_22 = FALSE

bool success_14 = FALSE

%1

if ( !  (  CURRENT_TOKEN  ==  "AUTO_30"  ) )
{
	return {}
}

_15 = CURRENT_TOKEN;

success_16 = TRUE;

pos++
_17 = size(TOKEN_SEQUENCE);

if ( !  (  _17.res  ) )
{
	return {}
}

success_18 = TRUE;

pos++
UNDEF _19 = NONE

bool success_20 = FALSE

if ()
{
		success_20 = TRUE;

}

if ( success_14  &&  success_16  &&  success_18  &&  success_20 )
{
		success_22 = TRUE;

}

if ( success_9  &&  success_22 )
{
		success_24 = TRUE;

}

_0 = expr(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_31"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = expr(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_32"  ) )
{
	return {}
}

_6 = CURRENT_TOKEN;

success_7 = TRUE;

pos++
_8 = expr(TOKEN_SEQUENCE);

if ( !  (  _8.res  ) )
{
	return {}
}

success_9 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_33"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = function_arguments(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_34"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_35"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = function_parameters(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_36"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

_2 = any_data(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  ==  "ID" )
{
		_0 = CURRENT_TOKEN;

		success_1 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "ID"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = function_body_call(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
while ( CURRENT_TOKEN  ==  "AUTO_37" )
{
		_0 = CURRENT_TOKEN;

		success_1 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_38"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _7 = NONE

bool success_8 = FALSE

bool success_6 = FALSE

while ( CURRENT_TOKEN  ==  "ID" )
{
		_4 = CURRENT_TOKEN;

		success_5 = TRUE;

	pos++
		success_6 = TRUE;

}

if ( success_6  ==  0 )
{
	return {}
}

if ( success_5 )
{
		success_8 = TRUE;

}

_9 = function_body_decl(TOKEN_SEQUENCE);

if ( !  (  _9.res  ) )
{
	return {}
}

success_10 = TRUE;

pos++
UNDEF _17 = NONE

bool success_18 = FALSE

UNDEF _11 = NONE

bool success_12 = FALSE

_13 = cll_block(TOKEN_SEQUENCE);

if ( !  (  _13.res  ) )
{
		_15 = cll_spaced_block(TOKEN_SEQUENCE);

	if 	( !  (  _15.res  ) )
	{
		return {}
	}
	else 	{
				success_16 = TRUE;

	}

}
else {
		success_14 = TRUE;

}

_11 += CURRENT_POS_SEQUENCE;

success_12 = TRUE;

pos++
if ( success_12 )
{
		success_18 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_39"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = expr(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
UNDEF _4 = NONE

bool success_5 = FALSE

_6 = cll_block(TOKEN_SEQUENCE);

if ( !  (  _6.res  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_8 = CURRENT_TOKEN;

				success_9 = TRUE;

	}

}
else {
		success_7 = TRUE;

}

_4 += CURRENT_POS_SEQUENCE;

success_5 = TRUE;

pos++
_0 = for(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_40"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _10 = NONE

bool success_11 = FALSE

UNDEF _4 = NONE

bool success_5 = FALSE

_6 = expr(TOKEN_SEQUENCE);

if ( !  (  _6.res  ) )
{
		_8 = cll_var(TOKEN_SEQUENCE);

	if 	( !  (  _8.res  ) )
	{
		return {}
	}
	else 	{
				success_9 = TRUE;

	}

}
else {
		success_7 = TRUE;

}

_4 += CURRENT_POS_SEQUENCE;

success_5 = TRUE;

pos++
if ( success_5 )
{
		success_11 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_41"  ) )
{
	return {}
}

_12 = CURRENT_TOKEN;

success_13 = TRUE;

pos++
_14 = expr(TOKEN_SEQUENCE);

if ( _14.res )
{
		success_15 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_42"  ) )
{
	return {}
}

_16 = CURRENT_TOKEN;

success_17 = TRUE;

pos++
_18 = expr(TOKEN_SEQUENCE);

if ( _18.res )
{
		success_19 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_43"  ) )
{
	return {}
}

_20 = CURRENT_TOKEN;

success_21 = TRUE;

pos++
UNDEF _22 = NONE

bool success_23 = FALSE

_24 = cll_block(TOKEN_SEQUENCE);

if ( !  (  _24.res  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_26 = CURRENT_TOKEN;

				success_27 = TRUE;

	}

}
else {
		success_25 = TRUE;

}

_22 += CURRENT_POS_SEQUENCE;

success_23 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "ID"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_44"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = cll_function_call(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_45"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = method_call(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_46"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_47"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
if ( success_1 )
{
		success_7 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "ID"  ) )
{
	return {}
}

_8 = CURRENT_TOKEN;

success_9 = TRUE;

pos++
UNDEF _16 = NONE

bool success_17 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_48"  ) )
{
	return {}
}

_10 = CURRENT_TOKEN;

success_11 = TRUE;

pos++
_12 = expr(TOKEN_SEQUENCE);

if ( !  (  _12.res  ) )
{
	return {}
}

success_13 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_49"  ) )
{
	return {}
}

_14 = CURRENT_TOKEN;

success_15 = TRUE;

pos++
if ( success_11  &&  success_13  &&  success_15 )
{
		success_17 = TRUE;

}

UNDEF _24 = NONE

bool success_25 = FALSE

UNDEF _18 = NONE

bool success_19 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_50"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_51"  ) )
	{
		return {}
	}
	else 	{
				_22 = CURRENT_TOKEN;

				success_23 = TRUE;

	}

}
else {
		_20 = CURRENT_TOKEN;

		success_21 = TRUE;

}

_18 += CURRENT_POS_SEQUENCE;

success_19 = TRUE;

pos++
if ( success_19 )
{
		success_25 = TRUE;

}

_0 = cll_type(TOKEN_SEQUENCE);

if ( _0.res )
{
		success_1 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "ID"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _12 = NONE

bool success_13 = FALSE

_4 = assignment_op(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
	return {}
}

success_5 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

_8 = expr(TOKEN_SEQUENCE);

if ( !  (  _8.res  ) )
{
		_10 = cll_ternary(TOKEN_SEQUENCE);

	if 	( !  (  _10.res  ) )
	{
		return {}
	}
	else 	{
				success_11 = TRUE;

	}

}
else {
		success_9 = TRUE;

}

_6 += CURRENT_POS_SEQUENCE;

success_7 = TRUE;

pos++
if ( success_5  &&  success_7 )
{
		success_13 = TRUE;

}

UNDEF _2 = NONE

bool success_3 = FALSE

str _0 = NONE

bool success_1 = FALSE

if ( !  (  *pos  ==  '"'  &&  *pos  ==  '''  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
if ( success_1 )
{
		success_3 = TRUE;

}

UNDEF _10 = NONE

bool success_11 = FALSE

UNDEF _4 = NONE

bool success_5 = FALSE

str _6 = NONE

bool success_7 = FALSE

if ( !  (  !STRNCMP(pos, "\\${quote}")  ) )
{
		str _8 = NONE

		bool success_9 = FALSE

	if 	( !  (  !  (  *pos  ==  '"'  &&  *pos  ==  '''  )  ) )
	{
		return {}
	}
	else 	{
				_8 += CURRENT_POS_SEQUENCE;

				success_9 = TRUE;

	}

}
else {
		_6 += CURRENT_POS_SEQUENCE;

		success_7 = TRUE;

}

_4 += CURRENT_POS_SEQUENCE;

success_5 = TRUE;

pos++
if ( success_5 )
{
		success_11 = TRUE;

}

_0 = END(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _2 = NONE

bool success_3 = FALSE

_4 = END(TOKEN_SEQUENCE);

if ( !  (  _4.res  ) )
{
		_6 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  (  _6.res  ) )
	{
		return {}
	}
	else 	{
				success_7 = TRUE;

	}

}
else {
		success_5 = TRUE;

}

_2 += CURRENT_POS_SEQUENCE;

success_3 = TRUE;

pos++
UNDEF d = NONE

bool success_6 = FALSE

UNDEF _0 = NONE

bool success_1 = FALSE

str _2 = NONE

bool success_3 = FALSE

if ( !  (  !STRNCMP(pos, "true")  ) )
{
		str _4 = NONE

		bool success_5 = FALSE

	if 	( !  (  !STRNCMP(pos, "false")  ) )
	{
		return {}
	}
	else 	{
				_4 += CURRENT_POS_SEQUENCE;

				success_5 = TRUE;

	}

}
else {
		_2 += CURRENT_POS_SEQUENCE;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
if ( success_1 )
{
		success_6 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_52"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _8 = NONE

bool success_9 = FALSE

UNDEF _6 = NONE

bool success_7 = FALSE

_2 = any_data(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_53"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( success_7 )
{
		success_9 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_54"  ) )
{
	return {}
}

_10 = CURRENT_TOKEN;

success_11 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_55"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _20 = NONE

bool success_21 = FALSE

_2 = any_data(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_56"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
_6 = any_data(TOKEN_SEQUENCE);

if ( !  (  _6.res  ) )
{
	return {}
}

success_7 = TRUE;

pos++
UNDEF _16 = NONE

bool success_17 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_57"  ) )
{
	return {}
}

_8 = CURRENT_TOKEN;

success_9 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "ID"  ) )
{
	return {}
}

_10 = CURRENT_TOKEN;

success_11 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_58"  ) )
{
	return {}
}

_12 = CURRENT_TOKEN;

success_13 = TRUE;

pos++
_14 = any_data(TOKEN_SEQUENCE);

if ( !  (  _14.res  ) )
{
	return {}
}

success_15 = TRUE;

pos++
if ( success_9  &&  success_11  &&  success_13  &&  success_15 )
{
		success_17 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_59"  ) )
{
	return {}
}

_18 = CURRENT_TOKEN;

success_19 = TRUE;

pos++
if ( success_3  &&  success_5  &&  success_7  &&  success_17  &&  success_19 )
{
		success_21 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_60"  ) )
{
	return {}
}

_22 = CURRENT_TOKEN;

success_23 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "BOOLEAN"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_10 = CURRENT_TOKEN;

				success_11 = TRUE;

	}

}
else {
		_8 = CURRENT_TOKEN;

		success_9 = TRUE;

}

_6 += CURRENT_POS_SEQUENCE;

success_7 = TRUE;

pos++
_0 = NEWLINE(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_41(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_61(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

bool success_7 = FALSE

while ( CURRENT_TOKEN  ==  "AUTO_61" )
{
		_0 = CURRENT_TOKEN;

		success_1 = TRUE;

	pos++
}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_62"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
while ( CURRENT_TOKEN  ==  "AUTO_63" )
{
		_4 = CURRENT_TOKEN;

		success_5 = TRUE;

	pos++
}

if ( success_1  &&  success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_64"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _2 = NONE

bool success_3 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_6 = CURRENT_TOKEN;

				success_7 = TRUE;

	}

}
else {
		_4 = CURRENT_TOKEN;

		success_5 = TRUE;

}

_2 += CURRENT_POS_SEQUENCE;

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_68"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_69"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "import")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _8 = NONE

bool success_9 = FALSE

str _4 = NONE

bool success_5 = FALSE

if ( !  (  !STRNCMP(pos, ",")  ) )
{
	return {}
}

_4 += CURRENT_POS_SEQUENCE;

success_5 = TRUE;

pos++
if ( success_5  &&  success_7 )
{
		success_9 = TRUE;

}

if ( !  (  CURRENT_TOKEN  ==  "AUTO_70"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = unit(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
UNDEF _8 = NONE

bool success_9 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_71"  ) )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
_6 = unit(TOKEN_SEQUENCE);

if ( !  (  _6.res  ) )
{
	return {}
}

success_7 = TRUE;

pos++
if ( success_5  &&  success_7 )
{
		success_9 = TRUE;

}

bool success_0 = FALSE

%2

bool success_1 = FALSE

%4

_0 = preproc_begin(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_2 = preproc(TOKEN_SEQUENCE);

if ( !  (  _2.res  ) )
{
	return {}
}

success_3 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_72"  ) )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _0 = NONE

bool success_1 = FALSE

if ( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
{
	if 	( !  (  CURRENT_TOKEN  ==  "AUTO_73"  ) )
	{
		return {}
	}
	else 	{
				_4 = CURRENT_TOKEN;

				success_5 = TRUE;

	}

}
else {
		_2 = CURRENT_TOKEN;

		success_3 = TRUE;

}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF rule_begin = NONE

bool success_4 = FALSE

_0 = ID(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _2 = NONE

bool success_3 = FALSE

if ( !  (  !STRNCMP(pos, ":")  ) )
{
	return {}
}

_2 += CURRENT_POS_SEQUENCE;

success_3 = TRUE;

pos++
if ( success_1  &&  success_3 )
{
		success_4 = TRUE;

}

UNDEF _9 = NONE

bool success_10 = FALSE

if ( success_8 )
{
		success_10 = TRUE;

}

_15 = STRICT_END(TOKEN_SEQUENCE);

if ( !  (  _15.res  ) )
{
	return {}
}

success_16 = TRUE;

pos++
_0 = AUTO_4(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "%")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "^")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, ">")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "$")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_55(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_60(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_8(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_9(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_10(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_11(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_12(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_13(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_53(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "unsigned")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "char")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "short")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "int")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "long")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "long long")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "float")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "double")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "deque")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "vector")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "queue")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "stack")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "list")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "forward_list")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_37(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "if")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

if ( *pos  ==  ' ' )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "?")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_56(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_35(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_36(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_40(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_43(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( *pos  !=  ' ' )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "fn")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "while")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "(")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_42(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_59(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, ")")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, ".")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "=")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_50(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_51(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_52(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_54(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "++")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "--")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "[")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_57(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "]")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "{")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_58(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_71(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, ":")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, ";")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "}")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_62(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_63(TOKEN_SEQUENCE);

if ( !  (  _0.res  ) )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  (  *pos  >=  'a'  &&  *pos  <=  'z'  )  &&  (  *pos  >=  'A'  &&  *pos  <=  'Z'  )  &&  (  *pos  >=  '0'  &&  *pos  <=  '9'  )  &&  *pos  ==  '_'  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "spacemode")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "mixed")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "skipped")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "allowed")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "//")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !  (  *pos  ==  'n'  )  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "use")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, ",")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "\n")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  !STRNCMP(pos, "@")  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
