Rule(accessor_group) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_4"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "NUMBER"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2
}
Rule(accessor_element) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_1"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "NUMBER"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2
}
Rule(accessor_char) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_90"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "NUMBER"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2
}
Rule(accessor_all) {
	rule _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = accessor_group(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = accessor_element(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			rule _6 = NONE
			bool success_7 = FALSE
			_6 = accessor_char(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				return {}
			}
			else 
			{
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Rule(accessor) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = accessor_all(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_3"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = accessor_all(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = 
		second: _6
		first: _0
	;
}
Rule(cll) {
	token cll_begin = NONE
	bool success_0 = FALSE
	token _1 = NONE
	bool success_2 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_4"))
	{
		return {}
	}
	_1 = CURRENT_TOKEN
	success_2 = TRUE
	pos++
	if (success_2)
	{
		success_0 = TRUE
	}
	cll_begin = _1
	skipspaces(TOKEN_SEQUENCE)
	str _3 = NONE
	bool success_4 = FALSE
	bool success_25 = FALSE
	while (1)
	{
		rule _5 = NONE
		bool success_6 = FALSE
		rule _7 = NONE
		bool success_8 = FALSE
		rule _9 = NONE
		bool success_10 = FALSE
		_9 = cll_var(TOKEN_SEQUENCE)
		if (!(_9.res))
		{
			rule _11 = NONE
			bool success_12 = FALSE
			_11 = cll_if(TOKEN_SEQUENCE)
			if (!(_11.res))
			{
				rule _13 = NONE
				bool success_14 = FALSE
				_13 = expr(TOKEN_SEQUENCE)
				if (!(_13.res))
				{
					rule _15 = NONE
					bool success_16 = FALSE
					_15 = copiable_method_call(TOKEN_SEQUENCE)
					if (!(_15.res))
					{
						rule _17 = NONE
						bool success_18 = FALSE
						_17 = method_call(TOKEN_SEQUENCE)
						if (!(_17.res))
						{
							rule _19 = NONE
							bool success_20 = FALSE
							_19 = loop_while(TOKEN_SEQUENCE)
							if (!(_19.res))
							{
								rule _21 = NONE
								bool success_22 = FALSE
								_21 = loop_for(TOKEN_SEQUENCE)
								if (!(_21.res))
								{
									break
								}
								else 
								{
									success_22 = TRUE
									_7 = _21
								}
							}
							else 
							{
								success_20 = TRUE
								_7 = _19
							}
						}
						else 
						{
							success_18 = TRUE
							_7 = _17
						}
					}
					else 
					{
						success_16 = TRUE
						_7 = _15
					}
				}
				else 
				{
					success_14 = TRUE
					_7 = _13
				}
			}
			else 
			{
				success_12 = TRUE
				_7 = _11
			}
		}
		else 
		{
			success_10 = TRUE
			_7 = _9
		}
		_7 += CURRENT_POS_SEQUENCE
		success_8 = TRUE
		pos++
		if (success_8)
		{
			success_6 = TRUE
		}
		_5 = _7
		skipspaces(TOKEN_SEQUENCE)
		token _23 = NONE
		bool success_24 = FALSE
		if (!(CURRENT_TOKEN == "END"))
		{
			break
		}
		_23 = CURRENT_TOKEN
		success_24 = TRUE
		pos++
		success_25 = TRUE
	}
	if (!success_25)
	{
		return {}
	}
	if (success_24)
	{
		success_4 = TRUE
	}
	_3 += _5
	_3 += _23
	data = _3
}
Rule(cll_block) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_64"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = Rule_rule(TOKEN_SEQUENCE)
	array shadow_4 = NONE
	while (_2.res)
	{
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
	}
	skipspaces(TOKEN_SEQUENCE)
	token _5 = NONE
	bool success_6 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_69"))
	{
		return {}
	}
	_5 = CURRENT_TOKEN
	success_6 = TRUE
	pos++
	data = _2
}
Rule(cll_spaced_block) {
	while ((skipup(" ")>spaces_amount))
	{
		rule _0 = NONE
		bool success_1 = FALSE
		_0 = Rule_rule(TOKEN_SEQUENCE)
		if (!(_0.res))
		{
			return {}
		}
		success_1 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
	}
	data = _0
}
Token(OP) {
	any _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	if (!(*pos == '+'))
	{
		str _4 = NONE
		bool success_5 = FALSE
		if (!(*pos == '-'))
		{
			str _6 = NONE
			bool success_7 = FALSE
			if (!(*pos == '*'))
			{
				str _8 = NONE
				bool success_9 = FALSE
				if (!(*pos == '/'))
				{
					str _10 = NONE
					bool success_11 = FALSE
					if (!(*pos == '%'))
					{
					}
					else 
					{
						_10 += CURRENT_POS_SEQUENCE
						success_11 = TRUE
						_0 = _10
					}
				}
				else 
				{
					_8 += CURRENT_POS_SEQUENCE
					success_9 = TRUE
					_0 = _8
				}
			}
			else 
			{
				_6 += CURRENT_POS_SEQUENCE
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	skipspaces(pos)
	str _12 = NONE
	bool success_13 = FALSE
	str _14 = NONE
	bool success_15 = FALSE
	if (!(*pos == '&'))
	{
		str _16 = NONE
		bool success_17 = FALSE
		if (!(*pos == '|'))
		{
			str _18 = NONE
			bool success_19 = FALSE
			if (!(*pos == '^'))
			{
				str _20 = NONE
				bool success_21 = FALSE
				if (!(!STRNCMP(pos, "<<")))
				{
					str _22 = NONE
					bool success_23 = FALSE
					if (!(!STRNCMP(pos, ">>")))
					{
						return {}
					}
					else 
					{
						_22 += CURRENT_POS_SEQUENCE
						success_23 = TRUE
						_12 = _22
					}
				}
				else 
				{
					_20 += CURRENT_POS_SEQUENCE
					success_21 = TRUE
					_12 = _20
				}
			}
			else 
			{
				_18 += CURRENT_POS_SEQUENCE
				success_19 = TRUE
				_12 = _18
			}
		}
		else 
		{
			_16 += CURRENT_POS_SEQUENCE
			success_17 = TRUE
			_12 = _16
		}
	}
	else 
	{
		_14 += CURRENT_POS_SEQUENCE
		success_15 = TRUE
		_12 = _14
	}
	_12 += CURRENT_POS_SEQUENCE
	success_13 = TRUE
	pos++
	data = _2
}
Token(ASSIGNMENT_OP) {
	token _0 = NONE
	bool success_1 = FALSE
	_0 = OP(TOKEN_SEQUENCE)
	if (_0.res)
	{
		success_1 = TRUE
		pos++
	}
	skipspaces(pos)
	token _2 = NONE
	bool success_3 = FALSE
	_2 = AUTO_54(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	data = _0
}
Token(COMPARE_OP) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	if (!(!STRNCMP(pos, "==")))
	{
		str _4 = NONE
		bool success_5 = FALSE
		if (!(!STRNCMP(pos, "!=")))
		{
			str _6 = NONE
			bool success_7 = FALSE
			if (!(*pos == '>'))
			{
				str _8 = NONE
				bool success_9 = FALSE
				if (!(*pos == '<'))
				{
					str _10 = NONE
					bool success_11 = FALSE
					if (!(!STRNCMP(pos, ">=")))
					{
						str _12 = NONE
						bool success_13 = FALSE
						if (!(!STRNCMP(pos, "<=")))
						{
							return {}
						}
						else 
						{
							_12 += CURRENT_POS_SEQUENCE
							success_13 = TRUE
							_0 = _12
						}
					}
					else 
					{
						_10 += CURRENT_POS_SEQUENCE
						success_11 = TRUE
						_0 = _10
					}
				}
				else 
				{
					_8 += CURRENT_POS_SEQUENCE
					success_9 = TRUE
					_0 = _8
				}
			}
			else 
			{
				_6 += CURRENT_POS_SEQUENCE
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Token(LOGICAL_OP) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	_2 = LOGICAL_AND(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		token _4 = NONE
		bool success_5 = FALSE
		_4 = LOGICAL_OR(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			return {}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Token(LOGICAL_NOT) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	if (!(*pos == '!'))
	{
		str _4 = NONE
		bool success_5 = FALSE
		if (!(!STRNCMP(pos, "not")))
		{
			return {}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Token(LOGICAL_AND) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	if (!(!STRNCMP(pos, "&&")))
	{
		str _4 = NONE
		bool success_5 = FALSE
		if (!(!STRNCMP(pos, "and")))
		{
			return {}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Token(LOGICAL_OR) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	if (!(!STRNCMP(pos, "||")))
	{
		str _4 = NONE
		bool success_5 = FALSE
		if (!(!STRNCMP(pos, "or")))
		{
			return {}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Token(LOGICAL_ANDR) {
	any _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	if (!(!STRNCMP(pos, "|&")))
	{
		str _4 = NONE
		bool success_5 = FALSE
		do
		{
			str _6 = NONE
			bool success_7 = FALSE
			if (!(!STRNCMP(pos, "and")))
			{
				break
			}
			_6 += CURRENT_POS_SEQUENCE
			success_7 = TRUE
			pos++
			str _8 = NONE
			bool success_9 = FALSE
			if (*pos != ' ')
			{
				break
			}
			_8 += CURRENT_POS_SEQUENCE
			success_9 = TRUE
			pos++
			str _10 = NONE
			bool success_11 = FALSE
			if (!(!STRNCMP(pos, "or")))
			{
				break
			}
			_10 += CURRENT_POS_SEQUENCE
			success_11 = TRUE
			pos++
		}		while(0)

		if (success_11)
		{
			success_5 = TRUE
		}
		_4 += _6
		_4 += _8
		_4 += _10
		if (!success_5)
		{
			return {}
		}
		else 
		{
			_0 = _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Rule(cll_template_content_typename) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = cll_type(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_8"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = cll_type(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_template_content_int) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "NUMBER"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_9"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "NUMBER"))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_template_content_bool) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "BOOLEAN"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_10"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "BOOLEAN"))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_template_content_str) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "STRING"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_11"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "STRING"))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_template_content_arr) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = array(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_12"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = array(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_template_content_obj) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = object(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_13"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = object(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_template_content_any_data) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = any_data(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_62"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = any_data(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = [%1
,%3
,]
}
Rule(cll_csupport_types) {
	bool is_unsigned = matched($1>%1
)
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	do
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (CURRENT_TOKEN == "AUTO_14")
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			pos++
		}
		skipspaces(TOKEN_SEQUENCE)
		token _6 = NONE
		bool success_7 = FALSE
		token _8 = NONE
		bool success_9 = FALSE
		token _10 = NONE
		bool success_11 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_15"))
		{
			token _12 = NONE
			bool success_13 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_16"))
			{
				token _14 = NONE
				bool success_15 = FALSE
				if (!(CURRENT_TOKEN == "AUTO_17"))
				{
					token _16 = NONE
					bool success_17 = FALSE
					if (!(CURRENT_TOKEN == "AUTO_18"))
					{
						token _18 = NONE
						bool success_19 = FALSE
						if (!(CURRENT_TOKEN == "AUTO_19"))
						{
							break
						}
						else 
						{
							_18 = CURRENT_TOKEN
							success_19 = TRUE
							_8 = _18
						}
					}
					else 
					{
						_16 = CURRENT_TOKEN
						success_17 = TRUE
						_8 = _16
					}
				}
				else 
				{
					_14 = CURRENT_TOKEN
					success_15 = TRUE
					_8 = _14
				}
			}
			else 
			{
				_12 = CURRENT_TOKEN
				success_13 = TRUE
				_8 = _12
			}
		}
		else 
		{
			_10 = CURRENT_TOKEN
			success_11 = TRUE
			_8 = _10
		}
		_8 += CURRENT_POS_SEQUENCE
		success_9 = TRUE
		pos++
		if (success_9)
		{
			success_7 = TRUE
		}
		_6 = _8
	}	while(0)

	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	if (!success_3)
	{
		token _20 = NONE
		bool success_21 = FALSE
		do
		{
			token _22 = NONE
			bool success_23 = FALSE
			token _24 = NONE
			bool success_25 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_20"))
			{
				token _26 = NONE
				bool success_27 = FALSE
				if (!(CURRENT_TOKEN == "AUTO_21"))
				{
					break
				}
				else 
				{
					_26 = CURRENT_TOKEN
					success_27 = TRUE
					_22 = _26
				}
			}
			else 
			{
				_24 = CURRENT_TOKEN
				success_25 = TRUE
				_22 = _24
			}
			_22 += CURRENT_POS_SEQUENCE
			success_23 = TRUE
			pos++
		}		while(0)

		if (success_23)
		{
			success_21 = TRUE
		}
		_20 = _22
		if (!success_21)
		{
			token _28 = NONE
			bool success_29 = FALSE
			do
			{
				token _30 = NONE
				bool success_31 = FALSE
				token _32 = NONE
				bool success_33 = FALSE
				if (!(CURRENT_TOKEN == "AUTO_22"))
				{
					token _34 = NONE
					bool success_35 = FALSE
					if (!(CURRENT_TOKEN == "AUTO_23"))
					{
						token _36 = NONE
						bool success_37 = FALSE
						if (!(CURRENT_TOKEN == "AUTO_24"))
						{
							token _38 = NONE
							bool success_39 = FALSE
							if (!(CURRENT_TOKEN == "AUTO_25"))
							{
								token _40 = NONE
								bool success_41 = FALSE
								if (!(CURRENT_TOKEN == "AUTO_26"))
								{
									token _42 = NONE
									bool success_43 = FALSE
									if (!(CURRENT_TOKEN == "AUTO_27"))
									{
										break
									}
									else 
									{
										_42 = CURRENT_TOKEN
										success_43 = TRUE
										_30 = _42
									}
								}
								else 
								{
									_40 = CURRENT_TOKEN
									success_41 = TRUE
									_30 = _40
								}
							}
							else 
							{
								_38 = CURRENT_TOKEN
								success_39 = TRUE
								_30 = _38
							}
						}
						else 
						{
							_36 = CURRENT_TOKEN
							success_37 = TRUE
							_30 = _36
						}
					}
					else 
					{
						_34 = CURRENT_TOKEN
						success_35 = TRUE
						_30 = _34
					}
				}
				else 
				{
					_32 = CURRENT_TOKEN
					success_33 = TRUE
					_30 = _32
				}
				_30 += CURRENT_POS_SEQUENCE
				success_31 = TRUE
				pos++
			}			while(0)

			if (success_31)
			{
				success_29 = TRUE
			}
			_28 = _30
			if (!success_29)
			{
				return {}
			}
			else 
			{
				_0 = _28
			}
		}
		else 
		{
			_0 = _20
		}
	}
	else 
	{
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _44 = NONE
	bool success_45 = FALSE
	_44 = cll_template_typename(TOKEN_SEQUENCE)
	if (!(_44.res))
	{
		return {}
	}
	success_45 = TRUE
	pos++
	data = 
		template: _10
		type: _4
	;
}
Rule(cll_type_abstract) {
	any _0 = NONE
	bool success_1 = FALSE
	any _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_28"))
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_29"))
		{
			token _8 = NONE
			bool success_9 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_30"))
			{
				token _10 = NONE
				bool success_11 = FALSE
				if (!(CURRENT_TOKEN == "AUTO_31"))
				{
					token _12 = NONE
					bool success_13 = FALSE
					if (!(CURRENT_TOKEN == "AUTO_32"))
					{
						str _14 = NONE
						bool success_15 = FALSE
						do
						{
							token _16 = NONE
							bool success_17 = FALSE
							if (!(CURRENT_TOKEN == "AUTO_33"))
							{
								break
							}
							_16 = CURRENT_TOKEN
							success_17 = TRUE
							pos++
							skipspaces(TOKEN_SEQUENCE)
							rule _18 = NONE
							bool success_19 = FALSE
							_18 = cll_template_typename(TOKEN_SEQUENCE)
							if (!(_18.res))
							{
								break
							}
							success_19 = TRUE
							pos++
						}						while(0)

						if (success_19)
						{
							success_15 = TRUE
						}
						_14 += _16
						_14 += _18
						if (!success_15)
						{
							str _20 = NONE
							bool success_21 = FALSE
							do
							{
								token _22 = NONE
								bool success_23 = FALSE
								if (!(CURRENT_TOKEN == "AUTO_34"))
								{
									break
								}
								_22 = CURRENT_TOKEN
								success_23 = TRUE
								pos++
								skipspaces(TOKEN_SEQUENCE)
								rule _24 = NONE
								bool success_25 = FALSE
								_24 = cll_template_typename(TOKEN_SEQUENCE)
								if (!(_24.res))
								{
									break
								}
								success_25 = TRUE
								pos++
							}							while(0)

							if (success_25)
							{
								success_21 = TRUE
							}
							_20 += _22
							_20 += _24
							if (!success_21)
							{
								return {}
							}
							else 
							{
								_2 = _20
							}
						}
						else 
						{
							_2 = _14
						}
					}
					else 
					{
						_12 = CURRENT_TOKEN
						success_13 = TRUE
						_2 = _12
					}
				}
				else 
				{
					_10 = CURRENT_TOKEN
					success_11 = TRUE
					_2 = _10
				}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	if (success_3)
	{
		success_1 = TRUE
	}
	data = 
		template: _6
		type: _4
	;
}
Rule(cll_type) {
	rule _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = cll_csupport_types(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = cll_type_abstract(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			return {}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Rule(cll_if) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	while (CURRENT_TOKEN == "AUTO_35")
	{
		_2 += CURRENT_TOKEN
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
	}
	if (success_3)
	{
		success_1 = TRUE
	}
	_0 = _2
	skipspaces(TOKEN_SEQUENCE)
	token _5 = NONE
	bool success_6 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_36"))
	{
		return {}
	}
	_5 = CURRENT_TOKEN
	success_6 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _7 = NONE
	bool success_8 = FALSE
	_7 = expr(TOKEN_SEQUENCE)
	if (!(_7.res))
	{
		return {}
	}
	success_8 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _9 = NONE
	bool success_10 = FALSE
	rule _11 = NONE
	bool success_12 = FALSE
	rule _13 = NONE
	bool success_14 = FALSE
	_13 = cll_block(TOKEN_SEQUENCE)
	if (!(_13.res))
	{
		rule _15 = NONE
		bool success_16 = FALSE
		_15 = cll_spaced_block(TOKEN_SEQUENCE)
		if (!(_15.res))
		{
			return {}
		}
		else 
		{
			success_16 = TRUE
			_11 = _15
		}
	}
	else 
	{
		success_14 = TRUE
		_11 = _13
	}
	_11 += CURRENT_POS_SEQUENCE
	success_12 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _17 = NONE
	bool success_18 = FALSE
	UNDEF _20 = NONE
	bool success_19 = FALSE
	if (!(!STRNCMP(pos, _2)))
	{
		return {}
	}
	_20 += CURRENT_POS_SEQUENCE
	success_19 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _21 = NONE
	bool success_22 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_96"))
	{
		return {}
	}
	_21 = CURRENT_TOKEN
	success_22 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _23 = NONE
	bool success_24 = FALSE
	_23 = size(TOKEN_SEQUENCE)
	if (!(_23.res))
	{
		return {}
	}
	success_24 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	UNDEF _25 = NONE
	bool success_26 = FALSE
	if ()
	{
		success_26 = TRUE
	}
	if (success_26)
	{
		success_18 = TRUE
	}
	_17 += _20
	_17 += _21
	_17 += _23
	_17 += _25
	if (success_18)
	{
		success_10 = TRUE
	}
	_9 += _11
	_9 += _17
	data = 
		block: _0
		expr: _5
	;
}
Rule(cll_ternary) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = expr(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_83"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _4 = NONE
	bool success_5 = FALSE
	_4 = expr(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		return {}
	}
	success_5 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _6 = NONE
	bool success_7 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_65"))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _8 = NONE
	bool success_9 = FALSE
	_8 = expr(TOKEN_SEQUENCE)
	if (!(_8.res))
	{
		return {}
	}
	success_9 = TRUE
	pos++
	data = 
		second: _8
		first: _4
		cond: _0
	;
}
Rule(expr_logical) {
	rule _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = expr_compare(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = expr_arithmetic(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			rule _6 = NONE
			bool success_7 = FALSE
			_6 = expr_for_arithmetic(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				return {}
			}
			else 
			{
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _8 = NONE
	bool success_9 = FALSE
	if (!(CURRENT_TOKEN == "LOGICAL_OP"))
	{
		return {}
	}
	_8 = CURRENT_TOKEN
	success_9 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _10 = NONE
	bool success_11 = FALSE
	rule _12 = NONE
	bool success_13 = FALSE
	_12 = expr_compare(TOKEN_SEQUENCE)
	if (!(_12.res))
	{
		rule _14 = NONE
		bool success_15 = FALSE
		_14 = expr_arithmetic(TOKEN_SEQUENCE)
		if (!(_14.res))
		{
			rule _16 = NONE
			bool success_17 = FALSE
			_16 = expr_for_arithmetic(TOKEN_SEQUENCE)
			if (!(_16.res))
			{
				return {}
			}
			else 
			{
				success_17 = TRUE
				_10 = _16
			}
		}
		else 
		{
			success_15 = TRUE
			_10 = _14
		}
	}
	else 
	{
		success_13 = TRUE
		_10 = _12
	}
	_10 += CURRENT_POS_SEQUENCE
	success_11 = TRUE
	pos++
	data = 
		right: _6
		op: _4
		left: _2
	;
}
Rule(expr_compare) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = expr_arithmetic(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	bool success_8 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "COMPARE_OP"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = expr_arithmetic(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
		success_8 = TRUE
	}
	if (!success_8)
	{
		return {}
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = 
		sequence: _6
		operators: _4
		first: _0
	;
}
Rule(expr_arithmetic) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = expr_for_arithmetic(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	bool success_8 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "OP"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = expr_for_arithmetic(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
		success_8 = TRUE
	}
	if (!success_8)
	{
		return {}
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = 
		sequence: _6
		operators: _4
		first: _0
	;
}
Rule(expr_for_arithmetic) {
	rule _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = expr_group(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = method_call(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			rule _6 = NONE
			bool success_7 = FALSE
			_6 = cll_function_call(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				rule _8 = NONE
				bool success_9 = FALSE
				_8 = any_data(TOKEN_SEQUENCE)
				if (!(_8.res))
				{
					return {}
				}
				else 
				{
					success_9 = TRUE
					_0 = _8
				}
			}
			else 
			{
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Rule(expr_group) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_40"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	rule _4 = NONE
	bool success_5 = FALSE
	_4 = cll_ternary(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = expr(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			return {}
		}
		else 
		{
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _8 = NONE
	bool success_9 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_41"))
	{
		return {}
	}
	_8 = CURRENT_TOKEN
	success_9 = TRUE
	pos++
	data = _4
}
Rule(expr_expr_copiable_method_call) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_42"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = copiable_method_call(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_43"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2
}
Rule(expr) {
	rule _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = expr_logical(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = expr_compare(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			rule _6 = NONE
			bool success_7 = FALSE
			_6 = expr_arithmetic(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				rule _8 = NONE
				bool success_9 = FALSE
				_8 = expr_group(TOKEN_SEQUENCE)
				if (!(_8.res))
				{
					rule _10 = NONE
					bool success_11 = FALSE
					_10 = expr_expr_copiable_method_call(TOKEN_SEQUENCE)
					if (!(_10.res))
					{
						rule _12 = NONE
						bool success_13 = FALSE
						_12 = cll_function_call(TOKEN_SEQUENCE)
						if (!(_12.res))
						{
							rule _14 = NONE
							bool success_15 = FALSE
							_14 = any_data(TOKEN_SEQUENCE)
							if (!(_14.res))
							{
								return {}
							}
							else 
							{
								success_15 = TRUE
								_0 = _14
							}
						}
						else 
						{
							success_13 = TRUE
							_0 = _12
						}
					}
					else 
					{
						success_11 = TRUE
						_0 = _10
					}
				}
				else 
				{
					success_9 = TRUE
					_0 = _8
				}
			}
			else 
			{
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _2
}
Rule(function_body_call) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_46"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = function_arguments(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_47"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2
}
Rule(function_body_decl) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_49"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = function_parameters(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_52"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2
}
Rule(function_arguments) {
	any _0 = NONE
	bool success_1 = FALSE
	do
	{
		any _2 = NONE
		bool success_3 = FALSE
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = any_data(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			token _6 = NONE
			bool success_7 = FALSE
			if (!(CURRENT_TOKEN == "ID"))
			{
				break
			}
			else 
			{
				_6 = CURRENT_TOKEN
				success_7 = TRUE
				_2 = _6
			}
		}
		else 
		{
			success_5 = TRUE
			_2 = _4
		}
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
	}	while(0)

	if (success_3)
	{
		success_1 = TRUE
	}
	skipspaces(TOKEN_SEQUENCE)
	if ((matched(%1
)))
	{
		str _8 = NONE
		bool success_9 = FALSE
		while (1)
		{
			str _10 = NONE
			bool success_11 = FALSE
			if (!(*pos == ','))
			{
				break
			}
			_10 += CURRENT_POS_SEQUENCE
			success_11 = TRUE
			pos++
			skipspaces(TOKEN_SEQUENCE)
			any _12 = NONE
			bool success_13 = FALSE
			rule _14 = NONE
			bool success_15 = FALSE
			_14 = any_data(TOKEN_SEQUENCE)
			if (!(_14.res))
			{
				token _16 = NONE
				bool success_17 = FALSE
				if (!(CURRENT_TOKEN == "ID"))
				{
					break
				}
				else 
				{
					_16 = CURRENT_TOKEN
					success_17 = TRUE
					_12 = _16
				}
			}
			else 
			{
				success_15 = TRUE
				_12 = _14
			}
			_12 += CURRENT_POS_SEQUENCE
			success_13 = TRUE
			pos++
		}
		if (success_13)
		{
			success_9 = TRUE
		}
		_8 += _10
		_8 += _12
		skipspaces(TOKEN_SEQUENCE)
	}
	data = [%1
,%3
,]
}
Rule(function_parameters) {
	token _0 = NONE
	bool success_1 = FALSE
	if (CURRENT_TOKEN == "ID")
	{
		_0 = CURRENT_TOKEN
		success_1 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	if ((matched(%1
)))
	{
		str _2 = NONE
		bool success_3 = FALSE
		while (1)
		{
			str _4 = NONE
			bool success_5 = FALSE
			if (!(*pos == ','))
			{
				break
			}
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			pos++
			skipspaces(TOKEN_SEQUENCE)
			token _6 = NONE
			bool success_7 = FALSE
			if (!(CURRENT_TOKEN == "ID"))
			{
				break
			}
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			pos++
		}
		if (success_7)
		{
			success_3 = TRUE
		}
		_2 += _4
		_2 += _6
		skipspaces(TOKEN_SEQUENCE)
	}
	data = [%1
,%3
,]
}
Rule(cll_function_call) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "ID"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = function_body_call(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	data = 
		body: _2
		name: _0
	;
}
Rule(loop_while) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_48"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = expr(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _4 = NONE
	bool success_5 = FALSE
	rule _6 = NONE
	bool success_7 = FALSE
	_6 = cll_block(TOKEN_SEQUENCE)
	if (!(_6.res))
	{
		rule _8 = NONE
		bool success_9 = FALSE
		_8 = cll_spaced_block(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			return {}
		}
		else 
		{
			success_9 = TRUE
			_4 = _8
		}
	}
	else 
	{
		success_7 = TRUE
		_4 = _6
	}
	_4 += CURRENT_POS_SEQUENCE
	success_5 = TRUE
	pos++
	data = 
		block: _6
		expr: _2
	;
}
Rule(loop_for) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = for(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_87"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _4 = NONE
	bool success_5 = FALSE
	do
	{
		rule _6 = NONE
		bool success_7 = FALSE
		rule _8 = NONE
		bool success_9 = FALSE
		_8 = expr(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			rule _10 = NONE
			bool success_11 = FALSE
			_10 = cll_var(TOKEN_SEQUENCE)
			if (!(_10.res))
			{
				break
			}
			else 
			{
				success_11 = TRUE
				_6 = _10
			}
		}
		else 
		{
			success_9 = TRUE
			_6 = _8
		}
		_6 += CURRENT_POS_SEQUENCE
		success_7 = TRUE
		pos++
	}	while(0)

	if (success_7)
	{
		success_5 = TRUE
	}
	_4 = _6
	skipspaces(TOKEN_SEQUENCE)
	token _12 = NONE
	bool success_13 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_51"))
	{
		return {}
	}
	_12 = CURRENT_TOKEN
	success_13 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _14 = NONE
	bool success_15 = FALSE
	_14 = expr(TOKEN_SEQUENCE)
	if (_14.res)
	{
		success_15 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	token _16 = NONE
	bool success_17 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_68"))
	{
		return {}
	}
	_16 = CURRENT_TOKEN
	success_17 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _18 = NONE
	bool success_19 = FALSE
	_18 = expr(TOKEN_SEQUENCE)
	if (_18.res)
	{
		success_19 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	token _20 = NONE
	bool success_21 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_88"))
	{
		return {}
	}
	_20 = CURRENT_TOKEN
	success_21 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _22 = NONE
	bool success_23 = FALSE
	rule _24 = NONE
	bool success_25 = FALSE
	_24 = cll_block(TOKEN_SEQUENCE)
	if (!(_24.res))
	{
		rule _26 = NONE
		bool success_27 = FALSE
		_26 = cll_spaced_block(TOKEN_SEQUENCE)
		if (!(_26.res))
		{
			return {}
		}
		else 
		{
			success_27 = TRUE
			_22 = _26
		}
	}
	else 
	{
		success_25 = TRUE
		_22 = _24
	}
	_22 += CURRENT_POS_SEQUENCE
	success_23 = TRUE
	pos++
	data = 
		block: _16
		end: _12
		cond: _6
		decl: _8
	;
}
Rule(method_call) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "ID"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	bool success_8 = FALSE
	while (1)
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_80"))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = cll_function_call(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
		success_8 = TRUE
	}
	if (!success_8)
	{
		return {}
	}
	if (success_7)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	data = 
		call: _6
		object: _0
	;
}
Rule(copiable_method_call) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_54"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = method_call(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	data = _2
}
Rule(var_refer) {
	any pre = matched($1
)
	any post = matched($3
)
	token _0 = NONE
	bool success_1 = FALSE
	do
	{
		token _2 = NONE
		bool success_3 = FALSE
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_59"))
		{
			token _6 = NONE
			bool success_7 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_60"))
			{
				break
			}
			else 
			{
				_6 = CURRENT_TOKEN
				success_7 = TRUE
				_2 = _6
			}
		}
		else 
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			_2 = _4
		}
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
	}	while(0)

	if (success_3)
	{
		success_1 = TRUE
	}
	_0 = _2
	skipspaces(TOKEN_SEQUENCE)
	token _8 = NONE
	bool success_9 = FALSE
	if (!(CURRENT_TOKEN == "ID"))
	{
		return {}
	}
	_8 = CURRENT_TOKEN
	success_9 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _10 = NONE
	bool success_11 = FALSE
	do
	{
		token _12 = NONE
		bool success_13 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_61"))
		{
			break
		}
		_12 = CURRENT_TOKEN
		success_13 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _14 = NONE
		bool success_15 = FALSE
		_14 = expr(TOKEN_SEQUENCE)
		if (!(_14.res))
		{
			break
		}
		success_15 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		token _16 = NONE
		bool success_17 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_63"))
		{
			break
		}
		_16 = CURRENT_TOKEN
		success_17 = TRUE
		pos++
	}	while(0)

	if (success_17)
	{
		success_11 = TRUE
	}
	_10 += _12
	_10 += _14
	_10 += _16
	skipspaces(TOKEN_SEQUENCE)
	token _18 = NONE
	bool success_19 = FALSE
	do
	{
		token _20 = NONE
		bool success_21 = FALSE
		token _22 = NONE
		bool success_23 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_59"))
		{
			token _24 = NONE
			bool success_25 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_60"))
			{
				break
			}
			else 
			{
				_24 = CURRENT_TOKEN
				success_25 = TRUE
				_20 = _24
			}
		}
		else 
		{
			_22 = CURRENT_TOKEN
			success_23 = TRUE
			_20 = _22
		}
		_20 += CURRENT_POS_SEQUENCE
		success_21 = TRUE
		pos++
	}	while(0)

	if (success_21)
	{
		success_19 = TRUE
	}
	_18 = _20
	data = 
		post: post
		pre: pre
		brace_expression: _14
		name: _4
	;
}
Rule(cll_var) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = cll_type(TOKEN_SEQUENCE)
	if (_0.res)
	{
		success_1 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "ID"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _4 = NONE
	bool success_5 = FALSE
	do
	{
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = assignment_op(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			break
		}
		success_7 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _8 = NONE
		bool success_9 = FALSE
		rule _10 = NONE
		bool success_11 = FALSE
		_10 = expr(TOKEN_SEQUENCE)
		if (!(_10.res))
		{
			rule _12 = NONE
			bool success_13 = FALSE
			_12 = cll_ternary(TOKEN_SEQUENCE)
			if (!(_12.res))
			{
				break
			}
			else 
			{
				success_13 = TRUE
				_8 = _12
			}
		}
		else 
		{
			success_11 = TRUE
			_8 = _10
		}
		_8 += CURRENT_POS_SEQUENCE
		success_9 = TRUE
		pos++
	}	while(0)

	if (success_9)
	{
		success_5 = TRUE
	}
	_4 += _6
	_4 += _8
	data = 
		value: _10
		operator: _6
		id: _2
		type: _0
	;
}
Token(STRING) {
	data = $2

	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	do
	{
		str _4 = NONE
		bool success_5 = FALSE
		if (!(*pos == '\''))
		{
			break
		}
		_4 += CURRENT_POS_SEQUENCE
		success_5 = TRUE
		pos++
		skipspaces(pos)
		any _6 = NONE
		bool success_7 = FALSE
		while (1)
		{
			any _8 = NONE
			bool success_9 = FALSE
			str _10 = NONE
			bool success_11 = FALSE
			if (!(!STRNCMP(pos, "\\'")))
			{
				str _12 = NONE
				bool success_13 = FALSE
				if (!(!(*pos == '\'')))
				{
					break
				}
				else 
				{
					_12 += CURRENT_POS_SEQUENCE
					success_13 = TRUE
					_8 = _12
				}
			}
			else 
			{
				_10 += CURRENT_POS_SEQUENCE
				success_11 = TRUE
				_8 = _10
			}
			_8 += CURRENT_POS_SEQUENCE
			success_9 = TRUE
			pos++
		}
		if (success_9)
		{
			success_7 = TRUE
		}
		skipspaces(pos)
		str _14 = NONE
		bool success_15 = FALSE
		if (!(*pos == '\''))
		{
			break
		}
		_14 += CURRENT_POS_SEQUENCE
		success_15 = TRUE
		pos++
	}	while(0)

	if (success_15)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	_2 += _14
	if (!success_3)
	{
		str _16 = NONE
		bool success_17 = FALSE
		do
		{
			str _18 = NONE
			bool success_19 = FALSE
			if (!(*pos == '"'))
			{
				break
			}
			_18 += CURRENT_POS_SEQUENCE
			success_19 = TRUE
			pos++
			skipspaces(pos)
			any _20 = NONE
			bool success_21 = FALSE
			while (1)
			{
				any _22 = NONE
				bool success_23 = FALSE
				str _24 = NONE
				bool success_25 = FALSE
				if (!(!STRNCMP(pos, "\\"")))
				{
					str _26 = NONE
					bool success_27 = FALSE
					if (!(!(*pos == '"')))
					{
						break
					}
					else 
					{
						_26 += CURRENT_POS_SEQUENCE
						success_27 = TRUE
						_22 = _26
					}
				}
				else 
				{
					_24 += CURRENT_POS_SEQUENCE
					success_25 = TRUE
					_22 = _24
				}
				_22 += CURRENT_POS_SEQUENCE
				success_23 = TRUE
				pos++
			}
			if (success_23)
			{
				success_21 = TRUE
			}
			skipspaces(pos)
			str _28 = NONE
			bool success_29 = FALSE
			if (!(*pos == '"'))
			{
				break
			}
			_28 += CURRENT_POS_SEQUENCE
			success_29 = TRUE
			pos++
		}		while(0)

		if (success_29)
		{
			success_17 = TRUE
		}
		_16 += _18
		_16 += _20
		_16 += _28
		if (!success_17)
		{
			return {}
		}
		else 
		{
			_0 = _16
		}
	}
	else 
	{
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Token(NUMBER) {
	char sign = %0

	str main = $1

	num main_n = NUMBER(main)
	char point = $2>%1

	str dec = $2>%1

	num dec_n = NUMBER(dec)
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '+' || *pos == '-'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	skipspaces(pos)
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	do
	{
		str _6 = NONE
		bool success_7 = FALSE
		array shadow_8 = NONE
		bool success_9 = FALSE
		while ((*pos>='0' && *pos<='9'))
		{
			_6 += CURRENT_POS_SEQUENCE
			success_7 = TRUE
			pos++
			shadow_8.push(_6)
			success_9 = TRUE
		}
		if (!success_9)
		{
			break
		}
	}	while(0)

	if (success_7)
	{
		success_5 = TRUE
	}
	_4 += _6
	if (!success_5)
	{
		str _10 = NONE
		bool success_11 = FALSE
		do
		{
			str _12 = NONE
			bool success_13 = FALSE
			if (!(*pos == '.' || *pos == ','))
			{
				break
			}
			_12 += CURRENT_POS_SEQUENCE
			success_13 = TRUE
			pos++
			skipspaces(pos)
			str _14 = NONE
			bool success_15 = FALSE
			array shadow_16 = NONE
			bool success_17 = FALSE
			while ((*pos>='0' && *pos<='9'))
			{
				_14 += CURRENT_POS_SEQUENCE
				success_15 = TRUE
				pos++
				shadow_16.push(_14)
				success_17 = TRUE
			}
			if (!success_17)
			{
				break
			}
		}		while(0)

		if (success_15)
		{
			success_11 = TRUE
		}
		_10 += _12
		_10 += _14
		if (!success_11)
		{
			return {}
		}
		else 
		{
			_2 = _10
		}
	}
	else 
	{
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	data = 
		full: main+point+dec
		dec_n: dec_n
		dec: dec
		main_n: main_n
		main: main
		sign: sign
	;
}
Token(BOOLEAN) {
	str d = NONE
	bool success_0 = FALSE
	str _1 = NONE
	bool success_2 = FALSE
	str _3 = NONE
	bool success_4 = FALSE
	if (!(!STRNCMP(pos, "true")))
	{
		str _5 = NONE
		bool success_6 = FALSE
		if (!(!STRNCMP(pos, "false")))
		{
			return {}
		}
		else 
		{
			_5 += CURRENT_POS_SEQUENCE
			success_6 = TRUE
			_1 = _5
		}
	}
	else 
	{
		_3 += CURRENT_POS_SEQUENCE
		success_4 = TRUE
		_1 = _3
	}
	_1 += CURRENT_POS_SEQUENCE
	success_2 = TRUE
	pos++
	if (success_2)
	{
		success_0 = TRUE
	}
	d += _1
	data = 
		lit: d
	;
}
Rule(array) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_89"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	do
	{
		str _4 = NONE
		bool success_5 = FALSE
		while (1)
		{
			rule _6 = NONE
			bool success_7 = FALSE
			_6 = any_data(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				break
			}
			success_7 = TRUE
			pos++
			skipspaces(TOKEN_SEQUENCE)
			token _8 = NONE
			bool success_9 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_66"))
			{
				break
			}
			_8 = CURRENT_TOKEN
			success_9 = TRUE
			pos++
		}
		if (success_9)
		{
			success_5 = TRUE
		}
		_4 += _6
		_4 += _8
	}	while(0)

	if (success_5)
	{
		success_3 = TRUE
	}
	_2 += _4
	skipspaces(TOKEN_SEQUENCE)
	token _10 = NONE
	bool success_11 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_91"))
	{
		return {}
	}
	_10 = CURRENT_TOKEN
	success_11 = TRUE
	pos++
	data = _8
}
Rule(object) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_64"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _2 = NONE
	bool success_3 = FALSE
	do
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = any_data(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			break
		}
		success_5 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_67"))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _8 = NONE
		bool success_9 = FALSE
		_8 = any_data(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			break
		}
		success_9 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		str _10 = NONE
		bool success_11 = FALSE
		while (1)
		{
			token _12 = NONE
			bool success_13 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_77"))
			{
				break
			}
			_12 = CURRENT_TOKEN
			success_13 = TRUE
			pos++
			skipspaces(TOKEN_SEQUENCE)
			token _14 = NONE
			bool success_15 = FALSE
			if (!(CURRENT_TOKEN == "ID"))
			{
				break
			}
			_14 = CURRENT_TOKEN
			success_15 = TRUE
			pos++
			skipspaces(TOKEN_SEQUENCE)
			token _16 = NONE
			bool success_17 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_78"))
			{
				break
			}
			_16 = CURRENT_TOKEN
			success_17 = TRUE
			pos++
			skipspaces(TOKEN_SEQUENCE)
			rule _18 = NONE
			bool success_19 = FALSE
			_18 = any_data(TOKEN_SEQUENCE)
			if (!(_18.res))
			{
				break
			}
			success_19 = TRUE
			pos++
		}
		if (success_19)
		{
			success_11 = TRUE
		}
		_10 += _12
		_10 += _14
		_10 += _16
		_10 += _18
		skipspaces(TOKEN_SEQUENCE)
		token _20 = NONE
		bool success_21 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_102"))
		{
			break
		}
		_20 = CURRENT_TOKEN
		success_21 = TRUE
		pos++
	}	while(0)

	if (success_21)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _6
	_2 += _8
	_2 += _10
	_2 += _20
	skipspaces(TOKEN_SEQUENCE)
	token _22 = NONE
	bool success_23 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_69"))
	{
		return {}
	}
	_22 = CURRENT_TOKEN
	success_23 = TRUE
	pos++
	data = 
		values: _18
		keys: _14
		value: _8
		key: _4
	;
}
Rule(any_data) {
	data = %1

	any _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "BOOLEAN"))
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "NUMBER"))
		{
			token _6 = NONE
			bool success_7 = FALSE
			if (!(CURRENT_TOKEN == "STRING"))
			{
				token _8 = NONE
				bool success_9 = FALSE
				if (!(CURRENT_TOKEN == "ID"))
				{
					rule _10 = NONE
					bool success_11 = FALSE
					_10 = array(TOKEN_SEQUENCE)
					if (!(_10.res))
					{
						rule _12 = NONE
						bool success_13 = FALSE
						_12 = object(TOKEN_SEQUENCE)
						if (!(_12.res))
						{
							rule _14 = NONE
							bool success_15 = FALSE
							_14 = accessor(TOKEN_SEQUENCE)
							if (!(_14.res))
							{
								return {}
							}
							else 
							{
								success_15 = TRUE
								_0 = _14
							}
						}
						else 
						{
							success_13 = TRUE
							_0 = _12
						}
					}
					else 
					{
						success_11 = TRUE
						_0 = _10
					}
				}
				else 
				{
					_8 = CURRENT_TOKEN
					success_9 = TRUE
					_0 = _8
				}
			}
			else 
			{
				_6 = CURRENT_TOKEN
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Token(END) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ';' || *pos == '\n'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Token(NEWLINE) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '\n'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Token(ID) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	while ((*pos>='0' && *pos<='9'))
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
	}
	skipspaces(pos)
	str _5 = NONE
	bool success_6 = FALSE
	if (!((*pos>='a' && *pos<='z') || (*pos>='A' && *pos<='Z') || *pos == '_'))
	{
		return {}
	}
	_5 += CURRENT_POS_SEQUENCE
	success_6 = TRUE
	pos++
	skipspaces(pos)
	str _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	while ((*pos>='a' && *pos<='z') || (*pos>='A' && *pos<='Z') || (*pos>='0' && *pos<='9') || *pos == '_')
	{
		_7 += CURRENT_POS_SEQUENCE
		success_8 = TRUE
		pos++
		shadow_9.push(_7)
	}
	if (success_8)
	{
		success_1 = TRUE
	}
	_0 += _2
	_0 += _5
	_0 += _7
	data = _0
}
Rule(spacemode) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_70"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_71"))
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_72"))
		{
			token _8 = NONE
			bool success_9 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_73"))
			{
				return {}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	data = _0
}
Rule(linear_comment) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_74"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	while (CURRENT_TOKEN == "AUTO_75")
	{
		_2 += CURRENT_TOKEN
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
	}
}
Rule(main) {
	rule _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = use(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		rule _4 = NONE
		bool success_5 = FALSE
		_4 = Rule(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			rule _6 = NONE
			bool success_7 = FALSE
			_6 = spacemode(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				return {}
			}
			else 
			{
				success_7 = TRUE
				_0 = _6
			}
		}
		else 
		{
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Rule(use_unit) {
	rule _0 = NONE
	bool success_1 = FALSE
	_0 = id(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = any_data(TOKEN_SEQUENCE)
	if (_2.res)
	{
		success_3 = TRUE
		pos++
	}
	data = 
		value: _2
		name: _0
	;
}
Rule(use) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_76"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _2 = NONE
	bool success_3 = FALSE
	_2 = use_unit(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _4 = NONE
	bool success_5 = FALSE
	while (1)
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_77"))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		rule _8 = NONE
		bool success_9 = FALSE
		_8 = _unit(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			break
		}
		success_9 = TRUE
		pos++
	}
	if (success_9)
	{
		success_5 = TRUE
	}
	_4 += _6
	_4 += _8
	data = 
		second: _8
		first: _2
	;
}
Rule(Rule_rule) {
	any _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	do
	{
		any _4 = NONE
		bool success_5 = FALSE
		any _6 = NONE
		bool success_7 = FALSE
		rule _8 = NONE
		bool success_9 = FALSE
		_8 = Rule_group(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			rule _10 = NONE
			bool success_11 = FALSE
			_10 = Rule_csequence(TOKEN_SEQUENCE)
			if (!(_10.res))
			{
				token _12 = NONE
				bool success_13 = FALSE
				if (!(CURRENT_TOKEN == "STRING"))
				{
					rule _14 = NONE
					bool success_15 = FALSE
					_14 = accessor(TOKEN_SEQUENCE)
					if (!(_14.res))
					{
						rule _16 = NONE
						bool success_17 = FALSE
						_16 = Rule_hex(TOKEN_SEQUENCE)
						if (!(_16.res))
						{
							rule _18 = NONE
							bool success_19 = FALSE
							_18 = Rule_bin(TOKEN_SEQUENCE)
							if (!(_18.res))
							{
								rule _20 = NONE
								bool success_21 = FALSE
								_20 = Rule_other(TOKEN_SEQUENCE)
								if (!(_20.res))
								{
									break
								}
								else 
								{
									success_21 = TRUE
									_6 = _20
								}
							}
							else 
							{
								success_19 = TRUE
								_6 = _18
							}
						}
						else 
						{
							success_17 = TRUE
							_6 = _16
						}
					}
					else 
					{
						success_15 = TRUE
						_6 = _14
					}
				}
				else 
				{
					_12 = CURRENT_TOKEN
					success_13 = TRUE
					_6 = _12
				}
			}
			else 
			{
				success_11 = TRUE
				_6 = _10
			}
		}
		else 
		{
			success_9 = TRUE
			_6 = _8
		}
		_6 += CURRENT_POS_SEQUENCE
		success_7 = TRUE
		pos++
		if (success_7)
		{
			success_5 = TRUE
		}
		skipspaces(TOKEN_SEQUENCE)
		rule _22 = NONE
		bool success_23 = FALSE
		_22 = Rule_qualifier(TOKEN_SEQUENCE)
		if (_22.res)
		{
			success_23 = TRUE
			pos++
		}
	}	while(0)

	if (success_23)
	{
		success_3 = TRUE
	}
	_2 += _4
	_2 += _22
	if (!success_3)
	{
		rule _24 = NONE
		bool success_25 = FALSE
		_24 = Rule_rule_escaped(TOKEN_SEQUENCE)
		if (!(_24.res))
		{
			rule _26 = NONE
			bool success_27 = FALSE
			_26 = Rule_rule_any(TOKEN_SEQUENCE)
			if (!(_26.res))
			{
				rule _28 = NONE
				bool success_29 = FALSE
				_28 = Rule_rule_op(TOKEN_SEQUENCE)
				if (!(_28.res))
				{
					rule _30 = NONE
					bool success_31 = FALSE
					_30 = cll(TOKEN_SEQUENCE)
					if (!(_30.res))
					{
						rule _32 = NONE
						bool success_33 = FALSE
						_32 = linear_comment(TOKEN_SEQUENCE)
						if (!(_32.res))
						{
							return {}
						}
						else 
						{
							success_33 = TRUE
							_0 = _32
						}
					}
					else 
					{
						success_31 = TRUE
						_0 = _30
					}
				}
				else 
				{
					success_29 = TRUE
					_0 = _28
				}
			}
			else 
			{
				success_27 = TRUE
				_0 = _26
			}
		}
		else 
		{
			success_25 = TRUE
			_0 = _24
		}
	}
	else 
	{
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = 
		qualifier: _10
		val: _8
	;
}
Rule(Rule_other) {
	token _0 = NONE
	bool success_1 = FALSE
	if (CURRENT_TOKEN == "AUTO_79")
	{
		_0 = CURRENT_TOKEN
		success_1 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "ID"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	str _4 = NONE
	bool success_5 = FALSE
	while (1)
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_80"))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		token _8 = NONE
		bool success_9 = FALSE
		if (!(CURRENT_TOKEN == "ID"))
		{
			break
		}
		_8 = CURRENT_TOKEN
		success_9 = TRUE
		pos++
	}
	if (success_9)
	{
		success_5 = TRUE
	}
	_4 += _6
	_4 += _8
	data = 
		nested_name: _8
		name: _2
		is_nested: matched(%1
)
	;
}
Rule(Rule_op) {
	data = $1

	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_81"))
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_82"))
		{
			return {}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	if (success_3)
	{
		success_1 = TRUE
	}
	_0 = _2
}
Rule(Rule_qualifier) {
	data = $1

	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_83"))
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_84"))
		{
			token _8 = NONE
			bool success_9 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_85"))
			{
				return {}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	if (success_3)
	{
		success_1 = TRUE
	}
	_0 = _2
}
Rule(Rule_group) {
	any name = $0>%1

	any r = %4

	str _0 = NONE
	bool success_1 = FALSE
	do
	{
		token _2 = NONE
		bool success_3 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_86"))
		{
			break
		}
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		pos++
		skipspaces(TOKEN_SEQUENCE)
		any _4 = NONE
		bool success_5 = FALSE
		rule _6 = NONE
		bool success_7 = FALSE
		_6 = method_call(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			token _8 = NONE
			bool success_9 = FALSE
			if (!(CURRENT_TOKEN == "ID"))
			{
				break
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				_4 = _8
			}
		}
		else 
		{
			success_7 = TRUE
			_4 = _6
		}
		_4 += CURRENT_POS_SEQUENCE
		success_5 = TRUE
		pos++
	}	while(0)

	if (success_5)
	{
		success_1 = TRUE
	}
	_0 += _2
	_0 += _4
	skipspaces(TOKEN_SEQUENCE)
	token _10 = NONE
	bool success_11 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_87"))
	{
		return {}
	}
	_10 = CURRENT_TOKEN
	success_11 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _12 = NONE
	bool success_13 = FALSE
	_12 = rule(TOKEN_SEQUENCE)
	array shadow_14 = NONE
	while (_12.res)
	{
		success_13 = TRUE
		pos++
		shadow_14.push(_12)
	}
	skipspaces(TOKEN_SEQUENCE)
	token _15 = NONE
	bool success_16 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_88"))
	{
		return {}
	}
	_15 = CURRENT_TOKEN
	success_16 = TRUE
	pos++
	data = 
		val: r
		variable: name
	;
}
Rule(Rule_csequence_symbol) {
	data = $1

	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_92"))
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_93"))
		{
			token _8 = NONE
			bool success_9 = FALSE
			if (!(CURRENT_TOKEN == "AUTO_94"))
			{
				return {}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	if (success_3)
	{
		success_1 = TRUE
	}
	_0 = _2
}
Rule(Rule_csequence_escape) {
	data = $1

	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_95"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_96"))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	pos++
	if (success_7)
	{
		success_5 = TRUE
	}
	_4 = _6
}
Rule(Rule_csequence_diapason) {
	str _0 = NONE
	bool success_1 = FALSE
	rule from = NONE
	bool success_2 = FALSE
	rule _3 = NONE
	bool success_4 = FALSE
	_3 = Rule_csequence_symbol(TOKEN_SEQUENCE)
	if (!(_3.res))
	{
		return {}
	}
	success_4 = TRUE
	pos++
	if (success_4)
	{
		success_2 = TRUE
	}
	from = _3
	token _7 = NONE
	bool success_8 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_97"))
	{
		return {}
	}
	_7 = CURRENT_TOKEN
	success_8 = TRUE
	pos++
	rule to = NONE
	bool success_11 = FALSE
	rule _12 = NONE
	bool success_13 = FALSE
	_12 = Rule_csequence_symbol(TOKEN_SEQUENCE)
	if (!(_12.res))
	{
		return {}
	}
	success_13 = TRUE
	pos++
	if (success_13)
	{
		success_11 = TRUE
	}
	to = _12
	if (success_11)
	{
		success_1 = TRUE
	}
	_0 += from
	_0 += _5
	_0 += _7
	_0 += _9
	_0 += to
	data = [from,to,]
}
Rule(Rule_csequence) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_89"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	if (CURRENT_TOKEN == "AUTO_90")
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	rule dt = NONE
	bool success_4 = FALSE
	while (1)
	{
		rule _5 = NONE
		bool success_6 = FALSE
		rule _7 = NONE
		bool success_8 = FALSE
		_7 = _escape(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			rule _9 = NONE
			bool success_10 = FALSE
			_9 = _symbol(TOKEN_SEQUENCE)
			if (!(_9.res))
			{
				rule _11 = NONE
				bool success_12 = FALSE
				_11 = _diapason(TOKEN_SEQUENCE)
				if (!(_11.res))
				{
					break
				}
				else 
				{
					success_12 = TRUE
					_5 = _11
				}
			}
			else 
			{
				success_10 = TRUE
				_5 = _9
			}
		}
		else 
		{
			success_8 = TRUE
			_5 = _7
		}
		_5 += CURRENT_POS_SEQUENCE
		success_6 = TRUE
		pos++
	}
	if (success_6)
	{
		success_4 = TRUE
	}
	dt = _5
	skipspaces(TOKEN_SEQUENCE)
	token _13 = NONE
	bool success_14 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_91"))
	{
		return {}
	}
	_13 = CURRENT_TOKEN
	success_14 = TRUE
	pos++
	data = 
		val: dt
		not: matched(%2
)
	;
}
Rule(Rule_any) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_98"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
}
Rule(Rule_data_block_inclosed_map) {
	rule data = NONE
	bool success_0 = FALSE
	rule _1 = NONE
	bool success_2 = FALSE
	_1 = Rule_data_block_key(TOKEN_SEQUENCE)
	array shadow_3 = NONE
	bool success_4 = FALSE
	while (_1.res)
	{
		success_2 = TRUE
		pos++
		shadow_3.push(_1)
		success_4 = TRUE
	}
	if (!success_4)
	{
		return {}
	}
	if (success_2)
	{
		success_0 = TRUE
	}
	data = _1
}
Rule(Rule_data_block_key) {
	token _0 = NONE
	bool success_1 = FALSE
	array shadow_2 = NONE
	bool success_3 = FALSE
	while (CURRENT_TOKEN == "AUTO_103")
	{
		_0 += CURRENT_TOKEN
		success_1 = TRUE
		pos++
		shadow_2.push(_0)
		success_3 = TRUE
	}
	if (!success_3)
	{
		return {}
	}
	skipspaces(TOKEN_SEQUENCE)
	rule name = NONE
	bool success_4 = FALSE
	rule _5 = NONE
	bool success_6 = FALSE
	_5 = id(TOKEN_SEQUENCE)
	if (!(_5.res))
	{
		return {}
	}
	success_6 = TRUE
	pos++
	if (success_6)
	{
		success_4 = TRUE
	}
	name = _5
	skipspaces(TOKEN_SEQUENCE)
	token _7 = NONE
	bool success_8 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_104"))
	{
		return {}
	}
	_7 = CURRENT_TOKEN
	success_8 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule dt = NONE
	bool success_9 = FALSE
	rule _10 = NONE
	bool success_11 = FALSE
	rule _12 = NONE
	bool success_13 = FALSE
	_12 = cll_ternary(TOKEN_SEQUENCE)
	if (!(_12.res))
	{
		rule _14 = NONE
		bool success_15 = FALSE
		_14 = expr(TOKEN_SEQUENCE)
		if (!(_14.res))
		{
			return {}
		}
		else 
		{
			success_15 = TRUE
			_10 = _14
		}
	}
	else 
	{
		success_13 = TRUE
		_10 = _12
	}
	_10 += CURRENT_POS_SEQUENCE
	success_11 = TRUE
	pos++
	if (success_11)
	{
		success_9 = TRUE
	}
	dt = _10
	data = 
		val: dt
		name: name
	;
}
Rule(Rule_data_block) {
	token _0 = NONE
	bool success_1 = FALSE
	array shadow_2 = NONE
	bool success_3 = FALSE
	while (CURRENT_TOKEN == "AUTO_99")
	{
		_0 += CURRENT_TOKEN
		success_1 = TRUE
		pos++
		shadow_2.push(_0)
		success_3 = TRUE
	}
	if (!success_3)
	{
		return {}
	}
	skipspaces(TOKEN_SEQUENCE)
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_100"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _6 = NONE
	bool success_7 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_101"))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule data = NONE
	bool success_8 = FALSE
	rule _9 = NONE
	bool success_10 = FALSE
	rule _11 = NONE
	bool success_12 = FALSE
	_11 = any_data(TOKEN_SEQUENCE)
	if (!(_11.res))
	{
		rule _13 = NONE
		bool success_14 = FALSE
		_13 = _inclosed_map(TOKEN_SEQUENCE)
		if (!(_13.res))
		{
			return {}
		}
		else 
		{
			success_14 = TRUE
			_9 = _13
		}
	}
	else 
	{
		success_12 = TRUE
		_9 = _11
	}
	_9 += CURRENT_POS_SEQUENCE
	success_10 = TRUE
	pos++
	if (success_10)
	{
		success_8 = TRUE
	}
	data = _9
	skipspaces(TOKEN_SEQUENCE)
	token _15 = NONE
	bool success_16 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_102"))
	{
		return {}
	}
	_15 = CURRENT_TOKEN
	success_16 = TRUE
	pos++
}
Rule(Rule_escaped) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_105"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_106"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	token _8 = NONE
	bool success_9 = FALSE
	if (CURRENT_TOKEN == "NUMBER")
	{
		_8 = CURRENT_TOKEN
		success_9 = TRUE
		pos++
	}
	data = 
		num: _4
		c: _2
	;
}
Rule(Rule_nested_rule) {
	token _0 = NONE
	bool success_1 = FALSE
	array shadow_2 = NONE
	bool success_3 = FALSE
	while (CURRENT_TOKEN == "AUTO_107")
	{
		_0 += CURRENT_TOKEN
		success_1 = TRUE
		pos++
		shadow_2.push(_0)
		success_3 = TRUE
	}
	if (!success_3)
	{
		return {}
	}
	skipspaces(TOKEN_SEQUENCE)
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_108"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	rule _8 = NONE
	bool success_9 = FALSE
	_8 = Rule(TOKEN_SEQUENCE)
	if (!(_8.res))
	{
		return {}
	}
	success_9 = TRUE
	pos++
	data = _6
}
Rule(Rule_hex) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_109"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	bool success_5 = FALSE
	while (CURRENT_TOKEN == "AUTO_110")
	{
		_2 += CURRENT_TOKEN
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
		success_5 = TRUE
	}
	if (!success_5)
	{
		return {}
	}
	data = _2
}
Rule(Rule_bin) {
	token _0 = NONE
	bool success_1 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_111"))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	bool success_5 = FALSE
	while (CURRENT_TOKEN == "AUTO_112")
	{
		_2 += CURRENT_TOKEN
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
		success_5 = TRUE
	}
	if (!success_5)
	{
		return {}
	}
	data = _2
}
Rule(Rule) {
	any name = %1

	any rule = %3

	any data_block = %4

	any nested_rules = %5

	str rule_begin = NONE
	bool success_0 = FALSE
	token _1 = NONE
	bool success_2 = FALSE
	if (!(CURRENT_TOKEN == "ID"))
	{
		return {}
	}
	_1 = CURRENT_TOKEN
	success_2 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _3 = NONE
	bool success_4 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_101"))
	{
		return {}
	}
	_3 = CURRENT_TOKEN
	success_4 = TRUE
	pos++
	if (success_4)
	{
		success_0 = TRUE
	}
	rule_begin += _1
	rule_begin += _3
	skipspaces(TOKEN_SEQUENCE)
	rule _5 = NONE
	bool success_6 = FALSE
	_5 = function_body_decl(TOKEN_SEQUENCE)
	if (_5.res)
	{
		success_6 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	rule _7 = NONE
	bool success_8 = FALSE
	while (1)
	{
		rule _9 = NONE
		bool success_10 = FALSE
		_9 = _rule(TOKEN_SEQUENCE)
		if (!(_9.res))
		{
			break
		}
		success_10 = TRUE
		pos++
	}
	if (success_10)
	{
		success_8 = TRUE
	}
	_7 = _9
	skipspaces(TOKEN_SEQUENCE)
	rule _11 = NONE
	bool success_12 = FALSE
	_11 = Rule_data_block(TOKEN_SEQUENCE)
	if (!(_11.res))
	{
		return {}
	}
	success_12 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	rule _13 = NONE
	bool success_14 = FALSE
	_13 = Rule_nested_rule(TOKEN_SEQUENCE)
	array shadow_15 = NONE
	while (_13.res)
	{
		success_14 = TRUE
		pos++
		shadow_15.push(_13)
	}
	skipspaces(TOKEN_SEQUENCE)
	token _16 = NONE
	bool success_17 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_50"))
	{
		return {}
	}
	_16 = CURRENT_TOKEN
	success_17 = TRUE
	pos++
	data = 
		nestedRules: nested_rules
		data_block: data_block
		rule: rule
		name: name
	;
}
Token(AUTO_1) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '%'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_3) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '>'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_4) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '$'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_14) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "unsigned")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_15) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "char")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_16) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "short")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_17) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "int")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_18) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "long")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_19) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "long long")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_20) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "float")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_21) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "double")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_22) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "deque")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_23) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "vector")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_24) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "queue")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_25) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "stack")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_26) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "list")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_27) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "forward_list")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_28) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "var")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_29) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "any")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_30) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "num")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_31) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "bool")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_32) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "str")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_33) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "arr")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_34) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "obj")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_35) {
	str _0 = NONE
	bool success_1 = FALSE
	if (*pos != ' ')
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_36) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "if")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_48) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "while")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_54) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '='))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_59) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "++")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_60) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "--")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_64) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '{'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_69) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '}'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_70) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "spacemode")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_71) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "mixed")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_72) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "skipped")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_73) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "allowed")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_74) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "//")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_75) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!(*pos == '\n')))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_76) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "use")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_77) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ','))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_81) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '|'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_82) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "|&")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_83) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '?'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_84) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '+'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_85) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '*'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_86) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '&'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_87) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '('))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_88) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ')'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_89) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '['))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_90) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '^'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_91) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ']'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_93) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "\\]")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_94) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!(*pos == ']')))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_97) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '-'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_98) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '.'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_100) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "data")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_102) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ';'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_103) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '\n' || *pos == '\r'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_104) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ':'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_105) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "\\")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_106) {
	UNDEF _0 = NONE
	bool success_1 = FALSE
	if (*pos == '\0')
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_107) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '\r' || *pos == '\n'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_108) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '#'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_109) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "0x")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_110) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!((*pos>='1' && *pos<='9') || (*pos>='A' && *pos<='F') || (*pos>='a' && *pos<='f')))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_111) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "0b")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
Token(AUTO_112) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '0' || *pos == '1'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0
}
