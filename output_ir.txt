Rule(accessor_group) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == AUTO_4))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == NUMBER))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2 # token
}
Rule(accessor_element) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == AUTO_1))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == NUMBER))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2 # token
}
Rule(accessor_char) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == AUTO_87))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == NUMBER))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2 # token
}
Rule(accessor_all) {
	rule _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	_2 = accessor_group(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		_4 = accessor_element(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			_6 = accessor_char(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				return {}
			}
			else 
			{
				success_7 = TRUE
				pos += _6.token.length()
				_0 = _6.token
			}
		}
		else 
		{
			success_5 = TRUE
			pos += _4.token.length()
			_0 = _4.token
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
	data = _0 # rule
}
Rule(accessor) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	array shadow_6 = NONE
	Rule_result _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	_0 = accessor_all(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos += _0.token.length()
	skipspaces(TOKEN_SEQUENCE)
	auto begin_10 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_3))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		shadow_6.push(_4)
		skipspaces(TOKEN_SEQUENCE)
		_7 = accessor_all(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			break
		}
		success_8 = TRUE
		begin_10 += _7.token.length()
		shadow_9.push(_7.token)
	}
	if (success_5 && success_8)
	{
		success_3 = TRUE
		pos = begin_10
	}
	data = 
		second: shadow_9 # array
		first: _0.token # rule
	;
}
Rule(cll) {
	token _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	bool success_34 = FALSE
	array _4 = NONE
	bool success_5 = FALSE
	array _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	array shadow_10 = NONE
	Rule_result _11 = NONE
	bool success_12 = FALSE
	array shadow_13 = NONE
	Rule_result _14 = NONE
	bool success_15 = FALSE
	array shadow_16 = NONE
	Rule_result _17 = NONE
	bool success_18 = FALSE
	array shadow_19 = NONE
	Rule_result _20 = NONE
	bool success_21 = FALSE
	array shadow_22 = NONE
	Rule_result _23 = NONE
	bool success_24 = FALSE
	array shadow_25 = NONE
	Rule_result _26 = NONE
	bool success_27 = FALSE
	array shadow_28 = NONE
	token _30 = NONE
	bool success_31 = FALSE
	array shadow_32 = NONE
	if (!(CURRENT_TOKEN == AUTO_4))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_33 = pos
	while (1)
	{
		auto begin_29 = begin_33
		_8 = cll_var(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			_11 = cll_if(TOKEN_SEQUENCE)
			if (!(_11.res))
			{
				_14 = expr(TOKEN_SEQUENCE)
				if (!(_14.res))
				{
					_17 = copiable_method_call(TOKEN_SEQUENCE)
					if (!(_17.res))
					{
						_20 = method_call(TOKEN_SEQUENCE)
						if (!(_20.res))
						{
							_23 = loop_while(TOKEN_SEQUENCE)
							if (!(_23.res))
							{
								_26 = loop_for(TOKEN_SEQUENCE)
								if (!(_26.res))
								{
									break
								}
								else 
								{
									success_27 = TRUE
									begin_29 += _26.token.length()
									shadow_28.push(_26.token)
									_6.push(_26.token)
								}
							}
							else 
							{
								success_24 = TRUE
								begin_29 += _23.token.length()
								shadow_25.push(_23.token)
								_6.push(_23.token)
							}
						}
						else 
						{
							success_21 = TRUE
							begin_29 += _20.token.length()
							shadow_22.push(_20.token)
							_6.push(_20.token)
						}
					}
					else 
					{
						success_18 = TRUE
						begin_29 += _17.token.length()
						shadow_19.push(_17.token)
						_6.push(_17.token)
					}
				}
				else 
				{
					success_15 = TRUE
					begin_29 += _14.token.length()
					shadow_16.push(_14.token)
					_6.push(_14.token)
				}
			}
			else 
			{
				success_12 = TRUE
				begin_29 += _11.token.length()
				shadow_13.push(_11.token)
				_6.push(_11.token)
			}
		}
		else 
		{
			success_9 = TRUE
			begin_29 += _8.token.length()
			shadow_10.push(_8.token)
			_6.push(_8.token)
		}
		success_7 = TRUE
		_4 = _6
		if (success_7)
		{
			success_5 = TRUE
			begin_33 = begin_29
		}
		skipspaces(TOKEN_SEQUENCE)
		if (!(CURRENT_TOKEN == END))
		{
			break
		}
		_30 = CURRENT_TOKEN
		success_31 = TRUE
		begin_33++
		shadow_32.push(_30)
		success_34 = TRUE
	}
	if (!success_34)
	{
		return {}
	}
	if (success_5 && success_31)
	{
		success_3 = TRUE
		pos = begin_33
	}
	data = _4 # array
}
Rule(cll_block) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_60))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = Rule_rule(TOKEN_SEQUENCE)
	while (_2.res)
	{
		success_3 = TRUE
		pos += _2.token.length()
		_2 = Rule_rule(TOKEN_SEQUENCE)
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_65))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2.token # rule
}
Token(OP) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	str _6 = NONE
	bool success_7 = FALSE
	str _8 = NONE
	bool success_9 = FALSE
	str _10 = NONE
	bool success_11 = FALSE
	str _12 = NONE
	bool success_13 = FALSE
	str _14 = NONE
	bool success_15 = FALSE
	str _16 = NONE
	bool success_17 = FALSE
	str _18 = NONE
	bool success_19 = FALSE
	str _20 = NONE
	bool success_21 = FALSE
	if (!(*pos == '+'))
	{
		if (!(*pos == '-'))
		{
			if (!(*pos == '*'))
			{
				if (!(*pos == '/'))
				{
					if (!(*pos == '%'))
					{
						if (!(*pos == '&'))
						{
							if (!(*pos == '|'))
							{
								if (!(*pos == '^'))
								{
									if (!(!STRNCMP(pos, "<<")))
									{
										if (!(!STRNCMP(pos, ">>")))
										{
											return {}
										}
										else 
										{
											_20 += CURRENT_POS_SEQUENCE
											success_21 = TRUE
											pos++
											_0 += _20
										}
									}
									else 
									{
										_18 += CURRENT_POS_SEQUENCE
										success_19 = TRUE
										pos++
										_0 += _18
									}
								}
								else 
								{
									_16 += CURRENT_POS_SEQUENCE
									success_17 = TRUE
									pos++
									_0 += _16
								}
							}
							else 
							{
								_14 += CURRENT_POS_SEQUENCE
								success_15 = TRUE
								pos++
								_0 += _14
							}
						}
						else 
						{
							_12 += CURRENT_POS_SEQUENCE
							success_13 = TRUE
							pos++
							_0 += _12
						}
					}
					else 
					{
						_10 += CURRENT_POS_SEQUENCE
						success_11 = TRUE
						pos++
						_0 += _10
					}
				}
				else 
				{
					_8 += CURRENT_POS_SEQUENCE
					success_9 = TRUE
					pos++
					_0 += _8
				}
			}
			else 
			{
				_6 += CURRENT_POS_SEQUENCE
				success_7 = TRUE
				pos++
				_0 += _6
			}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			pos++
			_0 += _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
		_0 += _2
	}
	success_1 = TRUE
	data = _0 # str
}
Token(ASSIGNMENT_OP) {
	Token_result _0 = NONE
	bool success_1 = FALSE
	Token_result _2 = NONE
	bool success_3 = FALSE
	_0 = OP(TOKEN_SEQUENCE)
	if (_0.res)
	{
		success_1 = TRUE
		pos += _0.token.length()
	}
	skipspaces(pos)
	_2 = AUTO_50(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	data = _0.token # token
}
Token(COMPARE_OP) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	str _6 = NONE
	bool success_7 = FALSE
	str _8 = NONE
	bool success_9 = FALSE
	str _10 = NONE
	bool success_11 = FALSE
	str _12 = NONE
	bool success_13 = FALSE
	if (!(!STRNCMP(pos, "==")))
	{
		if (!(!STRNCMP(pos, "!=")))
		{
			if (!(*pos == '>'))
			{
				if (!(*pos == '<'))
				{
					if (!(!STRNCMP(pos, ">=")))
					{
						if (!(!STRNCMP(pos, "<=")))
						{
							return {}
						}
						else 
						{
							_12 += CURRENT_POS_SEQUENCE
							success_13 = TRUE
							pos++
							_0 += _12
						}
					}
					else 
					{
						_10 += CURRENT_POS_SEQUENCE
						success_11 = TRUE
						pos++
						_0 += _10
					}
				}
				else 
				{
					_8 += CURRENT_POS_SEQUENCE
					success_9 = TRUE
					pos++
					_0 += _8
				}
			}
			else 
			{
				_6 += CURRENT_POS_SEQUENCE
				success_7 = TRUE
				pos++
				_0 += _6
			}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			pos++
			_0 += _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
		_0 += _2
	}
	success_1 = TRUE
	data = _0 # str
}
Token(LOGICAL_OP) {
	token _0 = NONE
	bool success_1 = FALSE
	Token_result _2 = NONE
	bool success_3 = FALSE
	Token_result _4 = NONE
	bool success_5 = FALSE
	_2 = LOGICAL_AND(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		_4 = LOGICAL_OR(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			return {}
		}
		else 
		{
			success_5 = TRUE
			pos += _4.token.length()
			_0 = _4.token
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
	data = _0 # token
}
Token(LOGICAL_NOT) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	if (!(*pos == '!'))
	{
		if (!(!STRNCMP(pos, "not")))
		{
			return {}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			pos++
			_0 += _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
		_0 += _2
	}
	success_1 = TRUE
}
Token(LOGICAL_AND) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	if (!(!STRNCMP(pos, "&&")))
	{
		if (!(!STRNCMP(pos, "and")))
		{
			return {}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			pos++
			_0 += _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
		_0 += _2
	}
	success_1 = TRUE
}
Token(LOGICAL_OR) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	if (!(!STRNCMP(pos, "||")))
	{
		if (!(!STRNCMP(pos, "or")))
		{
			return {}
		}
		else 
		{
			_4 += CURRENT_POS_SEQUENCE
			success_5 = TRUE
			pos++
			_0 += _4
		}
	}
	else 
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		pos++
		_0 += _2
	}
	success_1 = TRUE
}
Rule(cll_template) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	array shadow_6 = NONE
	Rule_result _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	_0 = cll_type(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos += _0.token.length()
	skipspaces(TOKEN_SEQUENCE)
	auto begin_10 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_74))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		shadow_6.push(_4)
		skipspaces(TOKEN_SEQUENCE)
		_7 = cll_type(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			break
		}
		success_8 = TRUE
		begin_10 += _7.token.length()
		shadow_9.push(_7.token)
	}
	if (success_5 && success_8)
	{
		success_3 = TRUE
		pos = begin_10
	}
	data = 
		second: shadow_9 # array
		first: _0.token # rule
	;
}
Rule(cll_csupport_types) {
	token _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	token _10 = NONE
	bool success_11 = FALSE
	token _12 = NONE
	bool success_13 = FALSE
	token _14 = NONE
	bool success_15 = FALSE
	token _16 = NONE
	bool success_17 = FALSE
	token _18 = NONE
	bool success_19 = FALSE
	token _22 = NONE
	bool success_23 = FALSE
	token _24 = NONE
	bool success_25 = FALSE
	token _26 = NONE
	bool success_27 = FALSE
	token _28 = NONE
	bool success_29 = FALSE
	token _31 = NONE
	bool success_32 = FALSE
	token _33 = NONE
	bool success_34 = FALSE
	token _35 = NONE
	bool success_36 = FALSE
	token _37 = NONE
	bool success_38 = FALSE
	token _39 = NONE
	bool success_40 = FALSE
	token _41 = NONE
	bool success_42 = FALSE
	token _43 = NONE
	bool success_44 = FALSE
	token _45 = NONE
	bool success_46 = FALSE
	Rule_result _48 = NONE
	bool success_49 = FALSE
	auto begin_21 = pos
	do
	{
		if (CURRENT_TOKEN == AUTO_8)
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			begin_21++
		}
		skipspaces(TOKEN_SEQUENCE)
		auto begin_20 = begin_21
		if (!(CURRENT_TOKEN == AUTO_9))
		{
			if (!(CURRENT_TOKEN == AUTO_10))
			{
				if (!(CURRENT_TOKEN == AUTO_11))
				{
					if (!(CURRENT_TOKEN == AUTO_12))
					{
						if (!(CURRENT_TOKEN == AUTO_13))
						{
							break
						}
						else 
						{
							_18 = CURRENT_TOKEN
							success_19 = TRUE
							begin_20++
							_8 = _18
						}
					}
					else 
					{
						_16 = CURRENT_TOKEN
						success_17 = TRUE
						begin_20++
						_8 = _16
					}
				}
				else 
				{
					_14 = CURRENT_TOKEN
					success_15 = TRUE
					begin_20++
					_8 = _14
				}
			}
			else 
			{
				_12 = CURRENT_TOKEN
				success_13 = TRUE
				begin_20++
				_8 = _12
			}
		}
		else 
		{
			_10 = CURRENT_TOKEN
			success_11 = TRUE
			begin_20++
			_8 = _10
		}
		success_9 = TRUE
		_6 = _8
		if (success_9)
		{
			success_7 = TRUE
			begin_21 = begin_20
		}
	}	while(0)

	if (success_7)
	{
		success_3 = TRUE
		pos = begin_21
	}
	
	if (!success_3)
	{
		auto begin_30 = pos
		do
		{
			if (!(CURRENT_TOKEN == AUTO_14))
			{
				if (!(CURRENT_TOKEN == AUTO_15))
				{
					break
				}
				else 
				{
					_28 = CURRENT_TOKEN
					success_29 = TRUE
					begin_30++
					_24 = _28
				}
			}
			else 
			{
				_26 = CURRENT_TOKEN
				success_27 = TRUE
				begin_30++
				_24 = _26
			}
			success_25 = TRUE
			_22 = _24
		}		while(0)

		if (success_25)
		{
			success_23 = TRUE
			pos = begin_30
		}
		
		if (!success_23)
		{
			auto begin_47 = pos
			do
			{
				if (!(CURRENT_TOKEN == AUTO_16))
				{
					if (!(CURRENT_TOKEN == AUTO_17))
					{
						if (!(CURRENT_TOKEN == AUTO_18))
						{
							if (!(CURRENT_TOKEN == AUTO_19))
							{
								if (!(CURRENT_TOKEN == AUTO_20))
								{
									if (!(CURRENT_TOKEN == AUTO_21))
									{
										return {}
									}
									else 
									{
										_45 = CURRENT_TOKEN
										success_46 = TRUE
										begin_47++
										_33 = _45
									}
								}
								else 
								{
									_43 = CURRENT_TOKEN
									success_44 = TRUE
									begin_47++
									_33 = _43
								}
							}
							else 
							{
								_41 = CURRENT_TOKEN
								success_42 = TRUE
								begin_47++
								_33 = _41
							}
						}
						else 
						{
							_39 = CURRENT_TOKEN
							success_40 = TRUE
							begin_47++
							_33 = _39
						}
					}
					else 
					{
						_37 = CURRENT_TOKEN
						success_38 = TRUE
						begin_47++
						_33 = _37
					}
				}
				else 
				{
					_35 = CURRENT_TOKEN
					success_36 = TRUE
					begin_47++
					_33 = _35
				}
				success_34 = TRUE
				_31 = _33
			}			while(0)

			if (success_34)
			{
				success_32 = TRUE
				pos = begin_47
			}
			
			if (!success_32)
			{
				return {}
			}
			else 
			{
				_0 = _31
			}
		}
		else 
		{
			_0 = _22
		}
	}
	success_1 = TRUE
	skipspaces(TOKEN_SEQUENCE)
	_48 = cll_template(TOKEN_SEQUENCE)
	if (!(_48.res))
	{
		return {}
	}
	success_49 = TRUE
	pos += _48.token.length()
	data = 
		templ: _8 # token
		type: _4 # token
	;
}
Rule(cll_type_abstract) {
	any _0 = NONE
	bool success_1 = FALSE
	any _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	token _10 = NONE
	bool success_11 = FALSE
	token _12 = NONE
	bool success_13 = FALSE
	bool success_15 = FALSE
	token _16 = NONE
	bool success_17 = FALSE
	Rule_result _18 = NONE
	bool success_19 = FALSE
	bool success_22 = FALSE
	token _23 = NONE
	bool success_24 = FALSE
	Rule_result _25 = NONE
	bool success_26 = FALSE
	auto begin_28 = pos
	if (!(CURRENT_TOKEN == AUTO_22))
	{
		if (!(CURRENT_TOKEN == AUTO_23))
		{
			if (!(CURRENT_TOKEN == AUTO_24))
			{
				if (!(CURRENT_TOKEN == AUTO_25))
				{
					if (!(CURRENT_TOKEN == AUTO_26))
					{
						auto begin_20 = begin_28
						do
						{
							if (!(CURRENT_TOKEN == AUTO_27))
							{
								break
							}
							_16 = CURRENT_TOKEN
							success_17 = TRUE
							begin_20++
							skipspaces(TOKEN_SEQUENCE)
							_18 = cll_template(TOKEN_SEQUENCE)
							if (!(_18.res))
							{
								break
							}
							success_19 = TRUE
							begin_20 += _18.token.length()
						}						while(0)

						if (success_17 && success_19)
						{
							success_15 = TRUE
							begin_28 = begin_20
						}
						
						if (!success_15)
						{
							auto begin_27 = begin_28
							do
							{
								if (!(CURRENT_TOKEN == AUTO_28))
								{
									break
								}
								_23 = CURRENT_TOKEN
								success_24 = TRUE
								begin_27++
								skipspaces(TOKEN_SEQUENCE)
								_25 = cll_template(TOKEN_SEQUENCE)
								if (!(_25.res))
								{
									break
								}
								success_26 = TRUE
								begin_27 += _25.token.length()
							}							while(0)

							if (success_24 && success_26)
							{
								success_22 = TRUE
								begin_28 = begin_27
							}
							
							if (!success_22)
							{
								return {}
							}
						}
					}
					else 
					{
						_12 = CURRENT_TOKEN
						success_13 = TRUE
						begin_28++
						_2 = _12
					}
				}
				else 
				{
					_10 = CURRENT_TOKEN
					success_11 = TRUE
					begin_28++
					_2 = _10
				}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				begin_28++
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			begin_28++
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_28++
		_2 = _4
	}
	success_3 = TRUE
	if (success_3)
	{
		success_1 = TRUE
		pos = begin_28
	}
	data = 
		templ: _23 # token
		type: _16 # token
	;
}
Rule(cll_type) {
	rule _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	_2 = cll_csupport_types(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		_4 = cll_type_abstract(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			return {}
		}
		else 
		{
			success_5 = TRUE
			pos += _4.token.length()
			_0 = _4.token
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
	data = _0 # rule
}
Rule(cll_if) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_29))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = expr(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	skipspaces(TOKEN_SEQUENCE)
	_4 = cll_block(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		return {}
	}
	success_5 = TRUE
	pos += _4.token.length()
	data = 
		block: _4.token # rule
		expr: _2.token # rule
	;
}
Rule(cll_ternary) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	_0 = expr(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos += _0.token.length()
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_80))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_4 = expr(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		return {}
	}
	success_5 = TRUE
	pos += _4.token.length()
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_101))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_8 = expr(TOKEN_SEQUENCE)
	if (!(_8.res))
	{
		return {}
	}
	success_9 = TRUE
	pos += _8.token.length()
	data = 
		second: _8.token # rule
		first: _4.token # rule
		cond: _0.token # rule
	;
}
Rule(expr_logical) {
	rule _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	rule _10 = NONE
	bool success_11 = FALSE
	Rule_result _12 = NONE
	bool success_13 = FALSE
	Rule_result _14 = NONE
	bool success_15 = FALSE
	Rule_result _16 = NONE
	bool success_17 = FALSE
	_2 = expr_compare(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		_4 = expr_arithmetic(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			_6 = expr_for_arithmetic(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				return {}
			}
			else 
			{
				success_7 = TRUE
				pos += _6.token.length()
				_0 = _6.token
			}
		}
		else 
		{
			success_5 = TRUE
			pos += _4.token.length()
			_0 = _4.token
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == LOGICAL_OP))
	{
		return {}
	}
	_8 = CURRENT_TOKEN
	success_9 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_12 = expr_compare(TOKEN_SEQUENCE)
	if (!(_12.res))
	{
		_14 = expr_arithmetic(TOKEN_SEQUENCE)
		if (!(_14.res))
		{
			_16 = expr_for_arithmetic(TOKEN_SEQUENCE)
			if (!(_16.res))
			{
				return {}
			}
			else 
			{
				success_17 = TRUE
				pos += _16.token.length()
				_10 = _16.token
			}
		}
		else 
		{
			success_15 = TRUE
			pos += _14.token.length()
			_10 = _14.token
		}
	}
	else 
	{
		success_13 = TRUE
		pos += _12.token.length()
		_10 = _12.token
	}
	success_11 = TRUE
	data = 
		right: _10 # rule
		op: _8 # token
		left: _0 # rule
	;
}
Rule(expr_compare) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	bool success_11 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	array shadow_6 = NONE
	Rule_result _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	_0 = expr_arithmetic(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos += _0.token.length()
	skipspaces(TOKEN_SEQUENCE)
	auto begin_10 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == COMPARE_OP))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		shadow_6.push(_4)
		skipspaces(TOKEN_SEQUENCE)
		_7 = expr_arithmetic(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			break
		}
		success_8 = TRUE
		begin_10 += _7.token.length()
		shadow_9.push(_7.token)
		success_11 = TRUE
	}
	if (!success_11)
	{
		return {}
	}
	if (success_5 && success_8)
	{
		success_3 = TRUE
		pos = begin_10
	}
	data = 
		sequence: shadow_9 # array
		operators: shadow_6 # array
		first: _0.token # rule
	;
}
Rule(expr_arithmetic) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	bool success_11 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	array shadow_6 = NONE
	Rule_result _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	_0 = expr_for_arithmetic(TOKEN_SEQUENCE)
	if (!(_0.res))
	{
		return {}
	}
	success_1 = TRUE
	pos += _0.token.length()
	skipspaces(TOKEN_SEQUENCE)
	auto begin_10 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == OP))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		shadow_6.push(_4)
		skipspaces(TOKEN_SEQUENCE)
		_7 = expr_for_arithmetic(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			break
		}
		success_8 = TRUE
		begin_10 += _7.token.length()
		shadow_9.push(_7.token)
		success_11 = TRUE
	}
	if (!success_11)
	{
		return {}
	}
	if (success_5 && success_8)
	{
		success_3 = TRUE
		pos = begin_10
	}
	data = 
		sequence: shadow_9 # array
		operators: shadow_6 # array
		first: _0.token # rule
	;
}
Rule(expr_for_arithmetic) {
	rule _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	_2 = expr_group(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		_4 = method_call(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			_6 = cll_function_call(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				_8 = any_data(TOKEN_SEQUENCE)
				if (!(_8.res))
				{
					return {}
				}
				else 
				{
					success_9 = TRUE
					pos += _8.token.length()
					_0 = _8.token
				}
			}
			else 
			{
				success_7 = TRUE
				pos += _6.token.length()
				_0 = _6.token
			}
		}
		else 
		{
			success_5 = TRUE
			pos += _4.token.length()
			_0 = _4.token
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
	data = _0 # rule
}
Rule(expr_group) {
	token _0 = NONE
	bool success_1 = FALSE
	rule _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	if (!(CURRENT_TOKEN == AUTO_84))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_4 = cll_ternary(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		_6 = expr(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			return {}
		}
		else 
		{
			success_7 = TRUE
			pos += _6.token.length()
			_2 = _6.token
		}
	}
	else 
	{
		success_5 = TRUE
		pos += _4.token.length()
		_2 = _4.token
	}
	success_3 = TRUE
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_85))
	{
		return {}
	}
	_8 = CURRENT_TOKEN
	success_9 = TRUE
	pos++
	data = _2 # rule
}
Rule(expr_expr_copiable_method_call) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_84))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = copiable_method_call(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_85))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2.token # rule
}
Rule(expr) {
	rule _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	Rule_result _12 = NONE
	bool success_13 = FALSE
	Rule_result _14 = NONE
	bool success_15 = FALSE
	_2 = expr_logical(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		_4 = expr_compare(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			_6 = expr_arithmetic(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				_8 = expr_group(TOKEN_SEQUENCE)
				if (!(_8.res))
				{
					_10 = expr_expr_copiable_method_call(TOKEN_SEQUENCE)
					if (!(_10.res))
					{
						_12 = cll_function_call(TOKEN_SEQUENCE)
						if (!(_12.res))
						{
							_14 = any_data(TOKEN_SEQUENCE)
							if (!(_14.res))
							{
								return {}
							}
							else 
							{
								success_15 = TRUE
								pos += _14.token.length()
								_0 = _14.token
							}
						}
						else 
						{
							success_13 = TRUE
							pos += _12.token.length()
							_0 = _12.token
						}
					}
					else 
					{
						success_11 = TRUE
						pos += _10.token.length()
						_0 = _10.token
					}
				}
				else 
				{
					success_9 = TRUE
					pos += _8.token.length()
					_0 = _8.token
				}
			}
			else 
			{
				success_7 = TRUE
				pos += _6.token.length()
				_0 = _6.token
			}
		}
		else 
		{
			success_5 = TRUE
			pos += _4.token.length()
			_0 = _4.token
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
	data = _0 # rule
}
Rule(function_body_call) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_84))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = function_arguments(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_85))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2.token # rule
}
Rule(function_body_decl) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_84))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = function_parameters(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_85))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	data = _2.token # rule
}
Rule(function_arguments) {
	bool success_1 = FALSE
	any _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	array shadow_16 = NONE
	array _8 = NONE
	bool success_9 = FALSE
	array _10 = NONE
	bool success_11 = FALSE
	token _12 = NONE
	bool success_13 = FALSE
	array shadow_14 = NONE
	auto begin_17 = pos
	_4 = any_data(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		if (!(CURRENT_TOKEN == ID))
		{
			return {}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			begin_17++
			_2 = _6
		}
	}
	else 
	{
		success_5 = TRUE
		begin_17 += _4.token.length()
		_2 = _4.token
	}
	success_3 = TRUE
	skipspaces(TOKEN_SEQUENCE)
	auto begin_15 = begin_17
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_74))
		{
			break
		}
		else 
		{
			_12 = CURRENT_TOKEN
			success_13 = TRUE
			begin_15++
			shadow_14.push(_12)
			_10.push(_12)
		}
		success_11 = TRUE
		_8 = _10
		shadow_16.push(_8)
	}
	if (success_11)
	{
		success_9 = TRUE
		begin_17 = begin_15
	}
	if (success_3)
	{
		success_1 = TRUE
		pos = begin_17
	}
	data = 
		second: shadow_16 # array
		first: _2 # any
	;
}
Rule(function_parameters) {
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	array shadow_8 = NONE
	token _9 = NONE
	bool success_10 = FALSE
	array shadow_11 = NONE
	auto begin_13 = pos
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	begin_13++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_12 = begin_13
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_74))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		begin_12++
		shadow_8.push(_6)
		skipspaces(TOKEN_SEQUENCE)
		if (!(CURRENT_TOKEN == ID))
		{
			break
		}
		_9 = CURRENT_TOKEN
		success_10 = TRUE
		begin_12++
		shadow_11.push(_9)
	}
	if (success_7 && success_10)
	{
		success_5 = TRUE
		begin_13 = begin_12
	}
	if (success_3 && success_5)
	{
		success_1 = TRUE
		pos = begin_13
	}
	data = 
		second: shadow_11 # array
		first: _2 # token
	;
}
Rule(cll_function_call) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = function_body_call(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	data = 
		body: _2.token # rule
		name: _0 # token
	;
}
Rule(function_decl) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	array shadow_6 = NONE
	bool success_7 = FALSE
	Rule_result _9 = NONE
	bool success_10 = FALSE
	rule val = NONE
	bool success_11 = FALSE
	Rule_result _12 = NONE
	bool success_13 = FALSE
	if (!(CURRENT_TOKEN == AUTO_42))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_8 = pos
	while (CURRENT_TOKEN == ID)
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_8++
		shadow_6.push(_4)
		success_7 = TRUE
	}
	if (!success_7)
	{
		return {}
	}
	_2 = _4
	if (success_5)
	{
		success_3 = TRUE
		pos = begin_8
	}
	skipspaces(TOKEN_SEQUENCE)
	_9 = function_body_decl(TOKEN_SEQUENCE)
	if (!(_9.res))
	{
		return {}
	}
	success_10 = TRUE
	pos += _9.token.length()
	skipspaces(TOKEN_SEQUENCE)
	auto begin_14 = pos
	do
	{
		_12 = cll_block(TOKEN_SEQUENCE)
		if (!(_12.res))
		{
			break
		}
		success_13 = TRUE
		begin_14 += _12.token.length()
		val = _12.token
	}	while(0)

	if (success_13)
	{
		success_11 = TRUE
		pos = begin_14
	}
	data = 
		value: val # rule
		name: _2 # token
		type: shadow_6 # array
	;
}
Rule(loop_while) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_43))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = expr(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	skipspaces(TOKEN_SEQUENCE)
	_4 = cll_block(TOKEN_SEQUENCE)
	if (!(_4.res))
	{
		return {}
	}
	success_5 = TRUE
	pos += _4.token.length()
	data = 
		block: _4.token # rule
		expr: _2.token # rule
	;
}
Rule(loop_for) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	rule _4 = NONE
	bool success_5 = FALSE
	rule _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	token _13 = NONE
	bool success_14 = FALSE
	Rule_result _15 = NONE
	bool success_16 = FALSE
	token _17 = NONE
	bool success_18 = FALSE
	Rule_result _19 = NONE
	bool success_20 = FALSE
	token _21 = NONE
	bool success_22 = FALSE
	Rule_result _23 = NONE
	bool success_24 = FALSE
	if (!(CURRENT_TOKEN == AUTO_44))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_84))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_12 = pos
	do
	{
		_8 = expr(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			_10 = cll_var(TOKEN_SEQUENCE)
			if (!(_10.res))
			{
				break
			}
			else 
			{
				success_11 = TRUE
				begin_12 += _10.token.length()
				_6 = _10.token
			}
		}
		else 
		{
			success_9 = TRUE
			begin_12 += _8.token.length()
			_6 = _8.token
		}
		success_7 = TRUE
		_4 = _6
	}	while(0)

	if (success_7)
	{
		success_5 = TRUE
		pos = begin_12
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_99))
	{
		return {}
	}
	_13 = CURRENT_TOKEN
	success_14 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_15 = expr(TOKEN_SEQUENCE)
	if (_15.res)
	{
		success_16 = TRUE
		pos += _15.token.length()
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_99))
	{
		return {}
	}
	_17 = CURRENT_TOKEN
	success_18 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_19 = expr(TOKEN_SEQUENCE)
	if (_19.res)
	{
		success_20 = TRUE
		pos += _19.token.length()
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_85))
	{
		return {}
	}
	_21 = CURRENT_TOKEN
	success_22 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_23 = cll_block(TOKEN_SEQUENCE)
	if (!(_23.res))
	{
		return {}
	}
	success_24 = TRUE
	pos += _23.token.length()
	data = 
		block: _21 # token
		end: _17 # token
		cond: _13 # token
		decl: _6 # rule
	;
}
Rule(method_call) {
	token _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	bool success_11 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	array shadow_6 = NONE
	Rule_result _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_10 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_95))
		{
			break
		}
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		shadow_6.push(_4)
		skipspaces(TOKEN_SEQUENCE)
		_7 = cll_function_call(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			break
		}
		success_8 = TRUE
		begin_10 += _7.token.length()
		shadow_9.push(_7.token)
		success_11 = TRUE
	}
	if (!success_11)
	{
		return {}
	}
	if (success_5 && success_8)
	{
		success_3 = TRUE
		pos = begin_10
	}
	data = 
		call: shadow_9 # array
		object: _0 # token
	;
}
Rule(copiable_method_call) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == AUTO_50))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = method_call(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	data = _2.token # rule
}
Rule(var_refer) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _9 = NONE
	bool success_10 = FALSE
	bool success_12 = FALSE
	token _13 = NONE
	bool success_14 = FALSE
	Rule_result _15 = NONE
	bool success_16 = FALSE
	token _17 = NONE
	bool success_18 = FALSE
	token _20 = NONE
	bool success_21 = FALSE
	token _22 = NONE
	bool success_23 = FALSE
	token _24 = NONE
	bool success_25 = FALSE
	token _26 = NONE
	bool success_27 = FALSE
	auto begin_8 = pos
	do
	{
		if (!(CURRENT_TOKEN == AUTO_55))
		{
			if (!(CURRENT_TOKEN == AUTO_56))
			{
				break
			}
			else 
			{
				_6 = CURRENT_TOKEN
				success_7 = TRUE
				begin_8++
				_2 = _6
			}
		}
		else 
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			begin_8++
			_2 = _4
		}
		success_3 = TRUE
		_0 = _2
	}	while(0)

	if (success_3)
	{
		success_1 = TRUE
		pos = begin_8
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_9 = CURRENT_TOKEN
	success_10 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_19 = pos
	do
	{
		if (!(CURRENT_TOKEN == AUTO_86))
		{
			break
		}
		_13 = CURRENT_TOKEN
		success_14 = TRUE
		begin_19++
		skipspaces(TOKEN_SEQUENCE)
		_15 = expr(TOKEN_SEQUENCE)
		if (!(_15.res))
		{
			break
		}
		success_16 = TRUE
		begin_19 += _15.token.length()
		skipspaces(TOKEN_SEQUENCE)
		if (!(CURRENT_TOKEN == AUTO_88))
		{
			break
		}
		_17 = CURRENT_TOKEN
		success_18 = TRUE
		begin_19++
	}	while(0)

	if (success_14 && success_16 && success_18)
	{
		success_12 = TRUE
		pos = begin_19
	}
	skipspaces(TOKEN_SEQUENCE)
	auto begin_28 = pos
	do
	{
		if (!(CURRENT_TOKEN == AUTO_55))
		{
			if (!(CURRENT_TOKEN == AUTO_56))
			{
				break
			}
			else 
			{
				_26 = CURRENT_TOKEN
				success_27 = TRUE
				begin_28++
				_22 = _26
			}
		}
		else 
		{
			_24 = CURRENT_TOKEN
			success_25 = TRUE
			begin_28++
			_22 = _24
		}
		success_23 = TRUE
		_20 = _22
	}	while(0)

	if (success_23)
	{
		success_21 = TRUE
		pos = begin_28
	}
	data = 
		post: _20 # token
		pre: _0 # token
		brace_expression: _15.token # rule
		name: _2 # token
	;
}
Rule(cll_var) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	rule _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	Rule_result _12 = NONE
	bool success_13 = FALSE
	_0 = cll_type(TOKEN_SEQUENCE)
	if (_0.res)
	{
		success_1 = TRUE
		pos += _0.token.length()
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_14 = pos
	do
	{
		if (!(CURRENT_TOKEN == ASSIGNMENT_OP))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		begin_14++
		skipspaces(TOKEN_SEQUENCE)
		_10 = expr(TOKEN_SEQUENCE)
		if (!(_10.res))
		{
			_12 = cll_ternary(TOKEN_SEQUENCE)
			if (!(_12.res))
			{
				break
			}
			else 
			{
				success_13 = TRUE
				begin_14 += _12.token.length()
				_8 = _12.token
			}
		}
		else 
		{
			success_11 = TRUE
			begin_14 += _10.token.length()
			_8 = _10.token
		}
		success_9 = TRUE
	}	while(0)

	if (success_7 && success_9)
	{
		success_5 = TRUE
		pos = begin_14
	}
	data = 
		value: _8 # rule
		op: _6 # token
		id: _2 # token
		type: _0.token # rule
	;
}
Token(STRING) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	str _6 = NONE
	bool success_7 = FALSE
	str _8 = NONE
	bool success_9 = FALSE
	str _10 = NONE
	bool success_11 = FALSE
	str _12 = NONE
	bool success_13 = FALSE
	str _15 = NONE
	bool success_16 = FALSE
	str _18 = NONE
	bool success_19 = FALSE
	str _20 = NONE
	bool success_21 = FALSE
	str _22 = NONE
	bool success_23 = FALSE
	str _24 = NONE
	bool success_25 = FALSE
	str _26 = NONE
	bool success_27 = FALSE
	str _28 = NONE
	bool success_29 = FALSE
	str _31 = NONE
	bool success_32 = FALSE
	auto begin_17 = pos
	do
	{
		if (!(*pos == '\''))
		{
			break
		}
		_4 += CURRENT_POS_SEQUENCE
		success_5 = TRUE
		begin_17++
		skipspaces(pos)
		auto begin_14 = begin_17
		while (1)
		{
			if (!(!STRNCMP(pos, "\\'")))
			{
				if (!(!(*pos == '\'')))
				{
					break
				}
				else 
				{
					_12 += CURRENT_POS_SEQUENCE
					success_13 = TRUE
					begin_14++
					_8 += _12
				}
			}
			else 
			{
				_10 += CURRENT_POS_SEQUENCE
				success_11 = TRUE
				begin_14++
				_8 += _10
			}
			success_9 = TRUE
			_6 += _8
		}
		if (success_9)
		{
			success_7 = TRUE
			begin_17 = begin_14
		}
		skipspaces(pos)
		if (!(*pos == '\''))
		{
			break
		}
		_15 += CURRENT_POS_SEQUENCE
		success_16 = TRUE
		begin_17++
		_2 += _4
		_2 += _6
		_2 += _15
	}	while(0)

	if (success_5 && success_16)
	{
		success_3 = TRUE
		pos = begin_17
	}
	
	if (!success_3)
	{
		auto begin_33 = pos
		do
		{
			if (!(*pos == '"'))
			{
				break
			}
			_20 += CURRENT_POS_SEQUENCE
			success_21 = TRUE
			begin_33++
			skipspaces(pos)
			auto begin_30 = begin_33
			while (1)
			{
				if (!(!STRNCMP(pos, "\\"")))
				{
					if (!(!(*pos == '"')))
					{
						break
					}
					else 
					{
						_28 += CURRENT_POS_SEQUENCE
						success_29 = TRUE
						begin_30++
						_24 += _28
					}
				}
				else 
				{
					_26 += CURRENT_POS_SEQUENCE
					success_27 = TRUE
					begin_30++
					_24 += _26
				}
				success_25 = TRUE
				_22 += _24
			}
			if (success_25)
			{
				success_23 = TRUE
				begin_33 = begin_30
			}
			skipspaces(pos)
			if (!(*pos == '"'))
			{
				break
			}
			_31 += CURRENT_POS_SEQUENCE
			success_32 = TRUE
			begin_33++
			_18 += _20
			_18 += _22
			_18 += _31
		}		while(0)

		if (success_21 && success_32)
		{
			success_19 = TRUE
			pos = begin_33
		}
		
		if (!success_19)
		{
			return {}
		}
		else 
		{
			_0 += _18
		}
	}
	else 
	{
		_0 += _2
	}
	success_1 = TRUE
	data = _6 # str
}
Token(NUMBER) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	bool success_6 = FALSE
	str _8 = NONE
	bool success_9 = FALSE
	str _10 = NONE
	bool success_11 = FALSE
	str _12 = NONE
	bool success_13 = FALSE
	bool success_14 = FALSE
	if (!(*pos == '+' || *pos == '-'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	skipspaces(pos)
	auto begin_7 = pos
	while ((*pos>='0' && *pos<='9'))
	{
		_4 += CURRENT_POS_SEQUENCE
		success_5 = TRUE
		begin_7++
		success_6 = TRUE
	}
	if (!success_6)
	{
		return {}
	}
	_2 += _4
	if (success_5)
	{
		success_3 = TRUE
		pos = begin_7
	}
	skipspaces(pos)
	auto begin_15 = pos
	do
	{
		if (!(*pos == '.' || *pos == ','))
		{
			break
		}
		_10 += CURRENT_POS_SEQUENCE
		success_11 = TRUE
		begin_15++
		skipspaces(pos)
		while ((*pos>='0' && *pos<='9'))
		{
			_12 += CURRENT_POS_SEQUENCE
			success_13 = TRUE
			begin_15++
			success_14 = TRUE
		}
		if (!success_14)
		{
			break
		}
		_8 += _10
		_8 += _12
	}	while(0)

	if (success_11 && success_13)
	{
		success_9 = TRUE
		pos = begin_15
	}
	data = 
		dec: _2 # str
		main: _4 # str
		sign: _0 # str
	;
}
Token(BOOLEAN) {
	str d = NONE
	bool success_0 = FALSE
	str _1 = NONE
	bool success_2 = FALSE
	str _3 = NONE
	bool success_4 = FALSE
	str _5 = NONE
	bool success_6 = FALSE
	auto begin_7 = pos
	if (!(!STRNCMP(pos, "true")))
	{
		if (!(!STRNCMP(pos, "false")))
		{
			return {}
		}
		else 
		{
			_5 += CURRENT_POS_SEQUENCE
			success_6 = TRUE
			begin_7++
			_1 += _5
		}
	}
	else 
	{
		_3 += CURRENT_POS_SEQUENCE
		success_4 = TRUE
		begin_7++
		_1 += _3
	}
	success_2 = TRUE
	d += _1
	if (success_2)
	{
		success_0 = TRUE
		pos = begin_7
	}
	data = d # str
}
Rule(array) {
	token _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	array shadow_8 = NONE
	token _9 = NONE
	bool success_10 = FALSE
	array shadow_11 = NONE
	token _14 = NONE
	bool success_15 = FALSE
	if (!(CURRENT_TOKEN == AUTO_86))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_13 = pos
	do
	{
		auto begin_12 = begin_13
		while (1)
		{
			_6 = any_data(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				break
			}
			success_7 = TRUE
			begin_12 += _6.token.length()
			shadow_8.push(_6.token)
			skipspaces(TOKEN_SEQUENCE)
			if (!(CURRENT_TOKEN == AUTO_74))
			{
				break
			}
			_9 = CURRENT_TOKEN
			success_10 = TRUE
			begin_12++
			shadow_11.push(_9)
		}
		if (success_7 && success_10)
		{
			success_5 = TRUE
			begin_13 = begin_12
		}
	}	while(0)

	if (success_5)
	{
		success_3 = TRUE
		pos = begin_13
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_88))
	{
		return {}
	}
	_14 = CURRENT_TOKEN
	success_15 = TRUE
	pos++
	data = shadow_11 # array
}
Rule(object) {
	token _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	bool success_11 = FALSE
	token _12 = NONE
	bool success_13 = FALSE
	array shadow_14 = NONE
	token _15 = NONE
	bool success_16 = FALSE
	array shadow_17 = NONE
	token _18 = NONE
	bool success_19 = FALSE
	array shadow_20 = NONE
	Rule_result _21 = NONE
	bool success_22 = FALSE
	array shadow_23 = NONE
	token _25 = NONE
	bool success_26 = FALSE
	token _28 = NONE
	bool success_29 = FALSE
	if (!(CURRENT_TOKEN == AUTO_60))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_27 = pos
	do
	{
		_4 = any_data(TOKEN_SEQUENCE)
		if (!(_4.res))
		{
			break
		}
		success_5 = TRUE
		begin_27 += _4.token.length()
		skipspaces(TOKEN_SEQUENCE)
		if (!(CURRENT_TOKEN == AUTO_101))
		{
			return {}
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		begin_27++
		skipspaces(TOKEN_SEQUENCE)
		_8 = any_data(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			break
		}
		success_9 = TRUE
		begin_27 += _8.token.length()
		skipspaces(TOKEN_SEQUENCE)
		auto begin_24 = begin_27
		while (1)
		{
			if (!(CURRENT_TOKEN == AUTO_74))
			{
				break
			}
			_12 = CURRENT_TOKEN
			success_13 = TRUE
			begin_24++
			shadow_14.push(_12)
			skipspaces(TOKEN_SEQUENCE)
			if (!(CURRENT_TOKEN == ID))
			{
				break
			}
			_15 = CURRENT_TOKEN
			success_16 = TRUE
			begin_24++
			shadow_17.push(_15)
			skipspaces(TOKEN_SEQUENCE)
			if (!(CURRENT_TOKEN == AUTO_101))
			{
				break
			}
			_18 = CURRENT_TOKEN
			success_19 = TRUE
			begin_24++
			shadow_20.push(_18)
			skipspaces(TOKEN_SEQUENCE)
			_21 = any_data(TOKEN_SEQUENCE)
			if (!(_21.res))
			{
				break
			}
			success_22 = TRUE
			begin_24 += _21.token.length()
			shadow_23.push(_21.token)
		}
		if (success_13 && success_16 && success_19 && success_22)
		{
			success_11 = TRUE
			begin_27 = begin_24
		}
		skipspaces(TOKEN_SEQUENCE)
		if (!(CURRENT_TOKEN == AUTO_99))
		{
			break
		}
		_25 = CURRENT_TOKEN
		success_26 = TRUE
		begin_27++
	}	while(0)

	if (success_5 && success_7 && success_9 && success_11 && success_26)
	{
		success_3 = TRUE
		pos = begin_27
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_65))
	{
		return {}
	}
	_28 = CURRENT_TOKEN
	success_29 = TRUE
	pos++
	data = 
		values: shadow_23 # array
		keys: shadow_17 # array
		value: _8.token # rule
		key: _4.token # rule
	;
}
Rule(any_data) {
	any _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	Rule_result _12 = NONE
	bool success_13 = FALSE
	Rule_result _14 = NONE
	bool success_15 = FALSE
	if (!(CURRENT_TOKEN == BOOLEAN))
	{
		if (!(CURRENT_TOKEN == NUMBER))
		{
			if (!(CURRENT_TOKEN == STRING))
			{
				if (!(CURRENT_TOKEN == ID))
				{
					_10 = array(TOKEN_SEQUENCE)
					if (!(_10.res))
					{
						_12 = object(TOKEN_SEQUENCE)
						if (!(_12.res))
						{
							_14 = accessor(TOKEN_SEQUENCE)
							if (!(_14.res))
							{
								return {}
							}
							else 
							{
								success_15 = TRUE
								pos += _14.token.length()
								_0 = _14.token
							}
						}
						else 
						{
							success_13 = TRUE
							pos += _12.token.length()
							_0 = _12.token
						}
					}
					else 
					{
						success_11 = TRUE
						pos += _10.token.length()
						_0 = _10.token
					}
				}
				else 
				{
					_8 = CURRENT_TOKEN
					success_9 = TRUE
					pos++
					_0 = _8
				}
			}
			else 
			{
				_6 = CURRENT_TOKEN
				success_7 = TRUE
				pos++
				_0 = _6
			}
		}
		else 
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			pos++
			_0 = _4
		}
	}
	else 
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		pos++
		_0 = _2
	}
	success_1 = TRUE
	data = _0 # any
}
Token(END) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ';' || *pos == '\n'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Token(NEWLINE) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '\n'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
}
Token(ID) {
	str _0 = NONE
	bool success_1 = FALSE
	str _2 = NONE
	bool success_3 = FALSE
	str _4 = NONE
	bool success_5 = FALSE
	str _6 = NONE
	bool success_7 = FALSE
	auto begin_8 = pos
	while ((*pos>='0' && *pos<='9'))
	{
		_2 += CURRENT_POS_SEQUENCE
		success_3 = TRUE
		begin_8++
	}
	skipspaces(pos)
	if (!((*pos>='a' && *pos<='z') || (*pos>='A' && *pos<='Z') || *pos == '_'))
	{
		return {}
	}
	_4 += CURRENT_POS_SEQUENCE
	success_5 = TRUE
	begin_8++
	skipspaces(pos)
	while ((*pos>='a' && *pos<='z') || (*pos>='A' && *pos<='Z') || (*pos>='0' && *pos<='9') || *pos == '_')
	{
		_6 += CURRENT_POS_SEQUENCE
		success_7 = TRUE
		begin_8++
	}
	_0 += _2
	_0 += _4
	_0 += _6
	if (success_5)
	{
		success_1 = TRUE
		pos = begin_8
	}
	data = _0 # str
}
Rule(spacemode) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	if (!(CURRENT_TOKEN == AUTO_66))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_67))
	{
		if (!(CURRENT_TOKEN == AUTO_68))
		{
			if (!(CURRENT_TOKEN == AUTO_69))
			{
				return {}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				pos++
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			pos++
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
		_2 = _4
	}
	success_3 = TRUE
	data = _0 # token
}
Rule(name) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == AUTO_70))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	data = _2 # token
}
Rule(linear_comment) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == AUTO_71))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_72))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
}
Rule(main) {
	any _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	_2 = use(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		if (!(CURRENT_TOKEN == AUTO_95))
		{
			_6 = spacemode(TOKEN_SEQUENCE)
			if (!(_6.res))
			{
				return {}
			}
			else 
			{
				success_7 = TRUE
				pos += _6.token.length()
				_0 = _6.token
			}
		}
		else 
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			pos++
			_0 = _4
		}
	}
	else 
	{
		success_3 = TRUE
		pos += _2.token.length()
		_0 = _2.token
	}
	success_1 = TRUE
}
Rule(use_unit) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = any_data(TOKEN_SEQUENCE)
	if (_2.res)
	{
		success_3 = TRUE
		pos += _2.token.length()
	}
	data = 
		value: _2.token # rule
		name: _0 # token
	;
}
Rule(use) {
	token _0 = NONE
	bool success_1 = FALSE
	Rule_result _2 = NONE
	bool success_3 = FALSE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	array shadow_8 = NONE
	Rule_result _9 = NONE
	bool success_10 = FALSE
	array shadow_11 = NONE
	if (!(CURRENT_TOKEN == AUTO_73))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_2 = use_unit(TOKEN_SEQUENCE)
	if (!(_2.res))
	{
		return {}
	}
	success_3 = TRUE
	pos += _2.token.length()
	skipspaces(TOKEN_SEQUENCE)
	auto begin_12 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_74))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		begin_12++
		shadow_8.push(_6)
		skipspaces(TOKEN_SEQUENCE)
		_9 = use_unit(TOKEN_SEQUENCE)
		if (!(_9.res))
		{
			break
		}
		success_10 = TRUE
		begin_12 += _9.token.length()
		shadow_11.push(_9.token)
	}
	if (success_7 && success_10)
	{
		success_5 = TRUE
		pos = begin_12
	}
	data = 
		second: shadow_11 # array
		first: _2.token # rule
	;
}
Rule(Rule_rule) {
	any _0 = NONE
	bool success_1 = FALSE
	bool success_3 = FALSE
	any _4 = NONE
	bool success_5 = FALSE
	any _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	token _12 = NONE
	bool success_13 = FALSE
	Rule_result _14 = NONE
	bool success_15 = FALSE
	Rule_result _16 = NONE
	bool success_17 = FALSE
	Rule_result _18 = NONE
	bool success_19 = FALSE
	Rule_result _20 = NONE
	bool success_21 = FALSE
	Rule_result _23 = NONE
	bool success_24 = FALSE
	Rule_result _26 = NONE
	bool success_27 = FALSE
	token _28 = NONE
	bool success_29 = FALSE
	Rule_result _30 = NONE
	bool success_31 = FALSE
	Rule_result _32 = NONE
	bool success_33 = FALSE
	Rule_result _34 = NONE
	bool success_35 = FALSE
	auto begin_25 = pos
	do
	{
		auto begin_22 = begin_25
		_8 = Rule_group(TOKEN_SEQUENCE)
		if (!(_8.res))
		{
			_10 = Rule_csequence(TOKEN_SEQUENCE)
			if (!(_10.res))
			{
				if (!(CURRENT_TOKEN == STRING))
				{
					_14 = accessor(TOKEN_SEQUENCE)
					if (!(_14.res))
					{
						_16 = Rule_hex(TOKEN_SEQUENCE)
						if (!(_16.res))
						{
							_18 = Rule_bin(TOKEN_SEQUENCE)
							if (!(_18.res))
							{
								_20 = Rule_other(TOKEN_SEQUENCE)
								if (!(_20.res))
								{
									break
								}
								else 
								{
									success_21 = TRUE
									begin_22 += _20.token.length()
									_6 = _20.token
								}
							}
							else 
							{
								success_19 = TRUE
								begin_22 += _18.token.length()
								_6 = _18.token
							}
						}
						else 
						{
							success_17 = TRUE
							begin_22 += _16.token.length()
							_6 = _16.token
						}
					}
					else 
					{
						success_15 = TRUE
						begin_22 += _14.token.length()
						_6 = _14.token
					}
				}
				else 
				{
					_12 = CURRENT_TOKEN
					success_13 = TRUE
					begin_22++
					_6 = _12
				}
			}
			else 
			{
				success_11 = TRUE
				begin_22 += _10.token.length()
				_6 = _10.token
			}
		}
		else 
		{
			success_9 = TRUE
			begin_22 += _8.token.length()
			_6 = _8.token
		}
		success_7 = TRUE
		if (success_7)
		{
			success_5 = TRUE
			begin_25 = begin_22
		}
		skipspaces(TOKEN_SEQUENCE)
		_23 = Rule_qualifier(TOKEN_SEQUENCE)
		if (_23.res)
		{
			success_24 = TRUE
			begin_25 += _23.token.length()
		}
	}	while(0)

	if (success_5)
	{
		success_3 = TRUE
		pos = begin_25
	}
	
	if (!success_3)
	{
		_26 = Rule_escaped(TOKEN_SEQUENCE)
		if (!(_26.res))
		{
			if (!(CURRENT_TOKEN == AUTO_95))
			{
				_30 = Rule_op(TOKEN_SEQUENCE)
				if (!(_30.res))
				{
					_32 = cll(TOKEN_SEQUENCE)
					if (!(_32.res))
					{
						_34 = linear_comment(TOKEN_SEQUENCE)
						if (!(_34.res))
						{
							return {}
						}
						else 
						{
							success_35 = TRUE
							pos += _34.token.length()
							_0 = _34.token
						}
					}
					else 
					{
						success_33 = TRUE
						pos += _32.token.length()
						_0 = _32.token
					}
				}
				else 
				{
					success_31 = TRUE
					pos += _30.token.length()
					_0 = _30.token
				}
			}
			else 
			{
				_28 = CURRENT_TOKEN
				success_29 = TRUE
				pos++
				_0 = _28
			}
		}
		else 
		{
			success_27 = TRUE
			pos += _26.token.length()
			_0 = _26.token
		}
	}
	success_1 = TRUE
	data = 
		qualifier: _4 # any
		val: _6 # any
	;
}
Rule(Rule_other) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	array shadow_8 = NONE
	token _9 = NONE
	bool success_10 = FALSE
	array shadow_11 = NONE
	if (CURRENT_TOKEN == AUTO_105)
	{
		_0 = CURRENT_TOKEN
		success_1 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_12 = pos
	while (1)
	{
		if (!(CURRENT_TOKEN == AUTO_95))
		{
			break
		}
		_6 = CURRENT_TOKEN
		success_7 = TRUE
		begin_12++
		shadow_8.push(_6)
		skipspaces(TOKEN_SEQUENCE)
		if (!(CURRENT_TOKEN == ID))
		{
			break
		}
		_9 = CURRENT_TOKEN
		success_10 = TRUE
		begin_12++
		shadow_11.push(_9)
	}
	if (success_7 && success_10)
	{
		success_5 = TRUE
		pos = begin_12
	}
	data = 
		nested_name: shadow_11 # array
		name: _2 # token
		is_nested: _0 # token
	;
}
Rule(Rule_op) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	auto begin_8 = pos
	if (!(CURRENT_TOKEN == AUTO_78))
	{
		if (!(CURRENT_TOKEN == AUTO_79))
		{
			return {}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			begin_8++
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_8++
		_2 = _4
	}
	success_3 = TRUE
	_0 = _2
	if (success_3)
	{
		success_1 = TRUE
		pos = begin_8
	}
	data = _0 # token
}
Rule(Rule_qualifier) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	auto begin_10 = pos
	if (!(CURRENT_TOKEN == AUTO_80))
	{
		if (!(CURRENT_TOKEN == AUTO_81))
		{
			if (!(CURRENT_TOKEN == AUTO_82))
			{
				return {}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				begin_10++
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			begin_10++
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		_2 = _4
	}
	success_3 = TRUE
	_0 = _2
	if (success_3)
	{
		success_1 = TRUE
		pos = begin_10
	}
	data = _0 # token
}
Rule(Rule_group) {
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	any _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	token _11 = NONE
	bool success_12 = FALSE
	Rule_result _13 = NONE
	bool success_14 = FALSE
	token _15 = NONE
	bool success_16 = FALSE
	auto begin_10 = pos
	do
	{
		if (!(CURRENT_TOKEN == AUTO_83))
		{
			break
		}
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		begin_10++
		skipspaces(TOKEN_SEQUENCE)
		_6 = method_call(TOKEN_SEQUENCE)
		if (!(_6.res))
		{
			if (!(CURRENT_TOKEN == ID))
			{
				break
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				begin_10++
				_4 = _8
			}
		}
		else 
		{
			success_7 = TRUE
			begin_10 += _6.token.length()
			_4 = _6.token
		}
		success_5 = TRUE
	}	while(0)

	if (success_3 && success_5)
	{
		success_1 = TRUE
		pos = begin_10
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_84))
	{
		return {}
	}
	_11 = CURRENT_TOKEN
	success_12 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_13 = Rule_rule(TOKEN_SEQUENCE)
	while (_13.res)
	{
		success_14 = TRUE
		pos += _13.token.length()
		_13 = Rule_rule(TOKEN_SEQUENCE)
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_85))
	{
		return {}
	}
	_15 = CURRENT_TOKEN
	success_16 = TRUE
	pos++
	data = 
		val: _13.token # rule
		variable: _2 # token
	;
}
Rule(Rule_csequence_symbol) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	auto begin_10 = pos
	if (!(CURRENT_TOKEN == AUTO_102))
	{
		if (!(CURRENT_TOKEN == AUTO_90))
		{
			if (!(CURRENT_TOKEN == AUTO_91))
			{
				return {}
			}
			else 
			{
				_8 = CURRENT_TOKEN
				success_9 = TRUE
				begin_10++
				_2 = _8
			}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			begin_10++
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		begin_10++
		_2 = _4
	}
	success_3 = TRUE
	_0 = _2
	if (success_3)
	{
		success_1 = TRUE
		pos = begin_10
	}
	data = _0 # token
}
Rule(Rule_csequence_escape) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_102))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	auto begin_6 = pos
	if (!(CURRENT_TOKEN == AUTO_103))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	begin_6++
	_2 = _4
	if (success_5)
	{
		success_3 = TRUE
		pos = begin_6
	}
	data = _2 # token
}
Rule(Rule_csequence_diapason) {
	bool success_1 = FALSE
	rule from = NONE
	bool success_2 = FALSE
	Rule_result _3 = NONE
	bool success_4 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	rule to = NONE
	bool success_8 = FALSE
	Rule_result _9 = NONE
	bool success_10 = FALSE
	auto begin_12 = pos
	auto begin_5 = begin_12
	_3 = Rule_csequence_symbol(TOKEN_SEQUENCE)
	if (!(_3.res))
	{
		return {}
	}
	success_4 = TRUE
	begin_5 += _3.token.length()
	from = _3.token
	if (success_4)
	{
		success_2 = TRUE
		begin_12 = begin_5
	}
	if (!(CURRENT_TOKEN == AUTO_94))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	begin_12++
	auto begin_11 = begin_12
	_9 = Rule_csequence_symbol(TOKEN_SEQUENCE)
	if (!(_9.res))
	{
		return {}
	}
	success_10 = TRUE
	begin_11 += _9.token.length()
	to = _9.token
	if (success_10)
	{
		success_8 = TRUE
		begin_12 = begin_11
	}
	if (success_2 && success_7 && success_8)
	{
		success_1 = TRUE
		pos = begin_12
	}
	data = [from,to,] # array
}
Rule(Rule_csequence) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_17 = NONE
	array dt = NONE
	bool success_4 = FALSE
	array _5 = NONE
	bool success_6 = FALSE
	Rule_result _7 = NONE
	bool success_8 = FALSE
	array shadow_9 = NONE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	array shadow_12 = NONE
	Rule_result _13 = NONE
	bool success_14 = FALSE
	array shadow_15 = NONE
	token _18 = NONE
	bool success_19 = FALSE
	if (!(CURRENT_TOKEN == AUTO_86))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (CURRENT_TOKEN == AUTO_87)
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		pos++
	}
	skipspaces(TOKEN_SEQUENCE)
	auto begin_16 = pos
	while (1)
	{
		_7 = Rule_csequence_escape(TOKEN_SEQUENCE)
		if (!(_7.res))
		{
			_10 = Rule_csequence_symbol(TOKEN_SEQUENCE)
			if (!(_10.res))
			{
				_13 = Rule_csequence_diapason(TOKEN_SEQUENCE)
				if (!(_13.res))
				{
					break
				}
				else 
				{
					success_14 = TRUE
					begin_16 += _13.token.length()
					shadow_15.push(_13.token)
					_5.push(_13.token)
				}
			}
			else 
			{
				success_11 = TRUE
				begin_16 += _10.token.length()
				shadow_12.push(_10.token)
				_5.push(_10.token)
			}
		}
		else 
		{
			success_8 = TRUE
			begin_16 += _7.token.length()
			shadow_9.push(_7.token)
			_5.push(_7.token)
		}
		success_6 = TRUE
		dt = _5
		shadow_17.push(dt)
	}
	if (success_6)
	{
		success_4 = TRUE
		pos = begin_16
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_88))
	{
		return {}
	}
	_18 = CURRENT_TOKEN
	success_19 = TRUE
	pos++
	data = 
		val: dt # array
		_not: _2 # token
	;
}
Rule(Rule_data_block_inclosed_map) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	bool success_2 = FALSE
	_0 = Rule_data_block_key(TOKEN_SEQUENCE)
	while (_0.res)
	{
		success_1 = TRUE
		pos += _0.token.length()
		_0 = Rule_data_block_key(TOKEN_SEQUENCE)
		success_2 = TRUE
	}
	if (!success_2)
	{
		return {}
	}
	data = _0.token # rule
}
Rule(Rule_data_block_key) {
	token _0 = NONE
	bool success_1 = FALSE
	array shadow_2 = NONE
	bool success_3 = FALSE
	token name = NONE
	bool success_4 = FALSE
	token _5 = NONE
	bool success_6 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	rule dt = NONE
	bool success_10 = FALSE
	rule _11 = NONE
	bool success_12 = FALSE
	Rule_result _13 = NONE
	bool success_14 = FALSE
	Rule_result _15 = NONE
	bool success_16 = FALSE
	while (CURRENT_TOKEN == AUTO_104)
	{
		_0 = CURRENT_TOKEN
		success_1 = TRUE
		pos++
		shadow_2.push(_0)
		success_3 = TRUE
	}
	if (!success_3)
	{
		return {}
	}
	skipspaces(TOKEN_SEQUENCE)
	auto begin_7 = pos
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_5 = CURRENT_TOKEN
	success_6 = TRUE
	begin_7++
	name = _5
	if (success_6)
	{
		success_4 = TRUE
		pos = begin_7
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_101))
	{
		return {}
	}
	_8 = CURRENT_TOKEN
	success_9 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	auto begin_17 = pos
	_13 = cll_ternary(TOKEN_SEQUENCE)
	if (!(_13.res))
	{
		_15 = expr(TOKEN_SEQUENCE)
		if (!(_15.res))
		{
			return {}
		}
		else 
		{
			success_16 = TRUE
			begin_17 += _15.token.length()
			_11 = _15.token
		}
	}
	else 
	{
		success_14 = TRUE
		begin_17 += _13.token.length()
		_11 = _13.token
	}
	success_12 = TRUE
	dt = _11
	if (success_12)
	{
		success_10 = TRUE
		pos = begin_17
	}
	data = 
		val: dt # rule
		name: name # token
	;
}
Rule(Rule_data_block) {
	token _0 = NONE
	bool success_1 = FALSE
	array shadow_2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	rule _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	Rule_result _12 = NONE
	bool success_13 = FALSE
	token _14 = NONE
	bool success_15 = FALSE
	while (CURRENT_TOKEN == AUTO_104)
	{
		_0 = CURRENT_TOKEN
		success_1 = TRUE
		pos++
		shadow_2.push(_0)
		success_3 = TRUE
	}
	if (!success_3)
	{
		return {}
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_97))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_101))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_10 = any_data(TOKEN_SEQUENCE)
	if (!(_10.res))
	{
		_12 = Rule_data_block_inclosed_map(TOKEN_SEQUENCE)
		if (!(_12.res))
		{
			return {}
		}
		else 
		{
			success_13 = TRUE
			pos += _12.token.length()
			_8 = _12.token
		}
	}
	else 
	{
		success_11 = TRUE
		pos += _10.token.length()
		_8 = _10.token
	}
	success_9 = TRUE
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_99))
	{
		return {}
	}
	_14 = CURRENT_TOKEN
	success_15 = TRUE
	pos++
	data = _8 # rule
}
Rule(Rule_escaped) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_102))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	if (!(CURRENT_TOKEN == AUTO_103))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	if (CURRENT_TOKEN == NUMBER)
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		pos++
	}
	data = 
		num: _4 # token
		c: _2 # token
	;
}
Rule(Rule_nested_rule) {
	token _0 = NONE
	bool success_1 = FALSE
	array shadow_2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	token _6 = NONE
	bool success_7 = FALSE
	while (CURRENT_TOKEN == AUTO_104)
	{
		_0 = CURRENT_TOKEN
		success_1 = TRUE
		pos++
		shadow_2.push(_0)
		success_3 = TRUE
	}
	if (!success_3)
	{
		return {}
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_105))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	if (!(CURRENT_TOKEN == AUTO_95))
	{
		return {}
	}
	_6 = CURRENT_TOKEN
	success_7 = TRUE
	pos++
	data = _6 # token
}
Rule(Rule_hex) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_106))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	while (CURRENT_TOKEN == AUTO_107)
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
		success_5 = TRUE
	}
	if (!success_5)
	{
		return {}
	}
	data = shadow_4 # array
}
Rule(Rule_bin) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	array shadow_4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == AUTO_108))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	while (CURRENT_TOKEN == AUTO_109)
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		pos++
		shadow_4.push(_2)
		success_5 = TRUE
	}
	if (!success_5)
	{
		return {}
	}
	data = shadow_4 # array
}
Rule(Rule) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	Rule_result _8 = NONE
	bool success_9 = FALSE
	token _10 = NONE
	bool success_11 = FALSE
	if (!(CURRENT_TOKEN == ID))
	{
		return {}
	}
	_0 = CURRENT_TOKEN
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_101))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	_4 = Rule_rule(TOKEN_SEQUENCE)
	while (_4.res)
	{
		success_5 = TRUE
		pos += _4.token.length()
		_4 = Rule_rule(TOKEN_SEQUENCE)
	}
	skipspaces(TOKEN_SEQUENCE)
	_6 = Rule_data_block(TOKEN_SEQUENCE)
	if (!(_6.res))
	{
		return {}
	}
	success_7 = TRUE
	pos += _6.token.length()
	skipspaces(TOKEN_SEQUENCE)
	_8 = Rule_nested_rule(TOKEN_SEQUENCE)
	while (_8.res)
	{
		success_9 = TRUE
		pos += _8.token.length()
		_8 = Rule_nested_rule(TOKEN_SEQUENCE)
	}
	skipspaces(TOKEN_SEQUENCE)
	if (!(CURRENT_TOKEN == AUTO_99))
	{
		return {}
	}
	_10 = CURRENT_TOKEN
	success_11 = TRUE
	pos++
	data = 
		nestedRules: _8.token # rule
		data_block: _6.token # rule
		rule: _4.token # rule
		name: _0 # token
	;
}
Token(AUTO_1) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '%'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_3) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '>'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_4) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '$'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_8) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "unsigned")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_9) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "char")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_10) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "short")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_11) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "int")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_12) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "long")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_13) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "long long")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_14) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "float")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_15) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "double")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_16) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "deque")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_17) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "vector")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_18) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "queue")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_19) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "stack")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_20) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "list")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_21) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "forward_list")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_22) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "var")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_23) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "any")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_24) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "num")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_25) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "bool")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_26) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "str")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_27) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "arr")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_28) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "obj")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_29) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "if")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_42) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "fn")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_43) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "while")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_44) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "for")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_50) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '='))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_55) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "++")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_56) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "--")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_60) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '{'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_65) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '}'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_66) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "spacemode")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_67) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "mixed")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_68) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "skipped")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_69) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "allowed")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_70) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "name")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_71) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "//")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_72) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!(*pos == '\n')))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_73) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "use")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_74) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ','))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_78) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '|'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_79) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "|&")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_80) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '?'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_81) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '+'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_82) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '*'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_83) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '&'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_84) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '('))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_85) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ')'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_86) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '['))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_87) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '^'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_88) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ']'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_90) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "\\]")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_91) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!(*pos == ']')))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_94) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '-'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_95) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '.'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_97) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "data")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_99) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ';'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_101) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == ':'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_102) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "\\")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_103) {
	str _0 = NONE
	bool success_1 = FALSE
	if (*pos == '\0')
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_104) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '\r' || *pos == '\n'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_105) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '#'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_106) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "0x")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_107) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!((*pos>='1' && *pos<='9') || (*pos>='A' && *pos<='F') || (*pos>='a' && *pos<='f')))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_108) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(!STRNCMP(pos, "0b")))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(AUTO_109) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '0' || *pos == '1'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = _0 # str
}
Token(__WHITESPACE) {
	str _0 = NONE
	bool success_1 = FALSE
	while (*pos == ' ' || *pos == '\t' || *pos == '\n' || *pos == '\r' || *pos == '\v' || *pos == '\f')
	{
		_0 += CURRENT_POS_SEQUENCE
		success_1 = TRUE
		pos++
	}
}
