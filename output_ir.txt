Rule(Test_raw_element_access) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_0"))
	{
		token _4 = NONE
		bool success_5 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_1"))
		{
			return {}
		}
		else 
		{
			_4 = CURRENT_TOKEN
			success_5 = TRUE
			_0 = _4
		}
	}
	else 
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		_0 = _2
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	any _6 = NONE
	bool success_7 = FALSE
	UNDEF _9 = NONE
	bool success_8 = FALSE
	if (!STRNCMP(pos, _2))
	{
		_9 += CURRENT_POS_SEQUENCE
		success_8 = TRUE
		pos++
	}
	if (!success_8)
	{
		token _10 = NONE
		bool success_11 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_2"))
		{
			return {}
		}
		else 
		{
			_10 = CURRENT_TOKEN
			success_11 = TRUE
			_6 = _10
		}
	}
	else 
	{
		_6 = _9
	}
	_6 += CURRENT_POS_SEQUENCE
	success_7 = TRUE
	pos++
}
Rule(Test_raw_group_access) {
	token _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_3"))
	{
		token _6 = NONE
		bool success_7 = FALSE
		if (!(CURRENT_TOKEN == "AUTO_4"))
		{
			return {}
		}
		else 
		{
			_6 = CURRENT_TOKEN
			success_7 = TRUE
			_2 = _6
		}
	}
	else 
	{
		_4 = CURRENT_TOKEN
		success_5 = TRUE
		_2 = _4
	}
	_2 += CURRENT_POS_SEQUENCE
	success_3 = TRUE
	pos++
	if (success_3)
	{
		success_1 = TRUE
	}
	_0 = _2
	skipspaces(TOKEN_SEQUENCE)
	UNDEF _9 = NONE
	bool success_8 = FALSE
	if (!(!STRNCMP(pos, _0)))
	{
		return {}
	}
	_9 += CURRENT_POS_SEQUENCE
	success_8 = TRUE
	pos++
}
Rule(Test_element_of_group_access) {
	str _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_5"))
	{
		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	skipspaces(TOKEN_SEQUENCE)
	token _4 = NONE
	bool success_5 = FALSE
	if (!(CURRENT_TOKEN == "AUTO_6"))
	{
		return {}
	}
	_4 = CURRENT_TOKEN
	success_5 = TRUE
	pos++
	if (success_5)
	{
		success_1 = TRUE
	}
	_0 += _2
	_0 += _4
	skipspaces(TOKEN_SEQUENCE)
	UNDEF _7 = NONE
	bool success_6 = FALSE
	if (!(!STRNCMP(pos, _4)))
	{
		return {}
	}
	_7 += CURRENT_POS_SEQUENCE
	success_6 = TRUE
	pos++
}
Token(AUTO_0) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '\''))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
Token(AUTO_1) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '"'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
Token(AUTO_2) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == 'a'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
Token(AUTO_3) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == 'a'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
Token(AUTO_4) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == 'b'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
Token(AUTO_5) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == 'a'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
Token(AUTO_6) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == 'b'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	pos++
	data = %1

}
