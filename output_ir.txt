Rule(main) {
	Rule_result _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	Rule_result _4 = NONE
	bool success_5 = FALSE
	_0 = term(TOKEN_SEQUENCE)
	if (!(_0.status))
	{
		return {}
	}
	success_1 = TRUE
	pos += _0.token.length()
	if (!(CURRENT_TOKEN == AUTO_0))
	{
		errorauto_0

		return {}
	}
	_2 = CURRENT_TOKEN
	success_3 = TRUE
	pos++
	_4 = term(TOKEN_SEQUENCE)
	if (!(_4.status))
	{
		errorterm

		return {}
	}
	success_5 = TRUE
	pos += _4.token.length()
}
Rule(term) {
	any _0 = NONE
	bool success_1 = FALSE
	token _2 = NONE
	bool success_3 = FALSE
	bool success_5 = FALSE
	Rule_result _6 = NONE
	bool success_7 = FALSE
	token _8 = NONE
	bool success_9 = FALSE
	Rule_result _10 = NONE
	bool success_11 = FALSE
	if (!(CURRENT_TOKEN == NUMBER))
	{
		auto begin_12 = pos
		do
		{
			_6 = term(TOKEN_SEQUENCE)
			if (!(_6.status))
			{
				break
			}
			success_7 = TRUE
			begin_12 += _6.token.length()
			if (!(CURRENT_TOKEN == AUTO_1))
			{
				errorauto_1

				break
			}
			_8 = CURRENT_TOKEN
			success_9 = TRUE
			begin_12++
			_10 = term(TOKEN_SEQUENCE)
			if (!(_10.status))
			{
				errorterm

				break
			}
			success_11 = TRUE
			begin_12 += _10.token.length()
		}		while(0)

		
		if (!success_5)
		{
			return {}
		}
	}
	else 
	{
		_2 = CURRENT_TOKEN
		success_3 = TRUE
		begin_12++
		_0 = _2
	}
	success_1 = TRUE
}
Token(NUMBER) {
	str _0 = NONE
	bool success_1 = FALSE
	bool success_2 = FALSE
	while ((*pos>='0' && *pos<='9'))
	{
		_0 += CURRENT_POS_SEQUENCE
		success_1 = TRUE
		begin_12++
		success_2 = TRUE
	}
	if (!success_2)
	{
		return {}
	}
}
Token(AUTO_0) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '+'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	begin_12++
	data = _0 # str
}
Token(AUTO_1) {
	str _0 = NONE
	bool success_1 = FALSE
	if (!(*pos == '*'))
	{
		return {}
	}
	_0 += CURRENT_POS_SEQUENCE
	success_1 = TRUE
	begin_12++
	data = _0 # str
}
Token(__WHITESPACE) {
	str _0 = NONE
	bool success_1 = FALSE
	bool success_2 = FALSE
	while (*pos == ' ' || *pos == '\t' || *pos == '\n' || *pos == '\r' || *pos == '\v' || *pos == '\f')
	{
		_0 += CURRENT_POS_SEQUENCE
		success_1 = TRUE
		begin_12++
		success_2 = TRUE
	}
	if (!success_2)
	{
		return {}
	}
}
