if ( CURRENT_TOKEN  !=  "AUTO_0" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "NUMBER" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_1" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "NUMBER" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_2" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "NUMBER" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
bool success_0 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_1 = CURRENT_TOKEN;

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
_0 = accessor_all(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

UNDEF cll_begin = NONE

if ( success_1 )
{
		success_2 = TRUE;

}

UNDEF _12 = NONE

if ( success_9  &&  success_11 )
{
		success_13 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_5" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "Rule" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_6" )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
bool success_0 = FALSE

_1 = AUTO_73(TOKEN_SEQUENCE);

if ( !  _1.res )
{
	return {}
}

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
bool success_5 = FALSE

_6 = AUTO_73(TOKEN_SEQUENCE);

if ( !  _6.res )
{
	return {}
}

success_7 = TRUE;

pos++
if ()
{
		_8 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _8.res )
	{
		return {}
	}

		success_9 = TRUE;

	pos++
}

pos++
_0 = OP(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_2 = AUTO_45(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
bool success_0 = FALSE

_1 = AUTO_73(TOKEN_SEQUENCE);

if ( !  _1.res )
{
	return {}
}

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
bool success_0 = FALSE

_1 = LOGICAL_AND(TOKEN_SEQUENCE);

if ( !  _1.res )
{
	return {}
}

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
bool success_0 = FALSE

str _1 = NONE

bool success_2 = FALSE

if ( STRNCMP(pos, "!") )
{
	return {}
}

_1 += CURRENT_POS_SEQUENCE;

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
bool success_0 = FALSE

str _1 = NONE

bool success_2 = FALSE

if ( STRNCMP(pos, "&&") )
{
	return {}
}

_1 += CURRENT_POS_SEQUENCE;

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
bool success_0 = FALSE

str _1 = NONE

bool success_2 = FALSE

if ( STRNCMP(pos, "||") )
{
	return {}
}

_1 += CURRENT_POS_SEQUENCE;

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
bool success_0 = FALSE

str _1 = NONE

bool success_2 = FALSE

if ( STRNCMP(pos, "|&") )
{
	return {}
}

_1 += CURRENT_POS_SEQUENCE;

success_2 = TRUE;

pos++
if ()
{
		_3 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _3.res )
	{
		return {}
	}

		success_4 = TRUE;

	pos++
}

pos++
_0 = cll_type(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( CURRENT_TOKEN  !=  "NUMBER" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( CURRENT_TOKEN  !=  "BOOLEAN" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( CURRENT_TOKEN  !=  "STRING" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

_0 = array(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

_0 = object(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

_0 = any_data(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

bool success_0 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_1 = CURRENT_TOKEN;

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
_5 = cll_template(TOKEN_SEQUENCE);

if ( !  _5.res )
{
	return {}
}

success_6 = TRUE;

pos++
UNDEF _9 = NONE

if ( success_8 )
{
		success_10 = TRUE;

}

bool success_0 = FALSE

_1 = cll_csupport_types(TOKEN_SEQUENCE);

if ( !  _1.res )
{
	return {}
}

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
UNDEF _2 = NONE

if ( success_1 )
{
		success_3 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_29" )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
_6 = expr(TOKEN_SEQUENCE);

if ( !  _6.res )
{
	return {}
}

success_7 = TRUE;

pos++
UNDEF _22 = NONE

if ( success_8  &&  success_21 )
{
		success_23 = TRUE;

}

_0 = expr(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_31" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
_4 = expr(TOKEN_SEQUENCE);

if ( !  _4.res )
{
	return {}
}

success_5 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_32" )
{
	return {}
}

_6 = CURRENT_TOKEN;

success_7 = TRUE;

pos++
_8 = expr(TOKEN_SEQUENCE);

if ( !  _8.res )
{
	return {}
}

success_9 = TRUE;

pos++
bool success_0 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_1 = CURRENT_TOKEN;

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
if ( CURRENT_TOKEN  !=  "AUTO_33" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = function_arguments(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_34" )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_35" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = function_parameters(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_36" )
{
	return {}
}

_4 = CURRENT_TOKEN;

success_5 = TRUE;

pos++
bool success_0 = FALSE

_1 = any_data(TOKEN_SEQUENCE);

if ( !  _1.res )
{
	return {}
}

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
if ( CURRENT_TOKEN  !=  "ID" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "ID" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = function_body_call(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_37" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_38" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_5 )
{
		success_7 = TRUE;

}

_8 = function_body_decl(TOKEN_SEQUENCE);

if ( !  _8.res )
{
	return {}
}

success_9 = TRUE;

pos++
UNDEF _15 = NONE

if ( success_10 )
{
		success_16 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_39" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = expr(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
bool success_4 = FALSE

_5 = cll_block(TOKEN_SEQUENCE);

if ( !  _5.res )
{
	return {}
}

success_6 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_7 = CURRENT_TOKEN;

		success_8 = TRUE;

	pos++
}

pos++
_0 = for(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_40" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _9 = NONE

if ( success_4 )
{
		success_10 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_41" )
{
	return {}
}

_11 = CURRENT_TOKEN;

success_12 = TRUE;

pos++
_13 = expr(TOKEN_SEQUENCE);

if ( !  _13.res )
{
	return {}
}

success_14 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_42" )
{
	return {}
}

_15 = CURRENT_TOKEN;

success_16 = TRUE;

pos++
_17 = expr(TOKEN_SEQUENCE);

if ( !  _17.res )
{
	return {}
}

success_18 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_43" )
{
	return {}
}

_19 = CURRENT_TOKEN;

success_20 = TRUE;

pos++
bool success_21 = FALSE

_22 = cll_block(TOKEN_SEQUENCE);

if ( !  _22.res )
{
	return {}
}

success_23 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_24 = CURRENT_TOKEN;

		success_25 = TRUE;

	pos++
}

pos++
if ( CURRENT_TOKEN  !=  "ID" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_45" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = method_call(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
UNDEF _5 = NONE

if ( success_0 )
{
		success_6 = TRUE;

}

if ( CURRENT_TOKEN  !=  "ID" )
{
	return {}
}

_7 = CURRENT_TOKEN;

success_8 = TRUE;

pos++
UNDEF _15 = NONE

if ( success_10  &&  success_12  &&  success_14 )
{
		success_16 = TRUE;

}

UNDEF _22 = NONE

if ( success_17 )
{
		success_23 = TRUE;

}

_0 = cll_type(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "ID" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
UNDEF _11 = NONE

if ( success_5  &&  success_6 )
{
		success_12 = TRUE;

}

UNDEF _2 = NONE

if ( success_1 )
{
		success_3 = TRUE;

}

UNDEF _9 = NONE

if ( success_4 )
{
		success_10 = TRUE;

}

_0 = END(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
bool success_2 = FALSE

_3 = END(TOKEN_SEQUENCE);

if ( !  _3.res )
{
	return {}
}

success_4 = TRUE;

pos++
if ()
{
		_5 = AUTO_73(TOKEN_SEQUENCE);

	if 	( !  _5.res )
	{
		return {}
	}

		success_6 = TRUE;

	pos++
}

pos++
UNDEF d = NONE

if ( success_0 )
{
		success_5 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_52" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _8 = NONE

if ( success_7 )
{
		success_9 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_54" )
{
	return {}
}

_10 = CURRENT_TOKEN;

success_11 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_55" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
UNDEF _20 = NONE

if ( success_3  &&  success_5  &&  success_7  &&  success_17  &&  success_19 )
{
		success_21 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_60" )
{
	return {}
}

_22 = CURRENT_TOKEN;

success_23 = TRUE;

pos++
bool success_0 = FALSE

if ( CURRENT_TOKEN  !=  "BOOLEAN" )
{
	return {}
}

_1 = CURRENT_TOKEN;

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
bool success_5 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_6 = CURRENT_TOKEN;

success_7 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_8 = CURRENT_TOKEN;

		success_9 = TRUE;

	pos++
}

pos++
_0 = NEWLINE(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_41(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_61(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
UNDEF _6 = NONE

if ( success_1  &&  success_3  &&  success_5 )
{
		success_7 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_64" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
bool success_2 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_3 = CURRENT_TOKEN;

success_4 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_5 = CURRENT_TOKEN;

		success_6 = TRUE;

	pos++
}

pos++
if ( CURRENT_TOKEN  !=  "AUTO_68" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_69" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
bool success_0 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_1 = CURRENT_TOKEN;

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "import") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _8 = NONE

if ( success_5  &&  success_7 )
{
		success_9 = TRUE;

}

if ( CURRENT_TOKEN  !=  "AUTO_70" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
_2 = unit(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
UNDEF _8 = NONE

if ( success_5  &&  success_7 )
{
		success_9 = TRUE;

}

bool success_0 = FALSE

%2

bool success_1 = FALSE

%4

_0 = preproc_begin(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_2 = preproc(TOKEN_SEQUENCE);

if ( !  _2.res )
{
	return {}
}

success_3 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_72" )
{
	return {}
}

_0 = CURRENT_TOKEN;

success_1 = TRUE;

pos++
if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_2 = CURRENT_TOKEN;

success_3 = TRUE;

pos++
bool success_0 = FALSE

if ( CURRENT_TOKEN  !=  "AUTO_73" )
{
	return {}
}

_1 = CURRENT_TOKEN;

success_2 = TRUE;

pos++
if ()
{
	if 	( CURRENT_TOKEN  !=  "AUTO_73" )
	{
		return {}
	}

		_3 = CURRENT_TOKEN;

		success_4 = TRUE;

	pos++
}

pos++
UNDEF rule_begin = NONE

if ( success_1  &&  success_3 )
{
		success_4 = TRUE;

}

UNDEF _9 = NONE

if ( success_8 )
{
		success_10 = TRUE;

}

_15 = STRICT_END(TOKEN_SEQUENCE);

if ( !  _15.res )
{
	return {}
}

success_16 = TRUE;

pos++
_0 = AUTO_4(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "%") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "^") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, ">") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "$") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_55(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_60(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_8(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_9(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_10(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_11(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_12(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_13(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_53(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "unsigned") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "char") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "short") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "int") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "long") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "long long") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "float") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "double") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "deque") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "vector") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "queue") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "stack") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "list") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "forward_list") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_37(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "if") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
UNDEF _0 = NONE

if ( *pos  ==  ' ' )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "?") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_56(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_35(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_36(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_40(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_43(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( *pos  !=  ' ' )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "fn") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "while") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "(") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_42(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_59(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, ")") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, ".") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "=") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_50(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_51(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_52(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_54(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "++") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "--") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "[") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_57(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "]") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "{") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_58(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_71(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, ":") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, ";") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "}") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
_0 = AUTO_62(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
_0 = AUTO_63(TOKEN_SEQUENCE);

if ( !  _0.res )
{
	return {}
}

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  (  *pos  >=  'a'  &&  *pos  <=  'z'  )  &&  (  *pos  >=  'A'  &&  *pos  <=  'Z'  )  &&  (  *pos  >=  '0'  &&  *pos  <=  '9'  )  &&  *pos  ==  '_'  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "spacemode") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "mixed") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "skipped") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "allowed") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "//") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( !  (  *pos  ==  'n'  ) )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "use") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, ",") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "\n") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
str _0 = NONE

bool success_1 = FALSE

if ( STRNCMP(pos, "@") )
{
	return {}
}

_0 += CURRENT_POS_SEQUENCE;

success_1 = TRUE;

pos++
