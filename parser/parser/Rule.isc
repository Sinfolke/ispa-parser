Rule:
    ID ':' #rule* #data_block #nested_rule* STRICT_END
    data:
        name: %1
        rule: %3
        data_block: %4
        nested_rules: %5 
    ;
    #rule:

        group | name | CSEQUENCE | STRING | HEX | BIN | ESCAPED | ANY | OP | LINEAR_COMMENT | cll QUANITIFIER?

        data: 
            val: %1
            qualifier: %2
        ;
    ;
    #name:
        '#'? ID ('.' ID)*

        data:
            is_nested: %1
            name: %2
            nested_name: $1>%2
        ;
    ;
    #group:
        ('&' ID )? '(' rule* ')'

        data: 
            variable: $1>%1
            val: %4
        ;
    ;
    #nested_rule: 
        '#' \s0 (Rule)
        data: $1;
    ;
    #data_block:
        '{' any_data | #key+ '}'
        data: %2;

        #key:
            [\n\r]+ &name(ID) ':' &dt (expr)
            data:
                name: name
                val: dt
            ;
        ;
    ;
    #OP:
        '|'
    ;
    #QUANITIFIER:
        ('?' | '+' | '*')
        data: $1;
    ;

    #CSEQUENCE:
        '[' '^'? &dt ( #ESCAPE | #SYMBOL | #DIAPASON )* ']'
        data:
            _not: %2
            val: dt
        ;
        #SYMBOL:
            ('\\' | '\\]' |  [^\]])

            data: $1; 
        ;
        #ESCAPE:
            // some escape chars like \s, \d
            '\\' \s0 (.)

            data: $1;
        ;
        #DIAPASON:
            ( &from (SYMBOL) \s0 '-' \s0 &to (SYMBOL))
            data: [from, to];
        ;
    ;
    #ANY:
        '.'
    ;
    #ESCAPED:
        '\\' \s0 (.) \s0 NUMBER?
        data:
            c: $1
            num: %3
        ;
    ;
    #HEX:
        '0x' [0-9A-Fa-f]+
        data: %2;
    ;
    #BIN:
        '0b' [01]+
        data: %2;
    ;
;