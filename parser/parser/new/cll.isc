cll: 
    '$' @ #_var | #_if | #expr | #loop_while | #loop_for END
    {@} 

    #OP:
        @ '+' | '-' | '*' | '/' | '%'

        {@}
    ;
    #ASSIGNMENT_OP:
        OP? @ '='

        {@}
    ;
    #COMPARE_OP:
        @ '==' | '!=' | '>' | '<' | '>=' | '<='

        {@}
    ;
    #LOGICAL_OP:
        @ LOGICAL_AND | LOGICAL_OR
        {@}
    ;
    #LOGICAL_NOT:
        '!' | 'not'
    ;
    #LOGICAL_AND:
        '&&' | 'and'
    ;
    #LOGICAL_OR:
        '||' | 'or'
    ;
    
    #TYPE:
        ( @ 'var' | 'num' | 'bool' | 'str' | (@ 'arr' @ TEMPLATE) | (@ 'obj' @ TEMPLATE) )

        @{type, templ}
    ;
    #TEMPLATE:
        '<' @ TYPE (',' @ TYPE)* '>'

        @{first, second}
    ;
    #_if: 
        'if' @ expr @ stmt

        @{expr, stmt}
    ;
    #_variable:
        @ ('++' | '--')? @ ID ('[' @ expr ']')? @ ('++' | '--')?

        @{pre, name, brace_expression, pos}
    ;
    #function_body_call:
        '(' @ function_arguments ')'

        {@}
    ;
    #function_body_decl:
        '(' @ function_parameters ')'
        {@}
    ;
    #function_arguments:
        (@ expr (',' @ expr)* )

        @{first, second}
    ;
    #function_parameters:
        (@ ID (',' @ ID)* )

        @{first, second}
    ;
    #function_call:
        @ ID @ function_body_call

        @{name, body}
    ;
    #function_decl: 
        'fn' @ ID+ @ function_body_decl @ stmt?
        
        @{type, name, stmt}
    ;
    #expr: 
        @ #logical
        {@}

        #logical:
            @ compare (@ LOGICAL_OP @ compare)*

            @{left, op, right}
        ;

        #compare:
            @ arithmetic (@ COMPARE_OP @ arithmetic)*

            @{first, operators, sequence}
        ;

        #arithmetic:
            @ term (@ PLUS | MINUS @ term)*
            
            @{first, operators, sequence}
        ;

        #term:
            @ value (@ MULTIPLE | DIVIDE | MODULO @ value)*  // TERM_OP = * / / % etc.

            @{first, operators, sequence}
        ;

        #value:
            @ group | _variable | cll_function_call | method_call | any_data
            {@}
        ;

        #group:
            '(' @ expr ')'
            {@}
        ;
    ;
    #method_call:
        @ ID '.' @ function_call
        @{name, body}
    ;
    #_var: 
        @ TYPE? @ ID @ (ASSIGNMENT_OP @ expr)?

        @{type, id, op, value}
    ;
    #stmt:
        '{' @ Rule.rule* '}'
        {@}
    ;
    #loop_while:
        'while' @ expr @ stmt

        @{expr, stmt}
    ;
    #loop_for: 
        'for' '(' @ (expr | _var)? ';' @ expr? ';' @ expr? ')' @ stmt

        @{decl, cond, end, stmt}
    ;
;
