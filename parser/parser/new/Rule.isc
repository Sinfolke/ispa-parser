rule:
    @ ID ':' @ #member+ @ #data_block? @ #nested_rule* STRICT_END

    @{ name, rule, data_block, nested_rules }

    #member:

        @(keyvalue | value)? @ name | group | CSEQUENCE | STRING | HEX | BIN | NOSPACE | ESCAPED | ANY | OP | LINEAR_COMMENT | cll @ QUANTIFIER?

        @{ prefix, val, quantifier }
    ;
    #name:
        @ '#'? @ ID ('.' @ ID)*

        @{ is_nested, name, nested_name }
    ;
    #group:
        '(' @ member* ')'

        {@}
    ;
    #keyvalue:
        '@' (\s0 @ ID)?
        {@}
    ;
    #value:
        '&' @ ID
        {@}
    ;
    #nested_rule: 
        '#' \s0 @ rule
        {@}
    ;
    #data_block:
        @ #templated_datablock | #regular_datablock
        {@}
        #regular_datablock:
            '{' @ cll.expr | #key+ '}'
            {@}
            #key:
                @ ID '=' @ cll.expr
                @{name, dt}
            ;
        ;
        #templated_datablock:
            '@' '{' (@ ID (',' @ ID)*)? '}'
            @{ first_name, second_name }
        ;
    ;
    #OP:
        '|'
    ;
    #QUANTIFIER:
        @('?' | '+' | '*')
        {@}
    ;

    #CSEQUENCE:
        '[' @ '^'? @ ( #ESCAPE | #SYMBOL | #DIAPASON )* ']'
        @{_not, val}
        #SYMBOL:
            @('\\' | '\\]' | [^\]])
            {@}
        ;
        #ESCAPE:
            // some escape chars like \s, \d
            '\\' \s0 @ (.)
            {@}
        ;
        #DIAPASON:
            ( @ SYMBOL \s0 '-' \s0 @ SYMBOL)
            @{from, to}
        ;
    ;
    #ANY:
        '.'
    ;
    #NOSPACE:
        '\\s0'
    ;
    #ESCAPED:
        '\\' \s0 @(.) \s0
        {@}
    ;
    #HEX:
        '0x' @[0-9A-Fa-f]+
        {@}
    ;
    #BIN:
        '0b' @[01]+
        {@}
    ;
;