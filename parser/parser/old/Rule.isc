Rule:
    ID ':' #rule+ #data_block? #nested_rule* STRICT_END
    data:
        name: %1
        rule: %3
        data_block: %4
        nested_rules: %5 
    ;
    #rule:

        &prefix(keyvalue | value)? &val(group | name | CSEQUENCE | STRING | HEX | BIN | NOSPACE | ESCAPED | ANY | OP | LINEAR_COMMENT | cll) &quantifier(quantifier?)

        data: 
            prefix: prefix
            val: val
            quantifier: quantifier
        ;
    ;
    #name:
        '#'? ID ('.' ID)*

        data:
            is_nested: %1
            name: %2
            nested_name: $1>%2
        ;
    ;
    #group:
        '(' rule* ')'

        data: %2;
    ;
    #keyvalue:
        AT (\s0 ID)?
        data: %2;
    ;
    #value:
        '&' ID
        data: %2;
    ;
    #nested_rule: 
        '#' \s0 Rule
        data: %2;
    ;
    #data_block:
        #templated_datablock | #regular_datablock
        data: %1;

        #regular_datablock:
            '{' any_data | #key+ '}'
            data: %2;
            #key:
                &name(ID) '=' &dt (cll.expr)
                data:
                    name: name
                    val: dt
                ;
            ;
        ;
        #templated_datablock:
            AT '{' (&first_name (ID) (',' &second_name (ID))*)? '}'
            data:
                first_name: first_name
                second_name: second_name
            ;
        ;
    ;
    #OP:
        '|'
    ;
    #quantifier:
        QUESTION_MARK | PLUS | MULTIPLE
        data: %1;
    ;

    #CSEQUENCE:
        '[' '^'? &dt ( #ESCAPE | #SYMBOL | #DIAPASON )* ']'
        data:
            _not: %2
            val: dt
        ;
        #SYMBOL:
            ('\\' | '\\]' |  [^\]])

            data: $1; 
        ;
        #ESCAPE:
            // some escape chars like \s, \d
            '\\' \s0 (.)

            data: $1;
        ;
        #DIAPASON:
            ( &from (SYMBOL) \s0 '-' \s0 &to (SYMBOL))
            data: [from, to];
        ;
    ;
    #ANY:
        '.'
    ;
    #NOSPACE:
        '\\s0'
    ;
    #ESCAPED:
        '\\' \s0 (.)
        data: $1;
    ;
    #HEX:
        '0x' [0-9A-Fa-f]+
        data: %2;
    ;
    #BIN:
        '0b' [01]+
        data: %2;
    ;
;