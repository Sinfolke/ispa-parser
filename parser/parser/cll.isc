cll: 
    '$' #var | #if | #expr | #loop_while | #loop_for END 

    #OP:
        '+' | '-' | '*' | '/' | '%'

        data: %1;
    ;
    #ASSIGNMENT_OP:
        OP? '='

        data: %1;
    ;
    #COMPARE_OP:
        '==' | '!=' | '>' | '<' | '>=' | '<='

        data: %1;
    ;
    #LOGICAL_OP:
        LOGICAL_AND | LOGICAL_OR
        data: %1;
    ;
    #LOGICAL_NOT:
        '!' | 'not'
    ;
    #LOGICAL_AND:
        '&&' | 'and'
    ;
    #LOGICAL_OR:
        '||' | 'or'
    ;
    
    #type:
        ( 'var' | 'any' | 'num' | 'bool' | 'str' | ('arr' template) | ('obj' template) )
        data:
            type: %1
            templ: %2
        ;
    ;
    #template:
        type (',' type)*
        data: 
            first: %1
            second: %3
        ;
    ;
    #if: 
        'if' expr block
        data:
            expr: %2
            block: %3
        ;
    ;
    #variable:
        ('++' | '--')? ID ('[' expr ']')? ('++' | '--')?
        data:
            name: %2
            brace_expression: $2>%2
            pre: $1
            post: $3
        ;
    ;
    #function_body_call:
        '(' function_arguments ')'
        data: %2;
    ;
    #function_body_decl:
        '(' function_parameters ')'
        data: %2;
    ;
    #function_arguments:
        (any_data | ID (',' any_data | ID)* )

        data: 
            first: %1
            second: %3
        ;
    ;
    #function_parameters:
        (ID (',' ID)* )
        data: 
            first: %1
            second: %3
        ;
    ;
    #cll_function_call:
        ID function_body_call
        data:
            name: %1
            body: %2
        ;
    ;
    #function_decl: 
        'fn' (ID+) function_body_decl &val(block)?

        data:
            type: %2
            name: %3
            value: val
        ;
    ;
    #expr: 
        #logical | #compare | #arithmetic | #group | #value

        data: %1;
        #logical:
            compare | arithmetic | value LOGICAL_OP compare | arithmetic | value
            data:
                left: %1
                op: %2
                right: %3
            ;
        ;
        #compare:
            arithmetic (COMPARE_OP arithmetic)+
            data:
                first: %1
                operators: %2
                sequence: %3
            ;
        ;
        #arithmetic:
            value (OP value)+
            data: 
                first: %1
                operators: %2
                sequence: %3
            ;
        ;
        #value:
            group | variable | cll_function_call | any_data

            data: %1;
        ;
        #group:
            '(' expr ')'
            
            data: %2;
        ;
    ;
    #var: 
        type? ID (ASSIGNMENT_OP expr)?

        data:
            type: %1
            id: %2
            op: %3
            value: %4
        ;
    ;
    #block:
        '{' Rule.rule* '}'
        data: %2;
    ;
    #loop_while:
        'while' expr cll_block
        data:
            expr: %2
            block: %3
        ;
    ;
    #loop_for: 
        'for' '(' (expr | var)? ';' expr? ';' expr? ')' cll_block
        data:
            decl: %3
            cond: %5
            end: %7
            block: %9
        ;
    ;
;
