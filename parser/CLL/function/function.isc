function_body_call:
    '(' function_arguments ')'
    data: $1;
;
function_body_decl:
    '(' function_parameters ')'
    data: $1;
;
function_arguments: 
    ANY_DATA | ID?
    $if (matched(%1)) {
        (',' ANY_DATA | ID)*
    }
    data: [%1, %3];
;
function_parameters:
    ID?
    $if (matched(%1)) {
        (',' ID)*
    }
    
    data: [%1, %3];
;
cll_function_call:
    ID function_body_call
    data:
        name: $1
        body: $2
    ;
;
function_decl: 
    $bool is_declaration_only = true;
    $bool is_typed = false;
    $int spaces = %1.size();
    $str fun_name;
    $str function_value;
    $arr<str> fun_type;

            
    // get the function type if exists
    $if ($1>%1.size() > 1) {
    $   is_typed = true;
    $   fun_type = $1>%1;
    $   fun_name = fun_type.pop();
    }
    \s* 'fn' (ID+) function_body_decl $val(#function_value)?

    data:
        is_declaration_only: is_declaration_only
        is_typed: is_typed
        name: fun_name
        type: fun_type
        value: val


    #function_value(spaces):
        // get the function value if exists
        $is_declaration_only = false;
        $arr val;
        $while (true) {
        $   skipup('\n');
        $   var current_spaces_amount = skipup("\s*").size();
        $   if (current_spaces_amount >= spaces)
                // match any cll rule here
                &val.push(var | cond | expr | copiable_method_call)+ 
        }
        data: val;
    ;
;